/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/App.tsx:const App = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/main.tsx:  // Filter out development tool errors that don't affect functionality
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/main.tsx:async function initializeApp() {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/main.tsx:      logger.warn('Health check failed in production, continuing with degraded functionality');
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/main.tsx:    // Continue anyway - the app might still work with degraded functionality
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/contexts/SupabaseContext.tsx:export const useSupabase = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/contexts/SupabaseContext.tsx:export const SupabaseProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/config/adminSecurity.ts:export const getAdminSecurityConfig = (): AdminSecurityConfig => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/config/environment.ts:function validateEnvironment(): { errors: string[]; warnings: string[] } {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/config/environment.ts:  // Core required variables (critical for app functionality)
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/config/environment.ts:export function getEnvironmentConfig(): EnvironmentConfig {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/config/environment.ts:// Export validation function for use in startup checks
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/config/production-thresholds.ts:export async function registerProductionThresholds(): Promise<void> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/config/adminSecurityEnhancements.ts:export const getAdminSecurityHeaders = (): SecurityHeaders => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/config/adminSecurityEnhancements.ts:export const shouldHideAdminAccess = (): boolean => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/config/adminSecurityEnhancements.ts:export const getAdminAccessPath = (): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/config/adminSecurityEnhancements.ts:        get: function() {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/config/adminSecurityEnhancements.ts:      // Remove any admin-related classes or IDs that might hint at admin functionality
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/providers/AuthProvider.tsx:export const useAuth = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/providers/AuthProvider.tsx:export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/providers/AuthProvider.tsx:  const fetchUserProfile = async (supabaseUser: SupabaseUser) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/providers/AuthProvider.tsx:  const transformUser = (supabaseUser: SupabaseUser, profile: any): User => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/providers/AuthProvider.tsx:    const getInitialSession = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/providers/AuthProvider.tsx:  const signIn = async (email: string, password: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/providers/AuthProvider.tsx:  const signUp = async (email: string, password: string, metadata?: unknown) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/providers/AuthProvider.tsx:  const signOut = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/providers/AuthProvider.tsx:  const updateUserData = (userData: Partial<User>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/providers/LocationProvider.tsx:export const LocationProvider: React.FC<LocationProviderProps> = ({ children }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/providers/LocationProvider.tsx:export const useLocationContext = (): GeolocationHookReturn => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/server/api/livekit/routes.ts: * Express routes for LiveKit-related functionality.
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/server/api/livekit/routes.ts:    const upcomingEvents = Array.from({ length: limit }).map((_, index) => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/server/api/livekit/tokenService.ts:export function generateLiveKitToken(request: TokenRequest): TokenResponse {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/errorUtils.ts:export function handleError(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/errorUtils.ts: * Wrap async functions with consistent error handling
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/errorUtils.ts:export async function withErrorHandling<T>(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/errorUtils.ts: * Create a wrapped version of a function with error handling
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/errorUtils.ts:export function withErrorHandler<T extends (...args: unknown[]) => Promise<any>>(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/errorUtils.ts:      handleError(error, { ...context, functionArgs: args }, errorMessage);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/payments/paymentMethodValidation.ts:export const checkUserPaymentMethods = async (userId: string): Promise<PaymentMethodCheck> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/payments/paymentMethodValidation.ts:    const { data, error } = await supabase.functions.invoke('payment-handler', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/dates/formatters-main.ts:export const formatTimestamp = (timestamp: unknown): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/dates/formatters-main.ts:export const formatDate = (date: unknown, pattern: string = 'MMM dd, yyyy'): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/dates/formatters-main.ts:export const formatRelativeTime = (date: unknown): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/dates/formatters-main.ts:export const toJSDate = (date: unknown): Date | null => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/dates/parsers.ts:export const parseToJSDate = (date: unknown): Date | null => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/dates/validators.ts:export const isValidDate = (value: unknown): boolean => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/dates/index.ts:export const isLegacyTimestamp = (value: unknown): value is { seconds: number; nanoseconds?: number } => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/dates/index.ts:export const formatDate = (date: Date | string | null | undefined): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/dates/index.ts:export const formatTimestamp = (timestamp: unknown): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/dates/index.ts:export const formatRelativeTime = (date: Date | string | null | undefined): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/dates/index.ts:export const toJSDate = (value: unknown): Date => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/dates/formatters.ts:export const formatDuration = (milliseconds: number): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/dates/formatters.ts:export const formatDateTime = (date: unknown): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/dates/formatters.ts:export const formatRelativeTime = (date: unknown): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/errorHandling.ts:export async function fetchWithErrorHandling<T>(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/emailConfirmation.ts:export const resendConfirmationEmail = async (email: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/emailConfirmation.ts:export const checkEmailConfirmation = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/performanceMonitor.ts:    const metrics = this.getMetrics(undefined, timeWindowMs).filter(m => m.name === name);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/performanceMonitor.ts:    const sum = metrics.reduce((acc, m) => acc + m.value, 0);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/performanceMonitor.ts:// Utility functions
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/performanceMonitor.ts:export const recordPerformanceMetric = (name: string, value: number, category?: PerformanceMetric['category'], metadata?: Record<string, unknown>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/performanceMonitor.ts:export const logPerformanceSummary = (timeWindowMinutes: number = 5) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/performanceMonitor.ts:      const categoryMetrics = metrics.filter(m => m.category === category);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/performanceMonitor.ts:        const avg = categoryMetrics.reduce((sum, m) => sum + m.value, 0) / categoryMetrics.length;
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/debounce.ts:export function debounce<T extends (...args: unknown[]) => any>(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/debounce.ts:  return function debounced(...args: Parameters<T>) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/apiUtils.ts:export async function withRetry<T>(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/apiUtils.ts:export async function processApiResponse<T>(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/apiUtils.ts:export async function apiRequest<T>(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/performance.ts:    const handleMetric = (metric: Metric) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/performance.ts:    // Monitor Core Web Vitals (using available functions)
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/performance.ts:    history.pushState = function(...args) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/performance.ts:    history.replaceState = function(...args) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/performance.ts:    const metricTypes = [...new Set(this.metrics.map(m => m.name))];
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/performance.ts:      const typeMetrics = this.metrics.filter(m => m.name === type);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/performance.ts:export const trackCustomMetric = (name: string, value: number, rating?: 'good' | 'needs-improvement' | 'poor') => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/performance.ts:export const getPerformanceSummary = () => performanceMonitor.getPerformanceSummary();
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/performance.ts:export const getRecentMetrics = (limit?: number) => performanceMonitor.getRecentMetrics(limit);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/performance.ts:export const usePerformanceMonitoring = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/currency.ts: * Consolidated module for all currency-related functions
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/currency.ts:export const parseCurrency = (currencyString: string): number => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/currency.ts:export const formatPercentage = (value: number, decimals: number = 2): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/currency.ts:export const formatDecimal = (value: number, decimalPlaces: number = 2): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/serviceCheck.ts: * Utility functions to validate service configuration and connectivity
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/serviceCheck.ts:const startTimeMeasure = () => performance.now();
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/serviceCheck.ts:const endTimeMeasure = (startTime: number) => Math.round(performance.now() - startTime);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/serviceCheck.ts:export async function checkSupabaseConnection(): Promise<ServiceCheckResult> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/serviceCheck.ts:export async function checkAuthConnection(): Promise<ServiceCheckResult> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/serviceCheck.ts:export async function checkStorageConnection(): Promise<ServiceCheckResult> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/serviceCheck.ts:export function checkStripeConfiguration(): ServiceCheckResult {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/serviceCheck.ts:export function checkEnvironmentConfiguration(): EnvironmentCheckResult {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/serviceCheck.ts:  const missingVars = requiredEnvVars.filter(varName => !import.meta.env[varName]);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/serviceCheck.ts:export async function checkNetworkConnectivity(): Promise<NetworkCheckResult> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/serviceCheck.ts:export async function checkAllServices(): Promise<ComprehensiveCheckResult> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/serviceCheck.ts:export function displayServiceCheckResults(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/adminSecurity.ts:    const recentFailures = attempts.filter(attempt => 
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/adminSecurity.ts:export const useAdminSecurity = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/errorHandling/retryHandler.ts:export function createRetryHandler<T>(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/errorHandling/retryHandler.ts:  return async function retryOperation(): Promise<T> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/errorHandling/retryHandler.ts:export async function handleOperationError(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/errorHandling/retryHandler.ts:export function categorizeError(error: unknown): ErrorCategory {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/environmentManager.ts:export function initializeEnvironment(): void {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/environmentManager.ts:export function getRequiredEnvVar(key: string, fallback?: string): string {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/environmentManager.ts:export function isFeatureEnabled(flagName: string): boolean {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/environmentManager.ts:export function getAppUrls(): {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/socialMediaLinks.ts:const getSocialLinksCache = (): CacheProvider<SocialLinks> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/socialMediaLinks.ts:export const getSocialLinks = (): SocialLinks => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/socialMediaLinks.ts:export const saveSocialLinks = (links: Record<string, string>): void => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/socialMediaLinks.ts:export const clearSocialLinksCache = async (): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/locationStrategy.ts:        const state = result.address_components.find((c: any) => 
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/locationStrategy.ts:export const useCostEffectiveLocation = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/locationCache.ts:async function openLocationDB() {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/locationCache.ts:export async function cacheLocation(key: string, locationInfo: LocationInfo): Promise<void> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/locationCache.ts:export async function getCachedLocation(key: string): Promise<LocationInfo | null> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/locationCache.ts:export async function cacheLocationByAddress(address: string, locationInfo: AddressLocationInfo): Promise<void> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/locationCache.ts:export async function getLocationFromAddressCache(address: string): Promise<AddressLocationInfo | null> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/locationCache.ts:export async function clearLocationCache(): Promise<void> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/locationCache.ts:export async function clearExpiredLocations(): Promise<void> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/locationCache.ts:export function generateLocationCacheKey(latitude: number, longitude: number): string {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/locationCache.ts:export async function getLocationCacheStatus(): Promise<{
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/imageOptimization.ts:export function generatePlaceholder(color: string = '#e5e7eb'): string {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/imageOptimization.ts:export function createLQIP(src: string, dimensions: ImageDimensions): string {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/imageOptimization.ts:export function getOptimizedImageUrl(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/imageOptimization.ts:export function preloadImage(src: string): Promise<void> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/imageOptimization.ts:export function setupLazyLoading(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/imageOptimization.ts:    const imageObserver = new IntersectionObserver((entries) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/imageOptimization.ts:    // Return cleanup function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/location.ts:export const getCurrentLocation = async (): Promise<LocationCoordinates | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/location.ts:export const formatAddress = (locationInfo: Partial<LocationInfo>): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/formValidation.ts:export function validateForm<T>(schema: ZodSchema, data: unknown): {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/formValidation.ts:      const formattedErrors = error.errors.reduce((acc, curr) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/formValidation.ts:export function showValidationErrors(errors: Record<string, string> | null): void {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/validations/financial.ts:export const validateTransactionAmount = (amount: string | number): { isValid: boolean; error?: string } => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/validations/financial.ts:export const validateBankAccount = (accountNumber: string): { isValid: boolean; error?: string } => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/validations/financial.ts:export const validateUserId = (userId: string): { isValid: boolean; error?: string } => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/healthCheck.ts:async function checkSupabaseHealth(): Promise<HealthCheckResult> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/healthCheck.ts:async function checkAuthHealth(): Promise<HealthCheckResult> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/healthCheck.ts:async function checkEnvironmentHealth(): Promise<HealthCheckResult> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/healthCheck.ts:async function checkExternalServicesHealth(): Promise<HealthCheckResult> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/healthCheck.ts:    const allHealthy = results.length === 0 || results.every(r => r);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/healthCheck.ts:export async function runHealthCheck(): Promise<SystemHealth> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/healthCheck.ts:  const unhealthyCount = checks.filter(c => c.status === 'unhealthy').length;
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/healthCheck.ts:  const degradedCount = checks.filter(c => c.status === 'degraded').length;
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/healthCheck.ts:export async function quickHealthCheck(): Promise<boolean> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/healthCheck.ts:export function getHealthStatusColor(status: HealthCheckResult['status']): string {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/healthCheck.ts:export function formatHealthReport(health: SystemHealth): string {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/buildConfig.ts: * Build configuration utility functions
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/buildConfig.ts:export const getAppVersion = (): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/buildConfig.ts:export const getBuildTimestamp = (): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/buildConfig.ts:export const getCommitHash = (): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/buildConfig.ts:export const isProductionBuild = (): boolean => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/environmentConfig.ts:export function getEnvironmentConfig() {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/environmentConfig.ts:export function getCurrentEnvironment(): string {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/environmentConfig.ts:export function getCollectionName(baseName: string): string {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/revenueCalculations.ts:export function calculateRevenueBreakdown(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/revenueCalculations.ts:export function calculateCreatorProgramBenefit(grossAmount: number): {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/revenueCalculations.ts:export function formatCurrency(amount: number, currency = 'USD'): string {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/revenueCalculations.ts:export function calculateAnnualBenefit(monthlyRevenue: number): {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/logger.ts:export const createLogger = (component?: string, context?: LogContext): Logger => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/logger.ts:export const logPerformance = (name: string, duration: number, context?: LogContext) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/logger.ts:export const logPerformanceSummary = (timeWindowMinutes: number = 5) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/logger.ts:export const logErrorBoundary = (error: Error, errorInfo: unknown, component?: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/logger.ts:export const logApiCall = (method: string, url: string, duration: number, status: number, context?: LogContext) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/logger.ts:export const logUserAction = (action: string, userId?: string, metadata?: Record<string, unknown>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/metaTagValidator.ts:export const useMetaTagValidation = (data: MetaTagData) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/format.ts:export function formatBytes(bytes: number): string {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/format.ts:export function formatPercentage(value: number): string {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/format.ts:export function formatNumber(value: number): string {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/format.ts:export function formatDurationMs(ms: number): string {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/locationUtils.ts:export const calculateDistance = (lat1: number, lon1: number, lat2: number, lon2: number): number => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/locationUtils.ts:const toRad = (value: number): number => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/errorReporting.ts:export function reportError(error: Error, context?: ErrorContext, severity?: ErrorSeverity) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/errorReporting.ts:export function handleAsyncError<T>(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/cache.ts:export function createCache<T>(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/cache.ts:export function registerCacheProvider<T>(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/cache.ts:export function getCacheProvider<T>(cacheType: CacheType | string): CacheProvider<T> | undefined {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/cache.ts:export const clearImagesCache = async (silent: boolean = false): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/cache.ts:export const clearOldQueries = async (silent: boolean = false): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/cache.ts:export const clearAllCache = async (silent: boolean = false): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/cache.ts:export const clearNonEssentialCache = async (silent: boolean = false): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/cache.ts:export const isQuotaError = (error: unknown): boolean => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/cache.ts:export const getCacheHealthStatus = async (): Promise<CacheHealthInfo> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/cache.ts:const initializeDefaultCaches = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/csrf.ts:   * Create a protected fetch function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/csrf.ts:// Export protected fetch function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/csrf.ts:// Utility functions
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/csrf.ts:export const getCSRFToken = () => csrfProtection.getToken();
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/csrf.ts:export const getCSRFHeaders = () => csrfProtection.getHeaders();
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/csrf.ts:export const refreshCSRFToken = () => csrfProtection.refreshToken();
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/csrf.ts:export const clearCSRFToken = () => csrfProtection.clearToken();
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/csrf.ts:export const useCSRFProtection = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/monitoring/performanceReviews.ts:export function configurePerformanceReviews(config: PerformanceReviewConfig) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/monitoring/alertSystem.ts:export function configureAlertSystem(config: AlertSystemConfig) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/monitoring/alertSystem.ts:export function getAlertConfig(): AlertSystemConfig {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/monitoring/notificationChannels.ts:export function configureEmailNotifications(config: EmailNotificationConfig) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/monitoring/notificationChannels.ts:export function configureSlackNotifications(config: SlackNotificationConfig) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/monitoring/initialize.ts:export async function initializeMonitoringSystem(): Promise<boolean> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/supabaseErrorHandling.ts:export const isQuotaError = (error: PostgrestError | any): boolean => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/supabaseErrorHandling.ts: * @param retryFn Optional retry function to call
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/environmentCheck.ts:export function validateEnvironment(): { valid: boolean; errors: string[] } {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/environmentCheck.ts:export function getEnvironmentName(): string {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/environmentCheck.ts:export function getDeploymentReadinessReport(): { ready: boolean; issues: string[]; recommendations: string[] } {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/environmentCheck.ts:export function initializeErrorTracking(): void {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/utils/environmentCheck.ts:export function validateFeatureRequirements(feature: 'stripe' | 'maps' | 'livekit'): boolean {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/CatererOwnerBookingDashboard.tsx:const CatererOwnerBookingDashboard: React.FC<CatererOwnerBookingDashboardProps> = ({ catererId }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/CatererOwnerBookingDashboard.tsx:  const fetchBookings = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/CatererOwnerBookingDashboard.tsx:  const getUserCaterers = async (): Promise<string[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/CatererOwnerBookingDashboard.tsx:  const formatCurrency = (amountCents: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/CatererOwnerBookingDashboard.tsx:  const formatDateTime = (dateString: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/CatererOwnerBookingDashboard.tsx:  const getStatusBadge = (status: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/CatererOwnerBookingDashboard.tsx:  const getPaymentStatusBadge = (status: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/CatererOwnerBookingDashboard.tsx:  const pendingBookings = bookings.filter(b => b.status === 'pending');
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/CatererOwnerBookingDashboard.tsx:  const approvedBookings = bookings.filter(b => b.status === 'approved');
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/CatererOwnerBookingDashboard.tsx:  const completedBookings = bookings.filter(b => ['rejected', 'cancelled', 'completed'].includes(b.status));
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/CatererOwnerBookingDashboard.tsx:  const formatCurrency = (amountCents: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/CatererOwnerBookingDashboard.tsx:  const formatDateTime = (dateString: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/CatererOwnerBookingDashboard.tsx:  const getStatusBadge = (status: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/CatererOwnerBookingDashboard.tsx:  const getPaymentStatusBadge = (status: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/CatererProfileForm.tsx:  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/CatererProfileForm.tsx:  const handleFileSelect = (files: File[]) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/CatererProfileForm.tsx:  const validateForm = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/CatererProfileForm.tsx:  const handleSubmit = async (e: React.FormEvent) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/CatererFilterSidebar.tsx:  const handleLocationSelect = (newLocation: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/EnhancedCatererBookingForm.tsx:  const checkAvailability = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/EnhancedCatererBookingForm.tsx:  const validateForm = (): boolean => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/EnhancedCatererBookingForm.tsx:  const handleSubmit = async (e: React.FormEvent) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/EnhancedCatererBookingForm.tsx:  const formatCurrency = (amount: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/CateringBookingPayment.tsx:    const checkCreatorProgramStatus = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/CateringBookingPayment.tsx:  const feeBreakdown = useMemo(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/CateringBookingPayment.tsx:  const handleInputChange = (field: keyof CateringBookingFormData, value: string | boolean) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/CateringBookingPayment.tsx:  const validateForm = (): boolean => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/CateringBookingPayment.tsx:  const createCateringBookingRecord = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/CateringBookingPayment.tsx:  const processPayment = async (bookingId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/CateringBookingPayment.tsx:      // Call Stripe Connect payment function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/CateringBookingPayment.tsx:      const { data: paymentResult, error: paymentError } = await supabase.functions.invoke('stripe-connect-payment', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/CateringBookingPayment.tsx:  const handleBookingSubmit = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/CateringBookingPayment.tsx:  const formatCurrency = (amount: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/CateringBookingPayment.tsx:  const formatDateTime = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/CatererCard.tsx:const CatererCard: React.FC<CatererCardProps> = ({ caterer, dateNeeded }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/detail/CatererHeader.tsx:const CatererHeader: React.FC<CatererHeaderProps> = ({ caterer }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/detail/CatererReviews.tsx:const CatererReviews: React.FC<CatererReviewsProps> = ({ catererId, isAuthenticated }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/detail/CatererReviews.tsx:  const fetchReviews = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/detail/CatererReviews.tsx:      const formattedReviews: Review[] = reviewsData?.map(review => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/detail/CatererReviews.tsx:  const checkUserReview = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/detail/CatererReviews.tsx:  const handleSubmitReview = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/detail/CatererReviews.tsx:  const handleHelpfulClick = async (reviewId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/detail/CatererReviews.tsx:  const renderStars = (count: number, hoverEnabled = false) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/detail/CatererImage.tsx:const CatererImage = ({ imageUrl, name, isLiked, onLikeChange }: CatererImageProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/detail/CatererImage.tsx:  const handleShare = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/detail/CatererImage.tsx:  const handleLike = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/detail/CatererStats.tsx:const CatererStats: React.FC<CatererStatsProps> = ({ caterer }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/detail/CatererTabs.tsx:const CatererTabs = ({ caterer, selectedMenu, onMenuSelect }: CatererTabsProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/detail/CatererDetailSkeleton.tsx:export const CatererDetailSkeleton = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/detail/CatererBookingCard.tsx:  const handleBookCaterer = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/detail/CatererBookingCard.tsx:  const handleBookingComplete = (_bookingId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/detail/CatererBookingCard.tsx:  const handleCancelPayment = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/detail/CatererErrorState.tsx:export const CatererErrorState: React.FC<CatererErrorStateProps> = ({ error, refetch }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/caterers/CatererProfileFormWrapper.tsx:const CatererProfileFormWrapper = ({ onSubmit, initialData }: CatererProfileFormWrapperProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/demo/TourDemo.tsx:const TourDemo: React.FC = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/demo/TourDemo.tsx:  const handleBookTicket = (tourDate: TourDate) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/demo/TourDemo.tsx:              This demo showcases the new tour functionality for events with multiple dates and locations.
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/theme-provider.tsx:export function ThemeProvider({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/theme-provider.tsx:export const useTheme = () => React.useContext(ThemeProviderContext)
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/creator/CreatorProgramDashboard.tsx:const CreatorProgramDashboard: React.FC = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/creator/CreatorProgramDashboard.tsx:  const loadCreatorProgramData = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/creator/CreatorProgramDashboard.tsx:  const handleApplyToProgram = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/creator/CreatorProgramDashboard.tsx:  const getStatusBadge = (status: string | null) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/date-range-picker.tsx:export function DateRangePicker({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/confirm-dialog.tsx:  const handleConfirm = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/confirm-dialog.tsx:  const handleCancel = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/pagination.tsx:const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/ReportDialog.tsx:const ReportDialog: React.FC<ReportDialogProps> = (props) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/ReportDialog.tsx:  const getFormConfig = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/ReportDialog.tsx:  const handleSubmit = async (values: unknown) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/ReportDialog.tsx:  const getDialogTitle = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/ReportDialog.tsx:  const getDialogDescription = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/ReportDialog.tsx:  const reasonOptions = reasons.map(reason => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/toaster.tsx:export function Toaster() {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/toaster.tsx:      {toasts.map(function ({ id, title, description, action, ...props }) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/container.tsx:export function Container({ children, className }: ContainerProps) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/chart.tsx:const ChartTooltip = ({ children }: { children?: React.ReactNode }) => <>{children}</>
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/hover-card.tsx:const HoverCard = ({ children }: { children: React.ReactNode }) => <>{children}</>
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/sonner.tsx:const Toaster = ({ ...props }: ToasterProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/drawer.tsx:const Drawer = ({ children }: { children: React.ReactNode }) => <>{children}</>
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/drawer.tsx:const DrawerPortal = ({ children }: { children: React.ReactNode }) => <>{children}</>
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/calendar.tsx:function Calendar({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/command.tsx:const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/date-time-picker.tsx:export function DateTimePicker({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/date-time-picker.tsx:  const handleSelect = (selected: Date | undefined) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/date-time-picker.tsx:  const handleTimeChange = (timeString: string, type: "hour" | "minute") => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/date-time-picker.tsx:  const hours = Array.from({ length: 24 }, (_, i) => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/date-time-picker.tsx:  const minutes = Array.from({ length: 60 }, (_, i) => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/menubar.tsx:const MenubarMenu = ({ children }: { children: React.ReactNode }) => <>{children}</>
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/file-upload/index.tsx:  const removeExistingImage = (url: string, index: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/file-upload/SelectedFiles.tsx:export const SelectedFiles = ({ files, onRemove }: SelectedFilesProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/file-upload/ExistingFiles.tsx:export const ExistingFiles = ({ urls, onRemove }: ExistingFilesProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/file-upload/ExistingFiles.tsx:  const isImage = (url: string): boolean => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/storage-quota-handler.tsx:const StorageQuotaHandler: React.FC = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/storage-quota-handler.tsx:    const checkStorageHealth = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/storage-quota-handler.tsx:    const handleStorageError = (event: ErrorEvent) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/pagination-controls.tsx:export function PaginationControls({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/badge.tsx:function Badge({ className, variant, ...props }: BadgeProps) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/loading.tsx:  const renderLoader = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/loading.tsx:export const LoadingSpinner = (props: Omit<LoadingProps, 'type'>) => 
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/loading.tsx:export const LoadingSkeleton = (props: Omit<LoadingProps, 'type'>) => 
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/loading.tsx:export const LoadingDots = (props: Omit<LoadingProps, 'type'>) => 
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/loading.tsx:export const PageLoader = (props: Omit<LoadingProps, 'fullPage'>) => 
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/loading.tsx:export const AdminLoadingState = (props: LoadingProps & { text?: string }) => 
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/sidebar.tsx:function useSidebar() {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/sidebar.tsx:        const openState = typeof value === "function" ? value(open) : value
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/sidebar.tsx:    const toggleSidebar = React.useCallback(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/sidebar.tsx:      const handleKeyDown = (event: KeyboardEvent) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/sidebar.tsx:  const width = React.useMemo(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/ReportEventDialog.tsx:const ReportEventDialog: React.FC<ReportEventDialogProps> = ({ eventId, eventTitle }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/clickable-avatar.tsx:  const handleClick = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/EventCard.tsx:const EventCard = ({ event, onClick, featured, className }: EventCardProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/EventCard.tsx:  const handleClick = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/skeleton.tsx:function Skeleton({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/enhanced-scroll-area.tsx:      const handleMouseDown = (e: MouseEvent | TouchEvent) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/enhanced-scroll-area.tsx:      const handleMouseUp = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/enhanced-scroll-area.tsx:      const handleMouseMove = (e: MouseEvent | TouchEvent) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/enhanced-scroll-area.tsx:          if (typeof ref === 'function') {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/context-menu.tsx:const ContextMenu = ({ children }: { children: React.ReactNode }) => <>{children}</>
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/ui/form.tsx:const useFormField = (): FormFieldInfo => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/settings/payments/PaymentsTabContent.tsx:const PaymentsTabContent = ({ returnTo }: PaymentsTabContentProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/settings/payments/PaymentMethods.tsx:  const handleSetupStripeConnect = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/settings/payments/PaymentMethods.tsx:  const handleOpenStripeDashboard = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/settings/privacy/PrivacySection.tsx:const PrivacySection = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/settings/privacy/PrivacySection.tsx:  const fetchPrivacySettings = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/settings/privacy/PrivacySection.tsx:  const updatePrivacySetting = async (setting: string, value: unknown) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/settings/privacy/PrivacySection.tsx:  const handleProfileVisibilityChange = (value: ProfileVisibility) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/settings/privacy/PrivacySection.tsx:  const handleMessageSettingsChange = (value: MessageSettings) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/settings/privacy/PrivacySection.tsx:  const handleOnlineStatusToggle = (enabled: boolean) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/settings/privacy/PrivacySection.tsx:  const handleTaggingToggle = (enabled: boolean) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/settings/privacy/PrivacySection.tsx:  const handleAnalyticsToggle = (optOut: boolean) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/settings/privacy/PrivacySection.tsx:  const handleDataExport = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/settings/privacy/PrivacySection.tsx:  const handleDataDeletion = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/settings/security/Secure2FASetupDialog.tsx:const Secure2FASetupDialog = ({ user, isOpen, onClose, onSuccess }: Secure2FASetupDialogProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/settings/security/Secure2FASetupDialog.tsx:  const handleMethodSelect = async (selectedMethod: 'app' | 'email') => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/settings/security/Secure2FASetupDialog.tsx:      const { data, error } = await supabase.functions.invoke('setup-2fa', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/settings/security/Secure2FASetupDialog.tsx:  const handleVerification = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/settings/security/Secure2FASetupDialog.tsx:      const { data, error } = await supabase.functions.invoke('verify-2fa-setup', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/settings/security/Secure2FASetupDialog.tsx:  const resetDialog = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/settings/security/Secure2FASetupDialog.tsx:  const handleClose = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/settings/security/TwoFactorDialogWrapper.tsx:  const handleVerify = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/settings/layout/SettingsHeader.tsx:const SettingsHeader = ({ returnTo }: SettingsHeaderProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/settings/layout/SettingsLayout.tsx:const SettingsLayout: React.FC<SettingsLayoutProps> = ({ children }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/settings/ProfileForm.tsx:const ProfileForm = ({ user, isAuthenticated }: ProfileFormProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/settings/ProfileForm.tsx:  const handleUsernameChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/settings/ProfileForm.tsx:  const handleSubmit = async (e: React.FormEvent) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/settings/ProfileForm.tsx:      // Pass the profile data to the update function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/settings/CoverPhotoUploader.tsx:const CoverPhotoUploader = ({ user, coverImageUrl, onCoverUpdate }: CoverPhotoUploaderProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/settings/CoverPhotoUploader.tsx:  const handleFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/settings/CoverPhotoUploader.tsx:    const progressInterval = setInterval(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/settings/CoverPhotoUploader.tsx:  const handleRemove = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/settings/language/LanguageSettingsContent.tsx:const LanguageSettingsContent = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/settings/language/LanguageSettingsContent.tsx:  const fetchLanguageSettings = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/settings/language/LanguageSettingsContent.tsx:  const handleLanguageChange = async (languageCode: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/settings/language/LanguageSettingsContent.tsx:  const getCurrentLanguageName = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/settings/language/LanguageSettingsContent.tsx:    const lang = AVAILABLE_LANGUAGES.find(l => l.code === currentLanguage);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/settings/SettingsSidebar.tsx:const SettingsSidebar = ({ activeTab, onSignOut, onTabChange }: SettingsSidebarProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/settings/SettingsSidebar.tsx:  const handleNavigation = (path: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/settings/ProfileSection.tsx:const ProfileSection = ({ user, coverImageUrl: initialCoverImageUrl }: ProfileSectionProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/settings/ProfileSection.tsx:  const handleAvatarUpdate = (newAvatarUrl: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/settings/ProfileSection.tsx:  const handleCoverUpdate = (newCoverUrl: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/settings/AvatarUploader.tsx:const AvatarUploader = ({ user, onAvatarUpdate }: AvatarUploaderProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/settings/AvatarUploader.tsx:  const handleFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/settings/AvatarUploader.tsx:    const progressInterval = setInterval(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/settings/form-fields/EmailField.tsx:const EmailField: React.FC<EmailFieldProps> = ({ email }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/settings/NotificationsSection.tsx:const NotificationsSection = ({ user }: NotificationsSectionProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/settings/PaymentsTab.tsx:const PaymentsTab = ({ returnTo }: PaymentsTabProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/settings/PaymentsTab.tsx:  const handleAddCredit = (amount: number | string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/settings/SecuritySection.tsx:const SecuritySection = ({ user }: SecuritySectionProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/settings/SecuritySection.tsx:  const checkTwoFactorStatus = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/settings/SecuritySection.tsx:  const handleToggleTwoFactor = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/settings/SecuritySection.tsx:  const handleSetupSuccess = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/settings/help/HelpSupportSection.tsx:const HelpSupportSection = ({ user }: HelpSupportSectionProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/home/GridViewToggle.tsx:const GridViewToggle = ({ viewMode, onViewChange }: GridViewToggleProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/home/SocialProof.tsx:const SocialProof = memo(({ className }: SocialProofProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/home/EventMarketplace.tsx:const EventMarketplace = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/home/EventMarketplace.tsx:  const searchOptions = useMemo(() => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/home/EventMarketplace.tsx:  // Memoize the filter update function to prevent unnecessary renders
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/home/EventMarketplace.tsx:  const handleCategoryChange = useCallback((category: string | undefined) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/home/EventMarketplace.tsx:  // Admin function to delete anonymous events
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/home/EventMarketplace.tsx:  const handleDeleteAnonymousEvents = useCallback(async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/home/EventMarketplace.tsx:  const handleRetry = useCallback(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/home/EventMarketplace.tsx:  const handleViewModeChange = useCallback((mode: "grid" | "list") => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/home/EventMarketplace.tsx:  const handleLoadMore = useCallback(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/home/SearchBar.tsx:  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/home/SearchBar.tsx:  const handleSubmit = (e: React.FormEvent) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/home/SearchBar.tsx:  const handleClear = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/home/SearchBar.tsx:  const handleKeyDown = (e: React.KeyboardEvent) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/home/FeaturedEvents.tsx:const FeaturedEvents = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/comments/CommentForm.tsx:  const getSchema = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/comments/CommentForm.tsx:  const handleFormSubmit = async (data: unknown) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/comments/CommentForm.tsx:  const handleAttachment = async (file: File, attachmentType: 'image' | 'video' | 'gif') => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/comments/CommentForm.tsx:    const interval = setInterval(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/comments/CommentForm.tsx:  const removeAttachment = (index: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/comments/CommentForm.tsx:  const insertEmoji = (emoji: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/comments/CommentForm.tsx:  const insertMention = (username: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/comments/CommentForm.tsx:// Helper function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/comments/CommentForm.tsx:const formatCommentTime = (date: Date): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/comments/CommentsSection.tsx:  const loadComments = async (pageNum = 1, limit = 20) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/comments/CommentsSection.tsx:      const transformedComments: CommentData[] = (data || []).map(comment => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/comments/CommentsSection.tsx:  const loadMoreComments = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/comments/CommentsSection.tsx:  const commentsWithDepth = useMemo(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/comments/CommentsSection.tsx:  const processedComments = useMemo(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/comments/CommentsSection.tsx:          const aScore = Object.values(a.reactions || {}).reduce((sum, count) => sum + count, 0);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/comments/CommentsSection.tsx:          const bScore = Object.values(b.reactions || {}).reduce((sum, count) => sum + count, 0);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/comments/CommentsSection.tsx:    const pinned = filtered.filter(c => c.isPinned);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/comments/CommentsSection.tsx:    const unpinned = filtered.filter(c => !c.isPinned);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/comments/CommentsSection.tsx:  const commentThreads = useMemo(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/comments/CommentsSection.tsx:    const rootComments = processedComments.filter(c => !c.parentId);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/comments/CommentsSection.tsx:    const buildThread = (comment: CommentData): CommentData[] => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/comments/CommentsSection.tsx:      const replies = processedComments.filter(c => c.parentId === comment.id);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/comments/CommentsSection.tsx:  const handleCommentSubmit = async (data: unknown) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/comments/CommentsSection.tsx:  const handleCommentEdit = async (data: unknown) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/comments/CommentsSection.tsx:      const updatedComments = comments.map(c => 
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/comments/CommentsSection.tsx:  const handleCommentDelete = async (commentId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/comments/CommentsSection.tsx:  const handleReaction = async (commentId: string, reaction: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/comments/CommentsSection.tsx:      const updatedComments = comments.map(c => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/comments/CommentsSection.tsx:  const handleReport = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/comments/CommentsSection.tsx:  const toggleThread = (commentId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/comments/CommentsSection.tsx:  const showReviewForm = allowReviews && (!currentUser || !comments.some(c => 
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/comments/CommentsSection.tsx:  const averageRating = useMemo(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/comments/CommentsSection.tsx:    const reviews = comments.filter(c => c.rating !== undefined);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/comments/CommentsSection.tsx:    const sum = reviews.reduce((acc, review) => acc + (review.rating || 0), 0);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/comments/CommentsSection.tsx:  const ratingCounts = useMemo(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/comments/CommentsSection.tsx:                  const percentage = comments.filter(c => c.rating).length > 0
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/tickets/TicketCard.tsx:const TicketCard: React.FC<TicketCardProps> = ({ ticket, showQR = false, onShowQR }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/tickets/TicketScanner.tsx:const TicketScanner: React.FC<TicketScannerProps> = ({ eventId, onTicketValidated }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/tickets/TicketScanner.tsx:  const resetScan = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/tickets/TicketScanner.tsx:  const handleManualSubmit = async (e?: React.FormEvent) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/tickets/TicketScanner.tsx:  const handleQRScan = (data: string | null) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/tickets/TicketScanner.tsx:  const handleValidateTicket = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/tickets/EventTicketsManager.tsx:const EventTicketsManager: React.FC<EventTicketsManagerProps> = ({ eventId, isOrganizer }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/tickets/EventTicketsManager.tsx:  const validTickets = tickets.filter(ticket => ticket.status === 'valid');
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/tickets/EventTicketsManager.tsx:  const usedTickets = tickets.filter(ticket => ticket.status === 'used');
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/tickets/EventTicketsManager.tsx:  const handleTicketValidated = (ticket: TicketType) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/tickets/EventTicketsManager.tsx:const TicketsTable: React.FC<{ tickets: TicketType[] }> = ({ tickets }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/records/SignedArtistsSection.tsx:const SignedArtistsSection = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/records/SignedArtistsSection.tsx:    const loadArtists = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/records/RecordsHero.tsx:const RecordsHero = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/records/LatestReleases.tsx:const LatestReleases = ({ records, loading }: LatestReleasesProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/messages/MessageInput.tsx:  const handleSend = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/messages/MessageInput.tsx:  const handleKeyPress = (e: React.KeyboardEvent) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/messages/ConversationList.tsx:  const formatMessageTime = (timestamp: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/messages/MessageList.tsx:const MessageList = ({ messages, currentUserId }: MessageListProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/messages/MessageList.tsx:  const formatMessageTime = (timestamp: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/posts/PostDisplay.tsx:  const toggleComments = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/posts/CreatePost.tsx:  const getSchema = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/posts/CreatePost.tsx:  const onSubmit = async (data: CreatePostFormValues) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/posts/CreatePost.tsx:  const saveDraft = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/posts/CreatePost.tsx:  const handleTypeChange = (type: typeof postTypes[number]) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/posts/CreatePost.tsx:  const renderPostTypeContent = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/posts/CreatePost.tsx:const TextPostContent: React.FC<{ form: any }> = ({ form }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/posts/CreatePost.tsx:const VideoPostContent: React.FC<{ form: unknown; uploadProgress: number }> = ({ form, uploadProgress }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/posts/CreatePost.tsx:const AudioPostContent: React.FC<{ form: unknown; uploadProgress: number }> = ({ form, uploadProgress }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/posts/CreatePost.tsx:const PollPostContent: React.FC<{ form: any }> = ({ form }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/posts/CreatePost.tsx:  const addOption = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/posts/CreatePost.tsx:  const removeOption = (index: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/posts/CreatePost.tsx:const EventPostContent: React.FC<{ form: any }> = ({ form }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/posts/CreatePost.tsx:const ProductPostContent: React.FC<{ form: any }> = ({ form }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/SubscriptionForm.tsx:    const subscription = planForm.watch((value) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/SubscriptionForm.tsx:    const subscription = paymentForm.watch((value) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/SubscriptionForm.tsx:  const handlePlanChange = async (data: PlanSelectionFormValues) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/SubscriptionForm.tsx:  const handlePaymentUpdate = async (data: PaymentMethodFormValues) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/SubscriptionForm.tsx:  const handleSubscriptionUpdate = async (data: SubscriptionUpdateFormValues) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/SubscriptionForm.tsx:  const handleBillingInfoUpdate = async (data: BillingInfoFormValues) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/SubscriptionForm.tsx:  const renderPlanTab = () => (
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/SubscriptionForm.tsx:  const renderPaymentTab = () => (
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/SubscriptionForm.tsx:  const renderManageTab = () => (
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/AdvancedSearchForm.tsx:      const timer = setTimeout(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/AdvancedSearchForm.tsx:    const handleKeyDown = (e: KeyboardEvent) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/AdvancedSearchForm.tsx:  const categoryOptions: SearchSelectOption[] = useMemo(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/AdvancedSearchForm.tsx:  const generateSuggestions = async (query: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/AdvancedSearchForm.tsx:  const handleSearch = async (data: AdvancedSearchValues) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/AdvancedSearchForm.tsx:  const handleSaveSearch = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/AdvancedSearchForm.tsx:  const applySuggestion = (suggestion: SearchSuggestion) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/AdvancedSearchForm.tsx:  const applyHistorySearch = (historyItem: SearchHistory) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/AdvancedSearchForm.tsx:  const clearHistory = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/AdvancedSearchForm.tsx:  const resetFilters = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/AdvancedSearchForm.tsx:  const hasActiveFilters = useMemo(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/FeedbackForm.tsx:  const handleScreenshotUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/FeedbackForm.tsx:  const removeScreenshot = (index: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/FeedbackForm.tsx:  const handleStarClick = (rating: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/FeedbackForm.tsx:  const handleStarHover = (rating: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/FeedbackForm.tsx:  const handleSubmit = async (data: FeedbackFormValues) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/FeedbackForm.tsx:  const getRatingColor = (rating: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/FeedbackForm.tsx:  const getRatingLabel = (rating: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/NewsletterForm.tsx:  const toggleInterest = (interest: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/NewsletterForm.tsx:  const handleSubmit = async (data: NewsletterValues) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/shared/DatePicker.tsx:  const hours = Array.from({ length: 24 }, (_, i) => i);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/shared/DatePicker.tsx:  const minutes = Array.from({ length: 60 }, (_, i) => i);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/shared/DatePicker.tsx:  const handleDateSelect = (date: Date | undefined) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/shared/DatePicker.tsx:  const handleTimeChange = (type: 'hour' | 'minute', value: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/shared/PasswordStrengthIndicator.tsx:  const getStrength = (password: string): number => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/shared/PasswordStrengthIndicator.tsx:      const passes = typeof req.test === 'function' 
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/shared/PasswordStrengthIndicator.tsx:  const getStrengthText = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/shared/PasswordStrengthIndicator.tsx:  const getBarColor = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/shared/PasswordStrengthIndicator.tsx:            const passes = typeof req.test === 'function' 
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/shared/CreditCardInput.tsx:  const handleCardNumberChange = (e: React.ChangeEvent<HTMLInputElement>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/shared/CreditCardInput.tsx:  const handleExpiryMonthChange = (e: React.ChangeEvent<HTMLInputElement>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/shared/CreditCardInput.tsx:  const handleExpiryYearChange = (e: React.ChangeEvent<HTMLInputElement>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/shared/CreditCardInput.tsx:  const handleCVVChange = (e: React.ChangeEvent<HTMLInputElement>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/shared/RichTextEditor.tsx:  const filteredButtons = toolbarButtons.filter(btn => 
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/shared/RichTextEditor.tsx:  const updateHistory = useCallback((newValue: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/shared/RichTextEditor.tsx:  const wrapSelection = useCallback((prefix: string, suffix: string = prefix) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/shared/RichTextEditor.tsx:  const insertAtCursor = useCallback((text: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/shared/RichTextEditor.tsx:  const applyFormat = useCallback((format: FormatType) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/shared/RichTextEditor.tsx:  const handleKeyDown = useCallback((e: React.KeyboardEvent) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/shared/RichTextEditor.tsx:  const groupedButtons = useMemo(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/shared/SearchSelect.tsx:  const selectedValues = useMemo(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/shared/SearchSelect.tsx:  const groupedOptions = useMemo(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/shared/SearchSelect.tsx:  const filteredOptions = useMemo(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/shared/SearchSelect.tsx:  const handleSelect = (optionValue: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/shared/SearchSelect.tsx:  const handleCreate = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/shared/SearchSelect.tsx:  const handleRemove = (optionValue: string, e: React.MouseEvent) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/shared/SearchSelect.tsx:  const displayValue = useMemo(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/shared/SearchSelect.tsx:            const option = options.find(opt => opt.value === val);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/shared/SearchSelect.tsx:      const option = options.find(opt => opt.value === selectedValues[0]);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/shared/SearchSelect.tsx:                  const visibleOptions = groupOptions.filter(option => 
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/ImageUpload.tsx:  const handleCustomFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/ImageUpload.tsx:  const uploadFile = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/ImageUpload.tsx:  const handleRemove = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/CreateEventForm.tsx:const CreateEventForm: React.FC = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/CreateEventForm.tsx:  // Undo/Redo functionality
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/CreateEventForm.tsx:  const handleSubmit = async (values: EventFormValues) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/CreateEventForm.tsx:  const handleSaveDraft = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/CreateEventForm.tsx:  const nextStep = () => setCurrentStep(Math.min(steps.length - 1, currentStep + 1));
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/CreateEventForm.tsx:  const prevStep = () => setCurrentStep(Math.max(0, currentStep - 1));
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/CreateEventForm.tsx:  const addTag = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/CreateEventForm.tsx:  const removeTag = (tagToRemove: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/CreateEventForm.tsx:  const categoryOptions: SearchSelectOption[] = Object.entries(EventCategory).map(([key, value]) => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/CreateEventForm.tsx:  const enhancedTypeOptions: SearchSelectOption[] = Object.entries(EnhancedEventType).map(([key, value]) => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/CreateEventForm.tsx:  const getEventTypeDescription = (type: EnhancedEventType): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/CreateEventForm.tsx:  const getEventTypeIcon = (type: EnhancedEventType) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/CreateEventForm.tsx:  const handleDurationChange = (duration: '15' | '30' | '45' | '60' | '90') => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/EnhancedSettingsForm.tsx:  const handleSave = async (categoryId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/EnhancedSettingsForm.tsx:  const renderAccountTab = () => (
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/EnhancedSettingsForm.tsx:  const renderPrivacyTab = () => (
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/EnhancedSettingsForm.tsx:  const renderNotificationsTab = () => (
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/EnhancedSettingsForm.tsx:  const renderPreferencesTab = () => (
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/SupportForm.tsx:  const categoryOptions: SearchSelectOption[] = ticketCategory.map(cat => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/SupportForm.tsx:  const priorityOptions: SearchSelectOption[] = ticketPriority.map(priority => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/SupportForm.tsx:  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/SupportForm.tsx:  const removeAttachment = (index: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/SupportForm.tsx:  const handleSearch = async (data: SupportSearchFormValues) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/SupportForm.tsx:  const handleTicketSubmit = async (data: HelpTicketFormValues) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/SupportForm.tsx:  const handleChatStart = async (data: LiveChatFormValues) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/SupportForm.tsx:  const renderSearchTab = () => (
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/SupportForm.tsx:  const renderTicketTab = () => (
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/SupportForm.tsx:  const renderChatTab = () => (
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/VenueSearchSelect.tsx:  const searchVenues = async (query: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/VenueSearchSelect.tsx:      const transformedVenues: Venue[] = (data || []).map(venue => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/VenueSearchSelect.tsx:    const debounceTimer = setTimeout(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/VenueSearchSelect.tsx:      const venue = venues.find(v => v.id === value);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/VenueSearchSelect.tsx:  const loadVenueById = async (venueId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/VenueSearchSelect.tsx:  const handleVenueSelect = (venue: Venue) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/VenueSearchSelect.tsx:  const clearSelection = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/VenueSearchSelect.tsx:  const renderStars = (rating: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/ContactForm.tsx:    const timer = setTimeout(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/ContactForm.tsx:  function getInquiryIcon(type: string) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/ContactForm.tsx:  function getInquiryDescription(type: string) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/ContactForm.tsx:  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/ContactForm.tsx:  const removeAttachment = (index: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/ContactForm.tsx:  const handleSubmit = async (data: ContactFormValues) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/ContactForm.tsx:  const clearDraft = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/PriceInput.tsx:  const getErrorMessage = (error: unknown): string | null => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/PriceInput.tsx:export const formatCurrency = (amount: number, currency = 'USD'): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/PriceInput.tsx:export const parseCurrency = (value: string): number => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/OnboardingForm.tsx:  const handleNext = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/OnboardingForm.tsx:  const handlePrevious = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/OnboardingForm.tsx:  const handleSkipStep = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/OnboardingForm.tsx:  const handleComplete = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/OnboardingForm.tsx:  const getCurrentStepData = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/OnboardingForm.tsx:  const validateCurrentStep = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/OnboardingForm.tsx:  const getStepFields = (step: number): string[] => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/OnboardingForm.tsx:  const handleAvatarUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/OnboardingForm.tsx:  const toggleInterest = (interest: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/OnboardingForm.tsx:  const toggleGoal = (goal: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/OnboardingForm.tsx:  const renderStepContent = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/AddressInput.tsx:  const fieldName = (name: string) => prefix ? `${prefix}.${name}` : name;
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/AddressInput.tsx:  const getError = (name: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/VirtualEventSettings.tsx:export const VirtualEventSettings = ({ form }: VirtualEventSettingsProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/collaborators/CollaboratorForm.tsx:export const CollaboratorForm = ({ onAddCollaborator, form }: CollaboratorFormProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/collaborators/CollaboratorForm.tsx:  const handleSubmit = (e: React.FormEvent) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/collaborators/CollaboratorHeader.tsx:export const CollaboratorHeader = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/collaborators/CollaboratorCard.tsx:export const CollaboratorCard = ({ collaborator, onRemove }: CollaboratorCardProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/collaborators/CollaboratorCard.tsx:  const getStatusBadgeColor = (status: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/collaborators/CollaboratorList.tsx:export const CollaboratorList = ({ collaborators, onRemoveCollaborator }: CollaboratorListProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/EventDateTime.tsx:export const EventDateTime = ({ form }: EventDateTimeProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/EventDateTime.tsx:  const handleDurationChange = (duration: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/EventSettings.tsx:export const EventSettings = ({ form }: EventSettingsProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/EventSettings.tsx:  const handleTargetAmountChange = (e: React.ChangeEvent<HTMLInputElement>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/EventSettings.tsx:  const handleLocationChange = (location: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/SponsorshipTiers.tsx:const SponsorshipTiers = ({ form }: SponsorshipTiersProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/TourSettings.tsx:export const TourSettings: React.FC<TourSettingsProps> = ({ onSave, initialData }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/TourSettings.tsx:  const handleAddTourDate = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/TourSettings.tsx:  const handleSave = (data: TourSettingsData) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/SponsorshipTierManager.tsx:export const SponsorshipTierManager: React.FC<SponsorshipTierManagerProps> = ({ form }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/SponsorshipTierManager.tsx:  const handleAddTier = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/SponsorshipTierManager.tsx:  const handleRemoveTier = (tierId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/SponsorshipTierManager.tsx:    const updatedTiers = sponsorshipTiers.filter(tier => tier.id !== tierId);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/SponsorshipTierManager.tsx:  const handleBenefitChange = (index: number, value: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/SponsorshipTierManager.tsx:  const handleAddBenefit = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/SponsorshipTierManager.tsx:  const handleRemoveBenefit = (index: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/SponsorshipTierManager.tsx:    const benefits = (newTier.benefits || []).filter((_, i) => i !== index);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/Collaborators.tsx:export const Collaborators = ({ form }: CollaboratorsProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/Collaborators.tsx:  const handleAddCollaborator = (newCollaboratorData: Omit<EventCollaborator, 'id'>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/Collaborators.tsx:  const handleRemoveCollaborator = (id: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/Collaborators.tsx:    const updatedCollaborators = collaborators.filter(c => c.id !== id);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/Collaborators.tsx:    const validatedCollaborators: EventCollaborator[] = updatedCollaborators.map(c => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/EnhancedFormValidation.tsx:  const getStepValidation = (step: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/EnhancedFormValidation.tsx:    const stepRules = validationRules.filter(rule => rule.step === step);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/EnhancedFormValidation.tsx:    const passed = stepRules.filter(rule => validationResults[rule.id]).length;
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/EnhancedFormValidation.tsx:    const required = stepRules.filter(rule => rule.required).length;
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/EnhancedFormValidation.tsx:  const getCurrentStepRules = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/EnhancedFormValidation.tsx:  const getOverallProgress = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/EnhancedFormValidation.tsx:  const getRequiredFieldsStatus = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/EnhancedFormValidation.tsx:    const requiredRules = validationRules.filter(rule => rule.required);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/EnhancedFormValidation.tsx:    const passedRequired = requiredRules.filter(rule => validationResults[rule.id]).length;
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/EnhancedFormValidation.tsx:  const canProceedToStep = (step: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/sponsorship/useTierState.ts:export const useTierState = (form: UseFormReturn<EventFormValues>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/sponsorship/useTierState.ts:  const initialTiers = (form.getValues("sponsorshipTiers") || []).map(tier => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/sponsorship/useTierState.ts:  const handleSaveTier = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/sponsorship/useTierState.ts:  const handleUpdateTier = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/sponsorship/useTierState.ts:    const updatedTiers = tiers.map(tier => 
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/sponsorship/useTierState.ts:  const handleDeleteTier = (id: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/sponsorship/useTierState.ts:    const updatedTiers = tiers.filter(tier => tier.id !== id);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/sponsorship/useTierState.ts:  const handleUpdateNewTier = (field: keyof SponsorshipTier, value: unknown) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/sponsorship/useTierState.ts:  const handleUpdateEditingTier = (field: keyof SponsorshipTier, value: unknown) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/sponsorship/useTierState.ts:  const handleAddBenefit = (isEditing: boolean) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/sponsorship/useTierState.ts:  const handleBenefitChange = (index: number, value: string, isEditing: boolean) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/sponsorship/useTierState.ts:  const handleRemoveBenefit = (index: number, isEditing: boolean) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/sponsorship/TierCard.tsx:export const TierCard = ({ tier, onEdit, onDelete, isEditing }: TierCardProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/CollaboratorManager.tsx:export const CollaboratorManager: React.FC<CollaboratorManagerProps> = ({ form }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/CollaboratorManager.tsx:  const validateEmail = (email: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/CollaboratorManager.tsx:  const handleAddCollaborator = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/CollaboratorManager.tsx:  const handleRemoveCollaborator = (collaboratorId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/CollaboratorManager.tsx:    const updatedCollaborators = collaborators.filter(c => c.id !== collaboratorId);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/CollaboratorManager.tsx:  const handleUpdateRole = (collaboratorId: string, newRole: CollaboratorRole) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/CollaboratorManager.tsx:    const updatedCollaborators = collaborators.map(c =>
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/CollaboratorManager.tsx:  const handleResendInvitation = (collaborator: unknown) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/CollaboratorManager.tsx:  const getInitials = (name: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/EventTypeCategory.tsx:export const EventTypeCategory = ({ form }: EventTypeCategoryProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/TicketSettings.tsx:export const TicketSettings = ({ form }: TicketSettingsProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/TicketSettings.tsx:  const handlePriceChange = (e: React.ChangeEvent<HTMLInputElement>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/EventFormDraft.tsx:const EventFormDraft = ({ hasDraft, handleClearDraft, lastSaved }: EventFormDraftProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/BasicEventInfo.tsx:export const BasicEventInfo: React.FC<BasicEventInfoProps> = ({ form, isLoading = false, onUploadError }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/BasicEventInfo.tsx:  const handleBannerUpload = async (files: File[]) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/BasicEventInfo.tsx:  const handleImagesUpload = async (files: File[]) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/BasicEventInfo.tsx:      const uploadPromises = files.map(file => 
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/BasicEventInfo.tsx:      const newImages = results.map(result => result.url);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/BasicEventInfo.tsx:  const handleRemoveImage = (url: string, index: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/BasicEventInfo.tsx:    const newImages = imagesArray.filter((_, i) => i !== index);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/BasicEventInfo.tsx:  const handleRemoveBanner = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/CampaignSettings.tsx:const CampaignSettings: React.FC<CampaignSettingsProps> = ({ form }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/forms/event/CampaignSettings.tsx:  const handleDurationChange = (duration: CampaignDuration) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/pro/ProFAQ.tsx:const ProFAQ = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/pro/ProFeatures.tsx:const ProFeatures = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/pro/ProPricing.tsx:const ProPricing = ({ isPro, isProcessing, onSubscribe }: ProPricingProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/studios/AboutSection.tsx:const AboutSection = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/studios/ProjectGrid.tsx:const ProjectGrid = ({ projects }: ProjectGridProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/studios/FeaturedProjectsSection.tsx:const FeaturedProjectsSection = ({ projects }: FeaturedProjectsSectionProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/studios/ProjectCard.tsx:const ProjectCard = ({ project, size = 'small' }: ProjectCardProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/studios/TeamSection.tsx:const TeamSection = ({ teamMembers }: TeamSectionProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/studios/ServicesSection.tsx:const ServicesSection = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/studios/HeroSection.tsx:const HeroSection = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/studios/ContactSection.tsx:const ContactSection = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/security/SecurityHeaders.tsx:const SecurityHeaders = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/auth/ResendConfirmationButton.tsx:  const handleResend = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/auth/ProtectedRoute.tsx:export const ProtectedRoute = ({ adminOnly = false }: ProtectedRouteProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/auth/PaymentMethodGuard.tsx:    const checkPaymentMethod = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/auth/PaymentMethodGuard.tsx:  const handleAddPaymentMethod = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/auth/StripeConnectGuard.tsx:    const timeout = setTimeout(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/auth/TwoFactorSetup.tsx:const TwoFactorSetup = ({ userEmail, onSetupComplete, className = "" }: TwoFactorSetupProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/auth/TwoFactorSetup.tsx:  const handleSetupTOTP = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/auth/TwoFactorSetup.tsx:  const handleSetupEmail = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/auth/TwoFactorSetup.tsx:  const handleVerifyTOTP = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/auth/TwoFactorSetup.tsx:  const downloadBackupCodes = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/auth/TwoFactorSetup.tsx:  const handleFinishSetup = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/referrals/ReferralDashboard.tsx:const ReferralDashboard: React.FC = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/referrals/ReferralDashboard.tsx:  const fetchReferralData = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/referrals/ReferralDashboard.tsx:      const totalEarnings = (txns || []).reduce((sum, t) => 
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/referrals/ReferralDashboard.tsx:      const pendingEarnings = (txns || []).reduce((sum, t) => 
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/referrals/ReferralDashboard.tsx:      const totalClicks = (links || []).reduce((sum, l) => sum + l.clicks, 0);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/referrals/ReferralDashboard.tsx:      const totalConversions = (links || []).reduce((sum, l) => sum + l.conversions, 0);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/referrals/ReferralDashboard.tsx:  const createReferralLink = async (eventId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/referrals/ReferralDashboard.tsx:  const copyReferralLink = (referralCode: string, eventTitle: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/referrals/ReferralDashboard.tsx:  const getStatusBadge = (status: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/referrals/ReferralDashboard.tsx:  const exportData = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/referrals/ReferralDashboard.tsx:    const csvData = transactions.map(t => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/referrals/ReferralLinkButton.tsx:  const checkExistingReferralLink = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/referrals/ReferralLinkButton.tsx:  const createReferralLink = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/referrals/ReferralLinkButton.tsx:  const copyReferralLink = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/referrals/ReferralLinkButton.tsx:  const shareToSocial = (platform: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/referrals/ReferralLinkButton.tsx:  const calculateCommission = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/location/LocationSelector.tsx:  const handleManualInputClose = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/location/LocationInput.tsx:  const handlePlaceSelected = (place: { description: string; placeId: string }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/location/MapLibreMap.tsx:    const initializeMap = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/location/GooglePlacesAutocomplete.tsx:    const initService = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/location/GooglePlacesAutocomplete.tsx:      const loadGoogleMapsApi = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/location/GooglePlacesAutocomplete.tsx:          const checkGoogleExists = setInterval(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/location/GooglePlacesAutocomplete.tsx:    const handleClickOutside = (event: MouseEvent) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/location/GooglePlacesAutocomplete.tsx:  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/location/GooglePlacesAutocomplete.tsx:  const handlePredictionClick = (prediction: google.maps.places.AutocompletePrediction) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/location/GooglePlacesAutocomplete.tsx:  const handleInputFocus = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/location/ProductionLocationPrompt.tsx:  const handleManualLocationSubmit = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/location/GoogleMap.tsx:  const initializeMap = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/payment/PurchaseTicketButton.tsx:  const handleReserveClick = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/payment/PurchaseTicketButton.tsx:  const handleSuccess = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/payment/PurchaseTicketButton.tsx:  const handleError = (error: Error) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/payment/PurchaseTicketButton.tsx:  const getButtonText = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/payment/PurchaseTicketButton.tsx:  const handleAddPaymentMethod = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/payment/reservation/ReservationModal.tsx:  const loadPaymentMethods = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/payment/reservation/ReservationModal.tsx:  const handleReserve = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/payment/reservation/ReservationModal.tsx:  const formatDeadline = (deadline: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/payment/checkout/SubscriptionWarning.tsx:const SubscriptionWarning = ({ paymentType }: SubscriptionWarningProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/payment/checkout/PlatformCreditOption.tsx:const PlatformCreditOption = ({ balance, amount }: PlatformCreditOptionProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/payment/checkout/CheckoutModal.tsx:  const getFormConfig = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/payment/checkout/CheckoutModal.tsx:      const subtotal = values.items.reduce((sum, item) => sum + (item.price * item.quantity), 0);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/payment/checkout/CheckoutModal.tsx:  const handlePayment = async (values: unknown) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/payment/checkout/CheckoutModal.tsx:  const handleApplyPromo = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/payment/checkout/PaymentSummary.tsx:const PaymentSummary = ({ checkoutData }: PaymentSummaryProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/payment/checkout/CheckoutButtons.tsx:  const handlePayment = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/payment/checkout/PaymentMethodBadge.tsx:const PaymentMethodBadge = ({ usePlatformCredit }: PaymentMethodBadgeProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/payment/subscription/SubscriptionPaymentForm.tsx:  const handleCheckout = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/payment/StripeConnectOnboarding.tsx:import { createConnectOnboardingLink } from '@/services/supabase/edge-functions';
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/payment/StripeConnectOnboarding.tsx:const StripeConnectOnboarding: React.FC = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/payment/StripeConnectOnboarding.tsx:  const handleStartOnboarding = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/payment/connect/ConnectWelcome.tsx:const ConnectWelcome = ({ creatingAccount, handleCreateAccount }: ConnectWelcomeProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/payment/connect/ConnectLoading.tsx:const ConnectLoading: React.FC = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/payment/connect/AccountStatusDisplay.tsx:const AccountStatusDisplay = ({ accountStatus }: AccountStatusDisplayProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/payment/connect/MerchantActivation.tsx:const MerchantActivation: React.FC<MerchantActivationProps> = ({ userId, onboardingLink, returnPath }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/payment/connect/MerchantActivation.tsx:  const handleConnectStripe = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/payment/connect/ConnectStatusBadge.tsx:const ConnectStatusBadge = ({ isEnabled }: ConnectStatusBadgeProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/payment/connect/StripeConnectRequired.tsx:const StripeConnectRequired = ({ type, isLoading = false, returnPath }: StripeConnectRequiredProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/payment/connect/StripeConnectRequired.tsx:  const handleSetupStripeConnect = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/payment/connect/onboarding/ConnectDashboard.tsx:const ConnectDashboard = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/payment/connect/onboarding/ConnectFooter.tsx:const ConnectFooter = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/payment/connect/onboarding/ConnectBenefits.tsx:const ConnectBenefits = ({ onConnect, connecting }: ConnectBenefitsProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/layout/RouteWrapper.tsx:  const renderHeader = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/layout/CreatorRouteWrapper.tsx:const CreatorRouteWrapper = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/layout/NavLinks.tsx:const NavLinks: React.FC = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/layout/UserMenu.tsx:const UserMenu: React.FC = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/layout/UserMenu.tsx:  const handleSignOut = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/layout/UserMenu.tsx:  const handleAvatarError = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/layout/Footer.tsx:const Footer = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/layout/Footer.tsx:  const handleCreateEventClick = (e: React.MouseEvent) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/layout/CategoryNav.tsx:const CategoryNav: React.FC<CategoryNavProps> = ({ activeCategory, onSelectCategory }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/layout/AdminLayout.tsx:const AdminLayout = ({ children }: { children: React.ReactNode }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/layout/AdminLayout.tsx:const SidebarContent = () => (
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/layout/AuthButtons.tsx:const AuthButtons: React.FC = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/layout/Header.tsx:const Header: React.FC = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/layout/Header.tsx:  const handleSearch = (e: React.FormEvent) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/layout/Header.tsx:  const getLocationDisplay = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/layout/Header.tsx:  const handleLocationChange = async (lat?: number, lng?: number, cityName?: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/layout/SearchForm.tsx:  const handleSubmit = (e: React.FormEvent) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/layout/SimpleHeader.tsx:const SimpleHeader: React.FC = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/layout/MobileMenu.tsx:const MobileMenu: React.FC = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/layout/MobileMenu.tsx:  const handleNavigation = (path: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/projects/ProjectGridSkeleton.tsx:export const ProjectGridSkeleton = ({ count = 6 }: ProjectGridSkeletonProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/projects/ProjectCard.tsx:export const ProjectCard = ({ project }: ProjectCardProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/projects/ProjectCard.tsx:  const formatDate = (dateString: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/projects/ProjectCard.tsx:  const getStatusColor = (status: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/LiveEvent/LiveEventRoom.tsx:export function LiveEventRoom({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/LiveEvent/LiveEventRoom.tsx:  const handleJoinRoom = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/LiveEvent/LiveEventRoom.tsx:  const handleLeaveRoom = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/caterers/CatererTableRow.tsx:const CatererTableRow = ({ caterer, onUpdateStatus, onToggleFeatured, isMobile }: CatererTableRowProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/caterers/CatererTableRow.tsx:  const getStatusBadge = (status: string, verificationStatus?: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/caterers/CatererTableRow.tsx:  // Helper function to handle location display
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/caterers/CatererTableRow.tsx:  const getLocationDisplay = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/caterers/CaterersTable.tsx:  const handlePageChange = (pageNumber: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/sidebar/AdminSideNav.tsx:export const AdminSideNav: React.FC<AdminSideNavProps> = ({ onNavigate = () => {} }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/settings/SecuritySettingsTab.tsx:export const SecuritySettingsTab = ({ settings, handleSettingChange, handleSave }: SecuritySettingsTabProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/settings/GeneralSettingsTab.tsx:export const GeneralSettingsTab = ({ settings, handleSettingChange, handleSave }: GeneralSettingsTabProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/settings/SecretKeysTab.tsx:    description: 'Service role key for Supabase admin operations and edge functions',
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/settings/SecretKeysTab.tsx:export const SecretKeysTab = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/settings/SecretKeysTab.tsx:  const categories = [...new Set(SECRET_KEYS.map(key => key.category))];
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/settings/SecretKeysTab.tsx:  const toggleSecretVisibility = (secretName: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/settings/SecretKeysTab.tsx:  const handleSecretChange = (secretName: string, value: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/settings/SecretKeysTab.tsx:  const saveSecret = async (secretName: string, secretValue: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/settings/SecretKeysTab.tsx:      const { error } = await supabase.functions.invoke('manage-secrets', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/settings/SecretKeysTab.tsx:  const deleteSecret = async (secretName: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/settings/SecretKeysTab.tsx:      const { error } = await supabase.functions.invoke('manage-secrets', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/settings/SecretKeysTab.tsx:  const getCategoryColor = (category: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/settings/SecretKeysTab.tsx:            These are sensitive configuration keys for edge functions. Never share them publicly or commit them to version control.
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/settings/SecretKeysTab.tsx:        const categoryKeys = SECRET_KEYS.filter(key => key.category === category);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/settings/SecretKeysTab.tsx:        const requiredCount = categoryKeys.filter(key => key.required).length;
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/settings/SecretKeysTab.tsx:                Manage {category.toLowerCase()} related secret keys and API credentials for edge functions
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/settings/SecretKeysTab.tsx:            These secrets are required for edge functions that are currently being called but may be failing:
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/settings/ApiSettingsTab.tsx:export const ApiSettingsTab = ({ settings, handleSettingChange, handleSave }: ApiSettingsTabProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/settings/NotificationSettingsTab.tsx:export const NotificationSettingsTab = ({ settings, handleSettingChange, handleSave }: NotificationSettingsTabProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/settings/SocialLinksTab.tsx:export const SocialLinksTab = ({ settings, handleSocialLinkChange, handleSave }: SocialLinksTabProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/security/AdminSecurityCheck.tsx:  const handleSecurityVerification = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/management/team/TeamGrid.tsx:const TeamGrid = ({ teamMembers, handleEditTeamMember, handleDeleteTeamMember }: TeamGridProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/management/artists/ArtistGrid.tsx:const ArtistGrid = ({ artists, handleEditArtist, handleDeleteArtist }: ArtistGridProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/management/services/ServiceGrid.tsx:const ServiceGrid = ({ services, handleEditService, handleDeleteService }: ServiceGridProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/navigation/AdminFooterNav.tsx:export const AdminFooterNav = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/navigation/AdminSidebarNav.tsx:export const AdminSidebarNav = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/navigation/AdminSidebarNav.tsx:  const handleNavigation = (label: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/navigation/AdminUserProfile.tsx:export const AdminUserProfile = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/navigation/AdminUserProfile.tsx:  const handleLogout = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/content/PageTabContent.tsx:const PageTabContent = ({ title, description, children }: PageTabContentProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/content/PageTabContent.tsx:  const toggleEdit = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/DeploymentCheck.tsx:const DeploymentCheck: React.FC = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/careers/JobListingDialog.tsx:export function JobListingDialog({ open, onOpenChange, job }: JobListingDialogProps) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/careers/JobListingDialog.tsx:  const onSubmit = async (data: JobListing) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/common/ConfirmDialog.tsx:export function ConfirmDialog({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/common/ConfirmDialog.tsx:  const handleConfirm = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/common/AdminErrorBoundary.tsx:export const AdminErrorBoundaryWrapper = ({ children, fallback }: Props) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/common/AdminStatCards.tsx:export function AdminStatCards({ stats }: { stats: StatCardProps[] }) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/common/AdminStatCards.tsx:function StatCard({ title, value, icon, description, trend, isLoading = false }: StatCardProps) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/common/AdminDataTable.tsx:export function AdminDataTable<T extends { id: string }>({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/common/ConfirmActionDialog.tsx:export function ConfirmActionDialog({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/common/ConfirmActionDialog.tsx:  const handleConfirm = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/promotions/table/EmptyPromotionsState.tsx:export const EmptyPromotionsState: React.FC<EmptyPromotionsStateProps> = ({ showActions }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/promotions/IssuePromotionCredits.tsx:const IssuePromotionCredits = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/promotions/IssuePromotionCredits.tsx:  const searchUsers = async (term: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/promotions/IssuePromotionCredits.tsx:  const onSubmit = async (data: CreditFormData) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/promotions/IssuePromotionCredits.tsx:        const creditInserts = allUsers.map(user => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/promotions/IssuePromotionCredits.tsx:        const selectedUser = users.find(u => u.id === data.userId);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/promotions/IssuePromotionCredits.tsx:  const handleUserSearch = (term: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/promotions/CampaignManagement.tsx:const CampaignManagement = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/promotions/CampaignManagement.tsx:  const onSubmit = (data: CampaignFormData) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/promotions/CampaignManagement.tsx:  const getStatusColor = (status: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/promotions/CampaignManagement.tsx:  const getCampaignProgress = (campaign: CampaignDashboard) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/promotions/CampaignManagement.tsx:  const handleEditCampaign = (campaign: PromotionalCampaign) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/promotions/CampaignManagement.tsx:  const handleViewAnalytics = (campaign: PromotionalCampaign) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/promotions/CampaignManagement.tsx:                          const fullCampaign = allCampaigns.find(c => c.id === campaign.id);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/promotions/CampaignManagement.tsx:                          const fullCampaign = allCampaigns.find(c => c.id === campaign.id);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/promotions/CampaignManagement.tsx:const CampaignForm = ({ form, onSubmit, isLoading, isEdit = false }: CampaignFormProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/promotions/PromotionStatusBadge.tsx:export const PromotionStatusBadge: React.FC<PromotionStatusBadgeProps> = ({ status }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/AdminRoute.tsx:const AdminRoute = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/AdminRoute.tsx:    const performSecurityCheck = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/AdminRoute.tsx:        const allPassed = checks.every(check => check.passed);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/AdminRoute.tsx:          const failedCheck = checks.find(check => !check.passed);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/AdminRoute.tsx:  // Security check functions
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/AdminRoute.tsx:  const checkIPRestrictions = async (): Promise<SecurityCheckResult> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/AdminRoute.tsx:  const checkSessionValidity = async (): Promise<SecurityCheckResult> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/AdminRoute.tsx:  const checkBrowserSecurity = async (): Promise<SecurityCheckResult> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/AdminRoute.tsx:  const checkTimeRestrictions = async (): Promise<SecurityCheckResult> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/BuildInfoDisplay.tsx:const BuildInfoDisplay: React.FC = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/BuildInfoDisplay.tsx:  const getBadgeVariant = (env: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/locations/LocationDialog.tsx:  const onSubmit = (data: LocationFormData) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/CatererStatsCards.tsx:export const CatererStatsCards = ({ caterers = [] }: CatererStatsCardsProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/CatererStatsCards.tsx:  const activeCaterers = caterers.filter(c => c.status === 'active').length;
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/CatererStatsCards.tsx:  const pendingCaterers = caterers.filter(c => c.status === 'pending').length;
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/events/EventRow.tsx:export const EventRow = ({ event }: EventRowProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/events/EventRow.tsx:  const formatDate = (date: unknown) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/events/EventStatusBadge.tsx:export const EventStatusBadge = ({ status }: EventStatusBadgeProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/events/EventsList.tsx:export const EventsList = ({ events, loading }: EventsListProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/events/EventListFilters.tsx:export const EventListFilters = ({ searchTerm, onSearchChange }: EventListFiltersProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/CreditDistributionForm.tsx:  const handleSubmit = async (e: React.FormEvent) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/categories/CategoryHeader.tsx:export const CategoryHeader = ({ onAddCategory }: CategoryHeaderProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/categories/CategoryTable.tsx:export const CategoryTable = ({ categories, onEdit, onDelete }: CategoryTableProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/ProductionReadinessCheck.tsx:const ProductionReadinessCheck: React.FC = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/ProductionReadinessCheck.tsx:  const runProductionReadinessCheck = useCallback(async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/ProductionReadinessCheck.tsx:  const getStatusIcon = (status: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/ProductionReadinessCheck.tsx:  const getOverallReadiness = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/admin/ProductionReadinessCheck.tsx:    const passedChecks = services.filter(s => s.status === "success").length + 
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/walkthrough/WalkthroughStep.tsx:const WalkthroughStep = () => null;
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/walkthrough/WalkthroughContent.tsx:const WalkthroughContent = () => null;
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/walkthrough/FirstTimeModal.tsx:const FirstTimeModal = () => null;
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/walkthrough/WalkthroughButton.tsx:const WalkthroughButton = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/walkthrough/Walkthrough.tsx:const Walkthrough = () => null;
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/walkthrough/WalkthroughOverlay.tsx:const WalkthroughOverlay = () => null;
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/walkthrough/WalkthroughControls.tsx:const WalkthroughControls = () => null;
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/product/detail/tabs/ProductDescription.tsx:const ProductDescription = ({ description }: ProductDescriptionProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/product/detail/tabs/ShippingInfo.tsx:const ShippingInfo = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/product/detail/tabs/ProductFeatures.tsx:const ProductFeatures = ({ features }: ProductFeaturesProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/product/detail/ProductDetailError.tsx:const ProductDetailError: React.FC<ProductDetailErrorProps> = ({ error, onRetry }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/product/detail/ProductDetailLoading.tsx:const ProductDetailLoading: React.FC = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/product/detail/ProductInfo.tsx:const ProductInfo = ({ product, quantity, onQuantityChange }: ProductInfoProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/product/detail/ProductTabs.tsx:const ProductTabs = ({ product, currentUser }: ProductTabsProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/product/detail/ProductGallery.tsx:const ProductGallery = ({ images }: ProductGalleryProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/product/list/filters/StockFilter.tsx:const StockFilter = ({ inStock, onInStockChange }: StockFilterProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/product/list/filters/FilterActions.tsx:const FilterActions = ({ onResetFilters, onApplyFilters }: FilterActionsProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/product/list/filters/FilterHeader.tsx:const FilterHeader = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/product/list/filters/PriceRangeFilter.tsx:const PriceRangeFilter = ({ priceRange, onPriceRangeChange }: PriceRangeFilterProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/product/list/filters/CategoryFilter.tsx:const CategoryFilter = ({ selectedCategory, onCategoryChange, categories }: CategoryFilterProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/product/list/ProductGrid.tsx:const ProductGrid = ({ products }: ProductGridProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/product/list/ProductList.tsx:const ProductList = ({ products }: ProductListProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/product/list/EmptyProducts.tsx:const EmptyProducts = ({ onResetFilters }: EmptyProductsProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/product/list/card/ProductCardFooter.tsx:const ProductCardFooter = ({ product }: ProductCardFooterProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/product/list/card/ProductCard.tsx:export const ProductCard = ({ product, onAddToCart, onToggleFavorite }: ProductCardProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/product/list/card/ProductCard.tsx:  const handleAddToCart = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/product/list/card/ProductCard.tsx:  const handleToggleFavorite = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/product/list/card/ImageThumbnail.tsx:const ImageThumbnail = ({ src, alt }: ImageThumbnailProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/product/list/items/ProductListItem.tsx:const ProductListItem = ({ product }: ProductListItemProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/product/list/items/ProductListActions.tsx:const ProductListActions = ({ product }: ProductListActionsProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/product/list/items/ProductListImage.tsx:const ProductListImage = ({ src, alt }: ProductListImageProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/product/list/ProductSort.tsx:const ProductSort = ({ value, onChange }: ProductSortProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/product/list/categories/ProductCategories.tsx:const ProductCategories = ({ selectedCategory, onCategoryChange }: ProductCategoriesProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/product/list/categories/ProductCategories.tsx:    const fetchCategories = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/product/PurchaseButton.tsx:  const handlePurchase = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/virtualEvent/VirtualEventAttendee.tsx:  const handleJoinEvent = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/virtualEvent/VirtualEventAttendee.tsx:  const handleLeaveEvent = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/virtualEvent/VirtualEventAttendee.tsx:  const handleToggleAudio = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/virtualEvent/VirtualEventAttendee.tsx:  const handleToggleVideo = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/virtualEvent/VirtualEventHost.tsx:  const handleStartStream = useCallback(async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/virtualEvent/VirtualEventHost.tsx:  const handleEndStream = useCallback(async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/virtualEvent/VirtualEventHost.tsx:  const handleToggleAudio = useCallback(async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/virtualEvent/VirtualEventHost.tsx:  const handleToggleVideo = useCallback(async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/virtualEvent/VirtualEventHost.tsx:  const formatDuration = (seconds: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/virtualEvent/VirtualEventHost.tsx:  const getStatusColor = (status: StreamStatus) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/virtualEvent/VirtualEventHost.tsx:  const shareStreamLink = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/explore/filters/DateFilter.tsx:const DateFilter = ({ onChange }: DateFilterProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/explore/filters/FilterActions.tsx:const FilterActions = ({ onApply, onReset }: FilterActionsProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/explore/filters/PriceRangeFilter.tsx:const PriceRangeFilter = ({ defaultValue = "all", onChange }: PriceRangeFilterProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/explore/filters/CategoryFilter.tsx:const CategoryFilter = ({ defaultValue = "all", onChange }: CategoryFilterProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/explore/filters/CategoryFilter.tsx:  const handleTypeChange = (value: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/explore/filters/CategoryFilter.tsx:  const handleCategoryChange = (value: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/explore/ExploreFilters.tsx:  const loadFilterOptions = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/explore/ExploreFilters.tsx:  const handleCategoryChange = (category: string, checked: boolean) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/explore/ExploreFilters.tsx:  const handlePriceRangeChange = (field: 'min' | 'max', value: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/explore/ExploreFilters.tsx:  const handleDateChange = (field: 'start' | 'end', value: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/explore/ExploreFilters.tsx:  const handleCapacityChange = (field: 'min' | 'max', value: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/explore/ExploreFilters.tsx:  const handleTagToggle = (tag: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/explore/ExploreFilters.tsx:  const handleEventTypeChange = (type: string, checked: boolean) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/explore/ExploreFilters.tsx:  const clearFilters = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/explore/EventGrid.tsx:const EventCardMemo = memo(({ event }: { event: Event }) => (
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/explore/EventGrid.tsx:const EventGrid = ({ events, loading, hasMore, onLoadMore }: EventGridProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/explore/ExploreHeader.tsx:const ExploreHeader: React.FC<ExploreHeaderProps> = ({ searchQuery, onSearch }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/explore/ExploreLayout.tsx:  const handleSearch = (query: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/explore/ExploreLayout.tsx:  const handleCategoryChange = (category: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/explore/ExploreLayout.tsx:  const handleSortChange = (sort: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/explore/SortControls.tsx:const SortControls = ({ sortOrder, onSortChange }: SortControlsProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/dashboard/PerformanceSummaryCard.tsx:export function PerformanceSummaryCard({ title, value, trend, service, alerts }: PerformanceSummaryCardProps) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/dashboard/CreatorEarnings.tsx:const CreatorEarnings: React.FC = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/dashboard/CreatorEarnings.tsx:  const loadEarningsData = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/dashboard/CreatorEarnings.tsx:  const getNextPayoutDate = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/dashboard/CreatorEarnings.tsx:  const handleStripeConnect = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/dashboard/CreatorEarnings.tsx:      const { data, error } = await supabase.functions.invoke('connect-account', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/dashboard/CreatorEarnings.tsx:  const handleOpenStripeDashboard = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/dashboard/CreatorEarnings.tsx:      const { data, error } = await supabase.functions.invoke('connect-account', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/dashboard/CreatorEarnings.tsx:  const getStatusColor = (status: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/dashboard/CreatorEarnings.tsx:  const getStatusIcon = (status: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/dashboard/CreatorEarnings.tsx:  const getStatusText = (status: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/dashboard/OperationMetricsChart.tsx:export function OperationMetricsChart({ operations }: OperationMetricsChartProps) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/dashboard/PromotionsTab.tsx:const PromotionsTab = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/dashboard/ServiceMetricsTable.tsx:export function ServiceMetricsTable({ services }: ServiceMetricsTableProps) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/dashboard/DashboardStats.tsx:const DashboardStats: React.FC<DashboardStatsProps> = ({ stats, loading = false }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/dashboard/DashboardStats.tsx:  const formatCurrency = (amount: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/dashboard/DashboardStats.tsx:  const formatPercentage = (value: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/dashboard/DashboardStats.tsx:  const getChangeIcon = (change: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/dashboard/DashboardStats.tsx:  const getChangeColor = (change: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/dashboard/PerformanceMonitoringDashboard.tsx:export const PerformanceMonitoringDashboard: React.FC = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/dashboard/PerformanceMonitoringDashboard.tsx:  const fetchPerformanceMetrics = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/dashboard/PerformanceMonitoringDashboard.tsx:      const eventIds = events?.map(e => e.id) || [];
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/dashboard/PerformanceMonitoringDashboard.tsx:      const activeEvents = events?.filter(e => e.status === 'active').length || 0;
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/dashboard/PerformanceMonitoringDashboard.tsx:      const upcomingEvents = events?.filter(e => new Date(e.start_date || '') > now).length || 0;
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/dashboard/PerformanceMonitoringDashboard.tsx:      const completedEvents = events?.filter(e => new Date(e.end_date || '') < now).length || 0;
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/dashboard/PerformanceMonitoringDashboard.tsx:      const cancelledEvents = events?.filter(e => e.status === 'cancelled').length || 0;
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/dashboard/PerformanceMonitoringDashboard.tsx:      const totalRevenue = tickets?.reduce((sum, ticket) => sum + Number(ticket.price), 0) || 0;
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/dashboard/AccessManagement.tsx:export function AccessManagement({ onUserRoleChange }: AccessManagementProps) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/dashboard/AccessManagement.tsx:    const fetchUsers = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/dashboard/AccessManagement.tsx:        const formattedUsers: User[] = usersData?.map((user: any) => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/dashboard/AccessManagement.tsx:  const handleRoleChange = async (userId: string, newRole: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/dashboard/AccessManagement.tsx:  const handleStatusChange = async (userId: string, newStatus: User['status']) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/dashboard/AccessManagement.tsx:  const filteredUsers = users.filter(user =>
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/dashboard/AccessManagement.tsx:  const getRoleBadgeVariant = (role: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/dashboard/AccessManagement.tsx:  const getStatusBadgeVariant = (status: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/dashboard/AlertsPanel.tsx:export function AlertsPanel({ alerts }: AlertsPanelProps) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/dashboard/LoadTestResultsPanel.tsx:export function LoadTestResultsPanel({ loadTestResults, onRunTest }: LoadTestResultsPanelProps) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/dashboard/performanceData.ts:export async function getPerformanceData(): Promise<PerformanceMetric[]> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/dashboard/performanceData.ts:export async function getServiceMetrics(): Promise<ServiceMetric[]> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/dashboard/performanceData.ts:export function getServicePerformanceData() {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/venues/VenueBookingPayment.tsx:    const checkCreatorProgramStatus = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/venues/VenueBookingPayment.tsx:  const feeBreakdown = useMemo(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/venues/VenueBookingPayment.tsx:  const handleInputChange = (field: keyof BookingFormData, value: string | boolean) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/venues/VenueBookingPayment.tsx:  const validateForm = (): boolean => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/venues/VenueBookingPayment.tsx:  const createBookingRecord = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/venues/VenueBookingPayment.tsx:  const processPayment = async (bookingId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/venues/VenueBookingPayment.tsx:      // Call Stripe Connect payment function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/venues/VenueBookingPayment.tsx:      const { data: paymentResult, error: paymentError } = await supabase.functions.invoke('stripe-connect-payment', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/venues/VenueBookingPayment.tsx:  const handleBookingSubmit = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/venues/VenueBookingPayment.tsx:  const formatCurrency = (amount: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/venues/VenueBookingPayment.tsx:  const formatDateTime = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/venues/EnhancedVenueBookingForm.tsx:  const checkForConflicts = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/venues/EnhancedVenueBookingForm.tsx:  const validateForm = (): boolean => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/venues/EnhancedVenueBookingForm.tsx:  const handleSubmit = async (e: React.FormEvent) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/venues/EnhancedVenueBookingForm.tsx:  const formatCurrency = (amount: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/venues/VenueOwnerBookingDashboard.tsx:const VenueOwnerBookingDashboard: React.FC<VenueOwnerBookingDashboardProps> = ({ venueId }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/venues/VenueOwnerBookingDashboard.tsx:  const fetchBookings = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/venues/VenueOwnerBookingDashboard.tsx:  const getUserVenues = async (): Promise<string[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/venues/VenueOwnerBookingDashboard.tsx:  const formatCurrency = (amountCents: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/venues/VenueOwnerBookingDashboard.tsx:  const formatDateTime = (dateString: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/venues/VenueOwnerBookingDashboard.tsx:  const getStatusBadge = (status: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/venues/VenueOwnerBookingDashboard.tsx:  const getPaymentStatusBadge = (status: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/venues/VenueOwnerBookingDashboard.tsx:  const pendingBookings = bookings.filter(b => b.status === 'pending');
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/venues/VenueOwnerBookingDashboard.tsx:  const approvedBookings = bookings.filter(b => b.status === 'approved');
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/venues/VenueOwnerBookingDashboard.tsx:  const completedBookings = bookings.filter(b => ['rejected', 'cancelled', 'completed'].includes(b.status));
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/venues/utils/venueDataTransformer.ts:export const transformVenueData = (venues: Venue[]): DisplayVenue[] => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/venues/VenueFilters.tsx:const VenueFilters = ({ filters, onFilterChange }: VenueFiltersProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/venues/VenueFilters.tsx:  const handleApplyFilters = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/venues/VenueFilters.tsx:    // Call the onFilterChange function with the filters object
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/venues/VenueSearch.tsx:  const handleToggleFilters = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/venues/VenueListHeader.tsx:const VenueListHeader = ({ totalVenues }: VenueListHeaderProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/venues/VenueGrid.tsx:const VenueGrid = ({ venues, loading = false }: VenueGridProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/venues/VenueCard.tsx:  const handleFavorite = (e: React.MouseEvent) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/venues/VenueCard.tsx:  const handleShare = (e: React.MouseEvent) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/venues/VenueCard.tsx:  const getAvailabilityStatus = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/venues/VenueCard.tsx:  const formatPrice = (price: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/venues/VenueCard.tsx:  const getStarRating = (rating: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/common/ContentSkeleton.tsx:  const renderSkeleton = (index: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/common/SEOHead.tsx:  const isSensitiveRoute = ['/admin', '/debug', '/config', '/.env'].some(path => 
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/common/LoadingSkeleton.tsx:export const Skeleton = ({ className, children, ...props }: SkeletonProps & React.HTMLAttributes<HTMLDivElement>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/common/LoadingSkeleton.tsx:export const CardSkeleton = ({ className }: { className?: string }) => (
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/common/LoadingSkeleton.tsx:export const EventCardSkeleton = ({ className }: { className?: string }) => (
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/common/LoadingSkeleton.tsx:export const ProductCardSkeleton = ({ className }: { className?: string }) => (
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/common/LoadingSkeleton.tsx:export const UserProfileSkeleton = ({ className }: { className?: string }) => (
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/common/LoadingSkeleton.tsx:export const DashboardStatsSkeleton = ({ className }: { className?: string }) => (
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/common/LoadingSkeleton.tsx:export const PageSkeleton = ({ className }: { className?: string }) => (
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/common/LoadingSkeleton.tsx:export const MessagesSkeleton = ({ className }: { className?: string }) => (
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/common/LoadingSkeleton.tsx:export const NavigationSkeleton = ({ className }: { className?: string }) => (
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/common/LoadingSkeleton.tsx:export const InlineLoader = ({ className }: { className?: string }) => (
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/common/LoadingSkeleton.tsx:export const FullPageLoader = ({ message = "Loading..." }: { message?: string }) => (
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/common/OptimizedImage.tsx:  const getOptimizedSrc = (originalSrc: string, format?: 'webp' | 'jpg') => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/common/OptimizedImage.tsx:  const handleLoad = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/common/OptimizedImage.tsx:  const handleError = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/common/ErrorBoundary.tsx:export function withErrorBoundary<P>(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/common/ErrorBoundary.tsx:  function WithErrorBoundary(props: P): JSX.Element {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/common/LoadingStates.tsx:export const CardSkeleton: React.FC<{ className?: string }> = ({ className }) => (
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/common/LoadingStates.tsx:export const ProfileSkeleton: React.FC = () => (
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/common/LoadingStates.tsx:export const EventCardSkeleton: React.FC = () => (
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/common/LoadingStates.tsx:export const ProductCardSkeleton: React.FC = () => (
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/common/LoadingStates.tsx:export const ListSkeleton: React.FC<{ items?: number }> = ({ items = 5 }) => (
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/common/LoadingStates.tsx:export const DashboardSkeleton: React.FC = () => (
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/common/LoadingStates.tsx:export const MessageSkeleton: React.FC = () => (
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/common/LoadingStates.tsx:export const FormSkeleton: React.FC<{ fields?: number }> = ({ fields = 4 }) => (
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/promotions/form/BudgetScheduling.tsx:export const BudgetScheduling = ({ form, isLoading }: BudgetSchedulingProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/promotions/form/BudgetScheduling.tsx:  const getStartDateValue = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/promotions/form/BudgetScheduling.tsx:  const getEndDateValue = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/promotions/form/PromotionSummary.tsx:export const PromotionSummary = ({ estimatedReach, estimatedCost, budget }: PromotionSummaryProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/promotions/form/BasicPromotionInfo.tsx:export const BasicPromotionInfo = ({ form, isLoading }: BasicPromotionInfoProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/promotions/form/TargetAudience.tsx:  const handleAddLocation = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/promotions/form/TargetAudience.tsx:  const handleRemoveLocation = (location: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/promotions/form/TargetAudience.tsx:    const updated = selectedLocations.filter(loc => loc !== location);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/promotions/form/TargetAudience.tsx:  const handleAddInterest = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/promotions/form/TargetAudience.tsx:  const handleRemoveInterest = (interest: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/promotions/form/TargetAudience.tsx:    const updated = interestTags.filter(tag => tag !== interest);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/promotions/form/PricingDelivery.tsx:export const PricingDelivery = ({ form, isLoading }: PricingDeliveryProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/promotions/PromotedContent.tsx:  const handleClick = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/promotions/PromotedContent.tsx:  const linkPath = (() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/promotions/PromotedPost.tsx:  const handleEngagement = async (type: "share" | "click" | "conversion") => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/promotions/PromotedPost.tsx:  const handleClick = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/promotions/PromotedPost.tsx:  const handleDismiss = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/promotions/PromotedPost.tsx:  const formatDate = (date: Date) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/promotions/PromotionDashboard.tsx:const PromotionDashboard = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/promotions/PromotionDashboard.tsx:  const activePromotions = promotions.filter(p => ["active", "pending"].includes(p.status));
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/promotions/CreatePromotionForm.tsx:  const onSubmit = async (data: PromotionFormValues) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/promotions/dashboard/PromotionCard.tsx:  const handleToggleStatus = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/promotions/dashboard/DashboardHeader.tsx:const DashboardHeader = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/promotions/dashboard/EmptyState.tsx:const EmptyState = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/promotions/AIPromotionMessage.tsx:const AIPromotionMessage: React.FC<AIPromotionMessageProps> = ({ promotion, recipientName = 'User', onAction }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/promotions/AIPromotionMessage.tsx:    const trackImpression = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/promotions/AIPromotionMessage.tsx:  const handleClick = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/promotions/PromotionAnalytics.tsx:export const PromotionAnalytics: React.FC = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/promotions/PromotionAnalytics.tsx:  const fetchPromotionMetrics = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/promotions/PromotionAnalytics.tsx:      const totalCreditsIssued = credits?.reduce((sum, credit) => sum + Number(credit.amount), 0) || 0;
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/promotions/PromotionAnalytics.tsx:      const activePromotions = credits?.filter(credit => credit.status === 'active').length || 0;
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/ActivityTab.tsx:  const loadUserActivities = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/ActivityTab.tsx:  const loadEventActivities = async (): Promise<ActivityItem[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/ActivityTab.tsx:  const loadCommunityActivities = async (): Promise<ActivityItem[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/ActivityTab.tsx:  const loadPurchaseActivities = async (): Promise<ActivityItem[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/ActivityTab.tsx:  const loadSocialActivities = async (): Promise<ActivityItem[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/ActivityTab.tsx:  const loadPostsActivities = async (): Promise<ActivityItem[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/ActivityTab.tsx:  const getActivityIcon = (type: ActivityItem['type']) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/ActivityTab.tsx:  const getActivityColor = (type: ActivityItem['type']) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/ActivityTab.tsx:  const filterActivities = (activities: ActivityItem[], filter: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/UpcomingEventsTab.tsx:const UpcomingEventsTab = ({ events, isOwnProfile, username }: UpcomingEventsTabProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/PodcastsTab.tsx:export const PodcastsTab = ({ userId, isOwnProfile, username, user }: PodcastsTabProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/PodcastsTab.tsx:  const loadPodcastData = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/PodcastsTab.tsx:  const loadPodcasts = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/PodcastsTab.tsx:      const podcastsWithCounts = data?.map(podcast => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/PodcastsTab.tsx:  const loadRecentEpisodes = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/PodcastsTab.tsx:  const formatDuration = (seconds: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/PodcastsTab.tsx:  const handlePlayEpisode = (episodeId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/PodcastsTab.tsx:  const handleCreatePodcast = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/PodcastsTab.tsx:  const handleSharePodcast = (podcastId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/TabsLayout.tsx:  const getGridCols = (count: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/CommunitiesTab.tsx:  const loadCommunitiesData = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/CommunitiesTab.tsx:  const loadJoinedCommunities = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/CommunitiesTab.tsx:      const communitiesWithMembership = data?.map(membership => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/CommunitiesTab.tsx:  const loadOwnedCommunities = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/CommunitiesTab.tsx:      const ownedWithRole = data?.map(community => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/CommunitiesTab.tsx:  const loadSuggestedCommunities = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/CommunitiesTab.tsx:      const joinedCommunityIds = joinedIds?.map(item => item.community_id) || [];
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/CommunitiesTab.tsx:      const suggestedWithMembership = data?.map(community => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/CommunitiesTab.tsx:  const handleJoinCommunity = async (communityId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/CommunitiesTab.tsx:  const handleLeaveCommunity = async (communityId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/CommunitiesTab.tsx:  const handleCreateCommunity = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/CommunitiesTab.tsx:  const handleCommunityClick = (communityId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/CommunitiesTab.tsx:  const handleManageCommunity = (communityId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/CommunitiesTab.tsx:  const getCommunityIcon = (community: Community) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/CommunitiesTab.tsx:  const getRoleBadge = (role?: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/StoreTab.tsx:  const loadStoreData = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/StoreTab.tsx:  const loadStore = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/StoreTab.tsx:        const totalRevenue = data.orders?.reduce((sum: number, order: any) => sum + order.total_amount, 0) || 0;
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/StoreTab.tsx:  const loadProducts = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/StoreTab.tsx:      const productsWithStats = data?.map(product => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/StoreTab.tsx:  const checkStoreFollowStatus = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/StoreTab.tsx:  const handleFollowStore = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/StoreTab.tsx:  const handleCreateStore = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/StoreTab.tsx:  const handleAddProduct = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/StoreTab.tsx:  const handleManageStore = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/StoreTab.tsx:  const handleProductClick = (productId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/StoreTab.tsx:  const handleShareProduct = (productId: string, productTitle: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/CreatedEventsTab.tsx:const CreatedEventsTab = ({ events, isOwnProfile, username, isLoading = false }: CreatedEventsTabProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/PostsTab.tsx:const PostsTab: React.FC<PostsTabProps> = ({ userId, isOwnProfile, username }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/PostsTab.tsx:  const loadPosts = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/PostsTab.tsx:          const postIds = data.map(post => post.id);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/PostsTab.tsx:        const postsWithUserAndLikes = data.map(post => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/PostsTab.tsx:  const createPost = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/PostsTab.tsx:  const toggleLike = async (post: Post) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/PostsTab.tsx:  const loadComments = async (postId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/PostsTab.tsx:        const userIds = [...new Set(data.map(comment => comment.user_id))];
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/PostsTab.tsx:        const usersMap = new Map(usersData?.map(user => [user.id, user]) || []);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/PostsTab.tsx:        const commentsWithUsers = data.map(comment => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/PostsTab.tsx:  const createComment = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/PostsTab.tsx:  const deletePost = async (postId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/SubscriptionTab.tsx:  const handleAddPerk = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/SubscriptionTab.tsx:  const handleRemovePerk = (index: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/SubscriptionTab.tsx:  const handleSubscribeSuccess = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/tabs/SubscriptionTab.tsx:  const handleSubscribeError = (error: Error) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/sections/ProfileTabs.tsx:    const fetchEvents = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/sections/ProfileTabs.tsx:          const attending = registrations?.map(reg => reg.event) || [];
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/ProfileEditModal.tsx:  const defaultValues = useMemo((): Partial<ProfileUpdateValues> => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/ProfileEditModal.tsx:  const handleAvatarUpload = async (file: File) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/ProfileEditModal.tsx:  const handleCoverUpload = async (file: File) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/ProfileEditModal.tsx:  const handleSubmit = useCallback(async (values: ProfileUpdateValues) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/ProfileEditModal.tsx:  const addSkill = useCallback(async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/ProfileEditModal.tsx:  const removeSkill = useCallback((skillToRemove: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/ProfileEditModal.tsx:  const addInterest = useCallback(async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/ProfileEditModal.tsx:  const removeInterest = useCallback((interestToRemove: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/ProfileEditModal.tsx:  const handleSkillKeyPress = useCallback((e: React.KeyboardEvent) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/ProfileEditModal.tsx:  const handleInterestKeyPress = useCallback((e: React.KeyboardEvent) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/ProfileEditModal.tsx:  const accountTypeOptions: SearchSelectOption[] = useMemo(() => 
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/ProfileEditModal.tsx:  const visibilityOptions: SearchSelectOption[] = useMemo(() => 
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/ProfileEditModal.tsx:  const tabs = useMemo(() => [
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/MerchantActivation.tsx:const MerchantActivation = ({ isOpen, onClose, onActivate }: MerchantActivationProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/SubscriptionSetup.tsx:const SubscriptionSetup = ({ onClose }: SubscriptionSetupProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/SubscriptionSetup.tsx:  const handleAddPerk = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/SubscriptionSetup.tsx:  const handleRemovePerk = (index: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/SubscriptionSetup.tsx:  const handleSaveSubscription = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/SubscriptionSetup.tsx:  const handleSubscribeSuccess = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/SubscriptionSetup.tsx:  const handleSubscribeError = (error: Error) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/ProfileHeader.tsx:  const handleVisitStore = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/StoreTab.tsx:const StoreTab: React.FC<StoreTabProps> = ({ username, isOwner }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/StoreTab.tsx:    const checkForStore = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/StoreTab.tsx:  const handleCreateStore = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/StoreTab.tsx:  const handleDialogClose = (success = false) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/StoreTab.tsx:  const handleVisitStore = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/UserListDialog.tsx:  const handleUserClick = (username: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/profile/UserListDialog.tsx:  const handleFollowToggle = (user: User, e: React.MouseEvent) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/feed/FeedItem.tsx:const FeedItem = ({ item }: FeedItemProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/examples/StorageUploadExample.tsx:const StorageUploadExample: React.FC<{ eventId?: string }> = ({ eventId = 'example-event' }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/examples/NotificationExample.tsx:const NotificationExample = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/examples/NotificationExample.tsx:  const handleToastSubmit = (e: React.FormEvent) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/examples/NotificationExample.tsx:  const handleInAppSubmit = (e: React.FormEvent) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/examples/NotificationExample.tsx:    const timer = setTimeout(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/wallet/TransferModal.tsx:  const getFormSchema = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/wallet/TransferModal.tsx:  const getFormDefaults = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/wallet/TransferModal.tsx:  const handleRecipientBlur = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/wallet/TransferModal.tsx:  const handleSubmit = async (values: unknown) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/wallet/TransferModal.tsx:  const getMaxAmount = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/wallet/TransferModal.tsx:  const recipientMethodOptions = transferMethods.map(method => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/wallet/forms/StripeCardForm.tsx:export const StripeCardForm: React.FC<StripeCardFormProps> = ({ onSubmit, loading }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/wallet/TransactionsTab.tsx:  const handleFilterChange = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/wallet/WalletContent.tsx:  const formatCurrency = (amount: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/wallet/components/TransactionItem.tsx:export const TransactionItem: React.FC<TransactionItemProps> = ({ transaction }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/wallet/components/TransactionItem.tsx:  const formatCurrency = (amount: number, currency: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/wallet/components/TransactionItem.tsx:  const getTypeLabel = (type: TransactionType) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/wallet/components/TransactionItem.tsx:  const getIcon = (type: TransactionType) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/wallet/components/transactions/TransactionsTable.tsx:export const TransactionsTable: React.FC<TransactionsTableProps> = ({ transactions }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/wallet/components/transactions/TransactionsTable.tsx:  const formatCurrency = (amount: number, currency: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/wallet/components/transactions/TransactionsTable.tsx:  const getTypeLabel = (type: TransactionType): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/wallet/components/transactions/TransactionTypeIcon.tsx:export const TransactionTypeIcon = ({ type }: TransactionTypeIconProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/wallet/components/transactions/TransactionStatusBadge.tsx:export const TransactionStatusBadge = ({ status }: TransactionStatusBadgeProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/wallet/WalletContainer.tsx:const WalletContainer: React.FC = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/wallet/WalletContainer.tsx:    const fetchWalletData = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/wallet/PaymentMethodsTab.tsx:const PaymentMethodsTab: React.FC = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/purchase/OrderDetails.tsx:export const OrderDetails = ({ product, orderDetails }: OrderDetailsProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/purchase/PaymentDetails.tsx:export const PaymentDetails = ({ paymentDetails, eventId }: PaymentDetailsProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/purchase/PurchaseVerification.tsx:export const PurchaseVerification = ({ isVerifying }: PurchaseVerificationProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/form/PodcastMediaFields.tsx:export const PodcastMediaFields = ({ form }: PodcastMediaFieldsProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/form/PodcastMediaFields.tsx:  const handleAudioFileUpload = async (files: File[]) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/form/PodcastMediaFields.tsx:  const handleThumbnailUpload = async (files: File[]) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/form/PodcastMediaFields.tsx:  const handleCoverImageUpload = async (files: File[]) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/form/PodcastMediaFields.tsx:  const handleRetryUpload = (type: 'audio' | 'thumbnail' | 'cover') => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/form/PodcastTypeSelector.tsx:export const PodcastTypeSelector = ({ form }: PodcastTypeSelectorProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/form/PodcastTypeSelector.tsx:  const handleTypeChange = (value: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/form/PodcastBasicInfo.tsx:export const PodcastBasicInfo = ({ form }: PodcastBasicInfoProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/CreatePodcastForm.tsx:const CreatePodcastForm: React.FC = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/CreatePodcastForm.tsx:  const handleSaveRecording = async (podcastId: string, duration: number, fileUrl: string, thumbnailUrl?: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/CreatePodcastForm.tsx:  const handleCancelRecording = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/CreatePodcastForm.tsx:  const onSubmit = async (data: PodcastFormData) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/CreatePodcastForm.tsx:  const addTag = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/CreatePodcastForm.tsx:  const removeTag = (tagToRemove: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/PodcastSubscriptionGate.tsx:  const currentTier = PODCAST_SUBSCRIPTION_TIERS.find(tier => tier.id === userSubscription) || PODCAST_SUBSCRIPTION_TIERS[0];
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/PodcastSubscriptionGate.tsx:  const proTier = PODCAST_SUBSCRIPTION_TIERS.find(tier => tier.id === 'pro')!;
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/PodcastSubscriptionGate.tsx:  const hasRequiredAccess = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/CollaborativeRecorder.tsx:  const formatDuration = (seconds: number): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/CollaborativeRecorder.tsx:  const handleStartRecording = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/CollaborativeRecorder.tsx:  const handleStopRecording = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/CollaborativeRecorder.tsx:  const handleToggleAudio = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/CollaborativeRecorder.tsx:  const handleToggleVideo = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/CollaborativeRecorder.tsx:  const handleInviteByEmail = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/CollaborativeRecorder.tsx:  const handleCopyInviteLink = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/CollaborativeRecorder.tsx:  const handleRemoveParticipant = async (participantId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/CollaborativeRecorder.tsx:      const participant = participants.find(p => p.sid === participantId);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/CollaborativeRecorder.tsx:  const handleLeaveSession = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/EnhancedCreatePodcastForm.tsx:  const currentTier = PODCAST_SUBSCRIPTION_TIERS.find(tier => tier.id === userSubscription)!;
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/EnhancedCreatePodcastForm.tsx:    const checkSubscription = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/EnhancedCreatePodcastForm.tsx:  const getQualityOptions = (type: 'audio' | 'video') => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/EnhancedCreatePodcastForm.tsx:  const handleStartCollaborativeRecording = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/EnhancedCreatePodcastForm.tsx:  const handleRecordingComplete = (recordingUrl: string, duration: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/EnhancedCreatePodcastForm.tsx:  const onSubmit = async (data: EnhancedPodcastFormData) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/EnhancedCreatePodcastForm.tsx:  const getEstimatedFileSize = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/detail/PodcastTabs.tsx:export const PodcastTabs = ({ podcast, currentUser }: PodcastTabsProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/detail/PodcastInfo.tsx:export const PodcastInfo = ({ podcast, isCreator, liked, onLikeClick }: PodcastInfoProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/detail/PodcastInfo.tsx:  const handleShareClick = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/PodcastCard.tsx:  const handlePlay = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/PodcastCard.tsx:  const handleLike = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/PodcastCard.tsx:  const handleShare = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/PodcastCard.tsx:  const formatDuration = (seconds: number): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/PodcastCard.tsx:  const getRelativeTime = (dateString: string): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/PodcastCard.tsx:  const formatNumber = (num: number): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/list/PodcastFilters.tsx:export const PodcastFilters = ({ onSearch, onTypeFilter }: PodcastFiltersProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/list/PodcastList.tsx:export const PodcastList = ({ podcasts, isLoading, onRefresh, hasError = false }: PodcastListProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/recorder/utils/thumbnailGenerator.ts: * Utility function to generate a thumbnail from a video blob
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/recorder/utils/thumbnailGenerator.ts:export const generateThumbnail = async (videoBlob: Blob): Promise<string> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/recorder/utils/thumbnailGenerator.ts:      // Cleanup function to remove elements and revoke object URL
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/recorder/utils/thumbnailGenerator.ts:      function cleanup() {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/recorder/utils/thumbnailGenerator.ts: * Utility function to generate multiple thumbnails from a video blob
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/recorder/utils/thumbnailGenerator.ts:        const captureFrameAt = (position: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/recorder/utils/thumbnailGenerator.ts:      // Cleanup function to remove elements and revoke object URL
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/recorder/utils/thumbnailGenerator.ts:      function cleanup() {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/recorder/ConfigError.tsx:const ConfigError: React.FC = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/recorder/ConfigError.tsx:        LiveKit configuration is missing from environment variables. Recording functionality is disabled.
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/recorder/RecordingSection.tsx:  const getQualityString = (q: PodcastQuality): "low" | "medium" | "high" => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/RecordingSection.tsx:  const handleStartRecording = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/RecordingSection.tsx:  const handleStopRecording = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/RecordingSection.tsx:  const handlePauseRecording = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/RecordingSection.tsx:  const handleResumeRecording = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/PodcastPlayer.tsx:const PodcastPlayer = ({ podcast }: PodcastPlayerProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/PodcastPlayer.tsx:  const handleTimeUpdate = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/PodcastPlayer.tsx:  const handleEnded = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/PodcastPlayer.tsx:  const togglePlay = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/PodcastPlayer.tsx:  const handleSeek = (value: number[]) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/PodcastPlayer.tsx:  const handleVolumeChange = (value: number[]) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/PodcastPlayer.tsx:  const toggleMute = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/PodcastPlayer.tsx:  const skipBackward = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/PodcastPlayer.tsx:  const skipForward = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/PodcastPlayer.tsx:  const formatTime = (timeInSeconds: number): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/player/AudioVideoElement.tsx:export const AudioVideoElement = ({ podcast, onTimeUpdate, onEnded }: AudioVideoElementProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/podcast/player/PlayerControls.tsx:  const getVolumeIcon = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/venue/VenueOwnerVerification.tsx:const VenueOwnerVerification = ({ className }: VenueOwnerVerificationProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/venue/VenueOwnerVerification.tsx:  const handleStartVerification = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/venue/VenueOwnerVerification.tsx:  const getStatusDisplay = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/venue/VenueLocationForm.tsx:const VenueLocationForm = ({}: VenueLocationFormProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/events/SponsorshipSection.tsx:const SponsorshipSection: React.FC<SponsorshipSectionProps> = ({ event }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/events/SponsorshipSection.tsx:  const handleSponsorClick = (tier: SponsorshipTier) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/events/SponsorshipSection.tsx:  const handleConfirmSponsorship = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/events/TourDatesDisplay.tsx:  const getStatusColor = (status: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/events/TourDatesDisplay.tsx:  const getStatusLabel = (status: TourDate['status']) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/events/TourDatesDisplay.tsx:  const formatDate = (date: Date | string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/events/TourDatesDisplay.tsx:  const formatTime = (time: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/events/TourDatesDisplay.tsx:  const toggleExpanded = (dateId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/events/TourDatesDisplay.tsx:  const upcomingDates = tourDetails.tourDates.filter(date => 
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/events/TourDatesDisplay.tsx:  const pastDates = tourDetails.tourDates.filter(date => 
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/events/SponsorsList.tsx:const SponsorsList: React.FC<SponsorsListProps> = ({ sponsorshipTiers }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/events/SponsorsList.tsx:  const tiersWithSponsors = sponsorshipTiers.filter(tier => tier.sponsors && tier.sponsors.length > 0);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/events/EventHeader.tsx:const EventHeader = ({ event }: EventHeaderProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/events/EventHeader.tsx:  const hasSponsors = event.sponsorshipTiers?.some(tier => tier.sponsors && tier.sponsors.length > 0);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/events/EventHeader.tsx:  const formatDate = (date?: Date | string | any) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/events/EventHeader.tsx:  const formatTime = (date?: Date | string | any) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/events/EventSupporters.tsx:const EventSupporters = ({ eventId, isOrganizer }: EventSupportersProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/events/EventDetailsSection.tsx:const EventDetailsSection = ({ event, currentUser }: EventDetailsSectionProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/events/EventDetailsSection.tsx:  const handleDeleteEvent = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/events/EventDetailsSection.tsx:const SaveEventButton: React.FC<{ eventId: string; className?: string }> = ({ eventId, className }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/events/EventDetailsSection.tsx:  const toggleSave = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/community/PaginatedCommunityList.tsx:  const fetchEvents = async (lastEventId?: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/community/PaginatedCommunityList.tsx:  const loadMore = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/community/CommunityForm.tsx:const CommunityForm = ({ onSuccess }: CommunityFormProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/community/CommunityForm.tsx:  const handleSubmit = async (values: CommunityFormValues) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/community/CommunityForm.tsx:  const addTag = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/community/CommunityForm.tsx:  const removeTag = (tagToRemove: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/community/CommunitySubscriptionTab.tsx:const CommunitySubscriptionTab: React.FC<CommunitySubscriptionTabProps> = ({ community }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/community/CommunitySubscriptionTab.tsx:    const loadData = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/community/CommunitySubscriptionTab.tsx:  const handleSubscribe = async (subscriptionType: 'monthly' | 'yearly') => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/community/CommunitySubscriptionTab.tsx:  const handlePaymentSuccess = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/community/CommunitySubscriptionTab.tsx:  const handleCancelSubscription = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/community/CommunitySubscriptionTab.tsx:  const formatNextEventDate = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/community/CommunitySubscriptionTab.tsx:  const getScheduleDescription = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/community/CommunitySubscriptionTab.tsx:  const getOrdinalSuffix = (day: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/community/CommunitySubscriptionTab.tsx:  const getDayOfWeekName = (dayNumber: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/community/CommunitySubscriptionTab.tsx:  const calculateYearlyDiscount = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/community/CommunitySubscriptionTab.tsx:  const generateReferralCode = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/community/CommunitySubscriptionTab.tsx:  const copyReferralLink = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/community/CommunityList.tsx:const CommunityList = ({ communities, loading, onCreateClick }: CommunityListProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/community/MemberList.tsx:const MemberList: React.FC<MemberListProps> = ({ community, isAdmin }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/community/MemberList.tsx:    const fetchMembers = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/community/MemberList.tsx:        const memberPromises = community.members.map(async (memberId) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/community/MemberList.tsx:  const filteredMembers = members.filter(member => 
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/community/MemberList.tsx:  const adminMembers = filteredMembers.filter(member => member.isAdmin);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/community/MemberList.tsx:  const regularMembers = filteredMembers.filter(member => !member.isAdmin);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/community/CommunityCard.tsx:  const handleJoin = async (e: React.MouseEvent) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/community/CommunityCard.tsx:  const getInitials = (name: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/community/CommunitySubscriptionSettings.tsx:    const loadSettings = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/community/CommunitySubscriptionSettings.tsx:  const onSubmit = async (data: FormData) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/community/CommunitySubscriptionSettings.tsx:  const addBenefit = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/community/CommunitySubscriptionSettings.tsx:  const removeBenefit = (index: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/community/CommunitySubscriptionSettings.tsx:  const calculateYearlyDiscount = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/community/CommunitySubscriptionSettings.tsx:  const getDayOfWeekName = (dayNumber: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/connect/RefreshRedirect.tsx:const RefreshRedirect = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/notifications/NotificationList.tsx:const NotificationList = ({ notifications, loading, onMarkAsRead }: NotificationListProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/notifications/NotificationLoading.tsx:const NotificationLoading = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/notifications/NotificationEmpty.tsx:const NotificationEmpty = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/notifications/NotificationDropdown.tsx:const NotificationDropdown = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/notifications/NotificationDropdown.tsx:  const getNotificationIcon = (type: Notification['type']) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/notifications/NotificationDropdown.tsx:  const getNotificationColor = (type: Notification['type']) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/notifications/NotificationItem.tsx:export const NotificationItem = ({ notification, onMarkAsRead }: NotificationItemProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/onboarding/OnboardingTip.tsx:const OnboardingTip = () => null;
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/onboarding/OnboardingButton.tsx:const OnboardingButton = () => null;
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/onboarding/OnboardingProvider.tsx:export const OnboardingProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/onboarding/OnboardingModal.tsx:const OnboardingModal = () => null;
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/help/SearchBox.tsx:const SearchBox = ({ articles, onArticleSelect }: SearchBoxProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/help/SearchBox.tsx:  const filteredArticles = articles.filter((article) =>
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/help/ArticleContent.tsx:const ArticleContent = ({ article, onClose }: ArticleContentProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/analytics/ProfileAnalytics.tsx:const ProfileAnalytics: React.FC<ProfileAnalyticsProps> = ({ userId, isVisible = true, children }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/analytics/AdvertisingAnalytics.tsx:export const AdvertisingAnalytics: React.FC = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/analytics/AdvertisingAnalytics.tsx:  const fetchAnalytics = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/store/ProductSkeleton.tsx:export const ProductSkeleton = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/store/ProductSkeleton.tsx:export const ProductSkeletonGrid = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/store/StoreSearch.tsx:const StoreSearch = ({ searchQuery, setSearchQuery, sortOrder, onSortChange }: StoreSearchProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/store/StoreSearch.tsx:  const handleSearch = (e: React.FormEvent) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/store/StoreSearch.tsx:  const getSortLabel = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/store/cards/SellerCard.tsx:export const SellerCard = ({ seller, onViewStore }: SellerCardProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/store/cards/SellerCard.tsx:  const handleViewStore = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/store/CreateStoreDialog.tsx:const CreateStoreDialog: React.FC<CreateStoreDialogProps> = ({ userId, onComplete }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/store/CreateStoreDialog.tsx:  const handleSubmit = async (e: React.FormEvent) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/store/StoreFeaturedSellers.tsx:const StoreFeaturedSellers = ({ sellers }: StoreFeaturedSellersProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/store/StoreTabs.tsx:const EmptyTabContent = ({ title }: { title: string }) => (
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/store/user-store/utils/queryBuilder.ts: * Builds a mock query object specifically for search functionality
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/store/user-store/utils/queryBuilder.ts: * Helper function to determine the field to sort by based on the sort option
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/store/user-store/utils/queryBuilder.ts:export const getSortField = (sort: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/store/user-store/utils/queryBuilder.ts: * Helper function to determine the sort direction based on the sort option
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/store/user-store/utils/queryBuilder.ts:export const getSortDirection = (sort: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/store/user-store/utils/paginationHandler.ts: * Custom handler for pagination functionality
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/store/user-store/utils/paginationHandler.ts: * @returns Object containing pagination handler functions
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/store/user-store/utils/paginationHandler.ts:  const handleNextPage = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/store/user-store/utils/paginationHandler.ts:  const handlePrevPage = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/store/user-store/EmptyStoreState.tsx:const EmptyStoreState: React.FC<EmptyStoreStateProps> = ({ onCreateStore }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/store/user-store/ProductFetcher.tsx:export const ProductFetcher = (props: ProductFetcherProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/store/user-store/useProductFetcher.ts:export const useProductFetcher = (props: ProductFetcherProps): ProductFetcherResult => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/store/user-store/useProductFetcher.ts:  const fetchProducts = useCallback(async (pageNum: number, lastDoc: any | null = null) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/store/user-store/useProductFetcher.ts:  const handleNextPage = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/store/user-store/useProductFetcher.ts:  const handlePrevPage = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/store/user-store/hooks/useStoreProductFetcher.ts: * @returns Object containing pagination handler functions
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/store/user-store/hooks/useStoreProductFetcher.ts:export const useStoreProductFetcher = (props: UseStoreProductFetcherProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/store/user-store/hooks/useStoreProductFetcher.ts:  const fetchProducts = useCallback(async (pageNum: number, lastDoc: Record<string, unknown> | null = null) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/store/user-store/StoreContainer.tsx:  const handleAddProduct = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/store/user-store/services/storeProductService.ts: * Service function to fetch products for a store with filtering, sorting and pagination
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/store/user-store/services/storeProductService.ts:    const products = (data || []).map(product => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/store/user-store/services/storeProductService.ts:export const getStoreProducts = async (storeId: string): Promise<Product[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/store/user-store/services/storeProductService.ts:export const deleteStoreProduct = async (productId: string): Promise<void> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/store/user-store/services/storeProductService.ts:export const getProductCategories = async (): Promise<string[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/store/user-store/services/storeProductService.ts:    const categories = [...new Set(data?.map(item => item.category).filter(Boolean))];
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/store/user-store/LoadingState.tsx:const LoadingState: React.FC = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/store/StoreProductGrid.tsx:    const handleOnline = () => setIsOnline(true);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/store/StoreProductGrid.tsx:    const handleOffline = () => setIsOnline(false);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/store/StoreProductGrid.tsx:  const handleRetry = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/store/StoreHeader.tsx:const StoreHeader = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/store/StoreCreatePrompt.tsx:const StoreCreatePrompt = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/store/StoreCreatePrompt.tsx:  const handleCreateStore = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/store/StoreCreatePrompt.tsx:  const handleDialogClose = (success: boolean) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/debug/EnvironmentDebug.tsx:export const EnvironmentDebug: React.FC<EnvironmentDebugProps> = ({ show = false }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/debug/EnvironmentDebug.tsx:  const missingCritical = criticalVars.filter(key => !envVars[key as keyof typeof envVars]);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/debug/EnvironmentDebug.tsx:  const getStatusIcon = (value: string | undefined) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/debug/EnvironmentDebug.tsx:  const getStatusBadge = (value: string | undefined) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/debug/StripeConnectDebug.tsx:import { getConnectAccountStatus, createConnectOnboardingLink } from '@/services/supabase/edge-functions';
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/debug/StripeConnectDebug.tsx:export const StripeConnectDebug: React.FC = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/debug/StripeConnectDebug.tsx:  const runDebug = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/debug/StripeConnectDebug.tsx:      // Test edge functions if user is authenticated
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/debug/StripeConnectDebug.tsx:        info.recommendations.push('Please log in to test Stripe Connect functionality');
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/debug/StripeConnectDebug.tsx:        info.issues.push('Edge function authentication failed');
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/debug/StripeConnectDebug.tsx:  const clearDebug = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/debug/StripeConnectDebug.tsx:  const testOnboarding = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/debug/AuthDebug.tsx:export const AuthDebug: React.FC = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/debug/AuthDebug.tsx:  const runDebug = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/debug/AuthDebug.tsx:  const clearDebug = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/share/SocialSharePopover.tsx:  const shareToFacebook = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/share/SocialSharePopover.tsx:  const shareToTwitter = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/share/SocialSharePopover.tsx:  const shareToLinkedin = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/share/SocialSharePopover.tsx:  const shareViaWhatsApp = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/share/SocialSharePopover.tsx:  const shareViaEmail = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/share/SocialSharePopover.tsx:  const copyToClipboard = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/share/SocialSharePopover.tsx:  const shareViaNativeAPI = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/components/share/ReferralLinkPopover.tsx:  const copyToClipboard = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useUserTickets.ts:export const useUserTickets = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useUserTickets.ts:  const fetchTickets = async (): Promise<Ticket[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useCatererDetails.ts:export const useCatererDetails = (id: string | undefined) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useMessages.tsx:const useMessages = (retryAttempt: number = 0) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useMessages.tsx:    const handleOnline = () => setIsOnline(true);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useMessages.tsx:    const handleOffline = () => setIsOnline(false);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useMessages.tsx:    const processPendingMessages = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useMessages.tsx:    const fetchConversations = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useMessages.tsx:  const sendMessage = useCallback(async (content: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useMessages.tsx:  const refreshConversations = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useMessages.tsx:  // Add retry function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useMessages.tsx:  const retry = useCallback(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/settings/useProfileFormValidation.ts:export const useProfileFormValidation = ({ currentUsername, isOffline }: UseProfileFormValidationProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/settings/useProfileFormValidation.ts:  const validateUsername = async (username: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/settings/useProfileFormValidation.ts:  const checkUsernameAvailability = async (username: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/settings/useProfileFormValidation.ts:  const validateProfileForm = (data: unknown) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useDialog.ts:export const useDialog = (initialState = false): UseDialogReturn => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useDialog.ts:  const onOpen = () => setIsOpen(true);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useDialog.ts:  const onClose = () => setIsOpen(false);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useDialog.ts:  const onToggle = () => setIsOpen(!isOpen);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useStripeOnboarding.ts:export const useStripeOnboarding = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useStripeOnboarding.ts:  const handleConnectStripe = async (userId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/use-mobile.tsx:export function useIsMobile() {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/use-mobile.tsx:    const onChange = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useManagementData.ts:export const useManagementData = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useManagementData.ts:    const fetchManagementData = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useEventSearch.ts:export function useEventSearch(initialFilters: Partial<EventSearchProps>) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useEventSearch.ts:  const memoizedInitialFilters = useMemo(() => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useEventSearch.ts:  const filtersChanged = useMemo(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useEventSearch.ts:  const updateFilters = useCallback((newFilters: Partial<EventSearchProps>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useEventSearch.ts:  const loadMore = useCallback(async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useEventSearch.ts:          const existingIds = new Set(prevEvents.map(e => e.id));
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useEventSearch.ts:          const newEvents = moreEvents.filter(e => !existingIds.has(e.id));
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useEventSearch.ts:  // Add retry function to refresh events
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useEventSearch.ts:  const retry = useCallback(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useEventSearch.ts:    const fetchEvents = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useEventSearch.ts:        // Pass both limit and filters to getEvents function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/usePromotions.ts:export const usePromotions = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/usePromotions.ts:  const mapContentToPromotion = (item: unknown): PromotionSettings | null => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/usePromotions.ts:  const fetchPromotions = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/usePromotions.ts:  const handleToggleStatus = async (promotionId: string, currentStatus: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/usePromotions.ts:        const updatedPromotions = promotions.map(promo => 
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/usePromotions.ts:  const handleApprove = async (id: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/usePromotions.ts:        const updatedPromotions = promotions.map(promo => 
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/usePromotions.ts:  const handleReject = async (id: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/usePromotions.ts:        const updatedPromotions = promotions.map(promo => 
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useVenueDetails.ts:export const useVenueDetails = (venueId: string | undefined) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useWallet.tsx:export const useWallet = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useWallet.tsx:  const fetchWalletBalance = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useWallet.tsx:  const fetchPaymentMethods = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useWallet.tsx:      // Use payment-methods function directly, which is the dedicated function for this
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useWallet.tsx:      const result = await supabase.functions.invoke('payment-methods', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useWallet.tsx:  const addFunds = useCallback(async (amount: number): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useWallet.tsx:      const result = await supabase.functions.invoke('create-checkout-session', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useWallet.tsx:  const withdrawFunds = useCallback(async (amount: number): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useWallet.tsx:      // Call withdrawal processing function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useWallet.tsx:      const { data: result, error: withdrawalError } = await supabase.functions.invoke('process-withdrawal', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useWallet.tsx:  const transferFunds = useCallback(async (recipientId: string, amount: number): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useWallet.tsx:      // Call transfer processing function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useWallet.tsx:      const { data: result, error: transferError } = await supabase.functions.invoke('process-transfer', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useWallet.tsx:  const addCard = useCallback(async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useWallet.tsx:      const result = await supabase.functions.invoke('payment-methods', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useWallet.tsx:  const removeMethod = useCallback(async (paymentMethodId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useWallet.tsx:      const result = await supabase.functions.invoke('payment-methods', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useWallet.tsx:  const setDefaultMethod = useCallback(async (paymentMethodId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useWallet.tsx:  const generateSecretKeyMethods = useCallback(async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/usePageContent.ts:const fetchPageContent = async (pageId: string): Promise<PageContent | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/usePageContent.ts:export const usePageContent = (pageId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useVenueForm.ts:export const useVenueForm = (onSuccess: (venueId: string) => void) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useVenueForm.ts:  const onSubmit = async (data: VenueFormValues) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useVenueForm.ts:  const handleImageUpload = (files: FileList | null) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useVenueForm.ts:    const invalidImages = newImages.filter(file => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useVenueForm.ts:    const validImages = newImages.filter(file => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useVenueForm.ts:  const removeImage = (index: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useFormDraft.ts:const getFormDraftsCache = <T extends object>(): CacheProvider<T> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useFormDraft.ts:export function useFormDraft<T extends object>(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useFormDraft.ts:    const subscription = form.watch((values) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useFormDraft.ts:        const processedValues = Object.entries(values).reduce((acc, [key, value]) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useFormDraft.ts:        const processedDraft = Object.entries(savedDraft).reduce((acc, [key, value]) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useFormDraft.ts:  const clearDraft = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/usePaymentSettings.tsx:export const usePaymentSettings = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/usePaymentSettings.tsx:  const fetchSettings = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/usePaymentSettings.tsx:  const handleSavePreferences = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useWalkthrough.tsx:export const useWalkthrough = create<WalkthroughState>(() => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/usePaymentSettings.ts:export const usePaymentSettings = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/usePaymentSettings.ts:    const fetchSettings = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/usePaymentSettings.ts:  const updatePaymentPreference = async (key: string, value: unknown) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/usePaymentSettings.ts:  const addCredit = async (amount: number | string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useConversationsCount.ts:export const useConversationsCount = (userId: string | undefined) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useConversationsCount.ts:    const fetchUnreadConversations = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useConversationsCount.ts:    // Return cleanup function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useCommunitySubscription.ts:  const loadSubscriptionData = useCallback(async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useCommunitySubscription.ts:  const loadSubscribers = useCallback(async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useCommunitySubscription.ts:  const cancelSubscription = useCallback(async (): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useCommunitySubscription.ts:  const getSubscriptionStatus = useCallback(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useCommunitySubscription.ts:  const getNextBillingDate = useCallback(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useCommunitySubscription.ts:  const getSubscriptionType = useCallback(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useCommunitySubscription.ts:  const calculateYearlyDiscount = useCallback(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useGeolocation.ts:const updateGlobalState = (newState: LocationInfo) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useGeolocation.ts:export const useGeolocation = (): GeolocationHookReturn => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useGeolocation.ts:  const [locationInfo, setLocationInfo] = useState<LocationInfo>(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useGeolocation.ts:  const [manualLocationSet, setManualLocationSet] = useState(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useGeolocation.ts:    const handleGlobalStateChange = (newState: LocationInfo) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useGeolocation.ts:  const updateLocationState = useCallback((updates: Partial<LocationInfo>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useGeolocation.ts:  const setManualLocation = useCallback((location: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useGeolocation.ts:  const clearManualLocation = useCallback(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useGeolocation.ts:  const getLocation = useCallback(async (forceRefresh = false) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useGeolocation.ts:      const position = await new Promise<GeolocationPosition>((resolve, reject) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useGeolocation.ts:        const timeoutId = setTimeout(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useGeolocation.ts:  const proceedWithLocationPermission = useCallback(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useGeolocation.ts:  const retryLocation = useCallback(async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useCommunities.ts: * @returns Community-related data and functions
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useCommunities.ts:export const useCommunities = (communityId?: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useCommunities.ts:  const refreshData = useCallback(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useCommunities.ts:    const fetchCommunities = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useCommunities.ts:    const fetchCommunity = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useCommunities.ts:  const handleCreateCommunity = async (communityData: Partial<Community>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useCommunities.ts:  const handleUpdateCommunity = async (communityId: string, data: Partial<Community>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useCommunities.ts:  const handleJoinCommunity = async (communityId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useCommunities.ts:  const handleLeaveCommunity = async (communityId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useCommunities.ts:  const handleDeleteCommunity = async (communityId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useCommunities.ts:  const handleJoinRequest = async (communityId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useCommunities.ts:  const handleRequestResponse = async (requestUserId: string, status: 'approved' | 'rejected') => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/location/useLocationPrompt.ts:export const useLocationPrompt = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/location/useLocationPrompt.ts:  const shouldShowLocationPrompt = useCallback(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/location/useLocationPrompt.ts:  const updateLastPromptTime = useCallback(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/location/useLocationPrompt.ts:    const handleFirstInteraction = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/location/useLocationService.ts:export const useLocationService = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/location/useGeocoding.ts:export const useGeocoding = (coordinates: Coordinates) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/location/useReverseGeocoding.ts:export const useReverseGeocoding = (coordinates: Coordinates) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useStripeReturn.ts:  const handleStripeReturn = async (status: string, accountId: string, uid: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/payment/usePlatformCredit.tsx:    const loadCreditInfo = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/payment/usePlatformCredit.tsx:          // Get platform credit using centralized function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/payment/useCheckoutHandler.tsx:  const handleCheckout = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/payment/useFeeCalculation.tsx:  const feeBreakdown = useMemo(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/payment/useFeeCalculation.tsx:  const formattedBreakdown = useMemo(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/payment/useFeeCalculation.tsx:  const creatorProgramBenefit = useMemo(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useEventTickets.ts:export const useEventTickets = (eventId?: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useEventTickets.ts:  const fetchTickets = async (): Promise<Ticket[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useEventTickets.ts:  const validateEventTicket = async (ticketId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useEventTickets.ts:      const updatedTickets = (data || []).map(ticket => 
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/usePromotionCredits.tsx:export const usePromotionCredits = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/usePromotionCredits.tsx:  const refreshCredits = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/usePromotionCredits.tsx:      const expiringCredits = promotionCredits.filter(credit => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useFormUndoRedo.ts:export function useFormUndoRedo<TFormValues extends Record<string, unknown>>(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useFormUndoRedo.ts:  const saveToHistory = useCallback((values: TFormValues) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useFormUndoRedo.ts:  const debouncedSaveToHistory = useCallback((values: TFormValues) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useFormUndoRedo.ts:    const subscription = form.watch((values) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useFormUndoRedo.ts:  const undo = useCallback(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useFormUndoRedo.ts:  const redo = useCallback(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useFormUndoRedo.ts:  const resetHistory = useCallback(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useFormUndoRedo.ts:export function useFieldHistory<T = any>(fieldName: string, initialValue: T) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useFormUndoRedo.ts:  const addToHistory = useCallback((value: T) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useFormUndoRedo.ts:  const goBack = useCallback(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useFormUndoRedo.ts:  const goForward = useCallback(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useCheckoutModal.tsx:export const useCheckoutModal = create<CheckoutModalStore>((set) => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useErrorReporting.ts:export const useErrorReporting = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useErrorReporting.ts:  const reportError = (error: Error, context?: Record<string, unknown>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useAudio.tsx:export const useAudio = (url?: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useAudio.tsx:    const setAudioData = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useAudio.tsx:    const setAudioTime = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useAudio.tsx:    const handleEnded = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useAudio.tsx:  const togglePlay = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useAudio.tsx:  const seek = (time: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useAudio.tsx:  const setVolumeLevel = (level: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useAudio.tsx:  const toggleMute = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useAudio.tsx:  const formatTime = (time: number): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useReports.ts:const fetchReports = async (): Promise<Report[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useReports.ts:export const useReports = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/admin/useUsers.ts:  const fetchUsers = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/admin/useUsers.ts:      const transformedUsers: AdminUser[] = (data || []).map(user => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/admin/useUsers.ts:  const updateUserRole = async (userId: string, newRole: UserRole) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/admin/useUsers.ts:  const updateUserStatus = async (userId: string, newStatus: UserStatus) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/admin/useRecords.ts:export const useRecords = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/admin/useRecords.ts:  const fetchData = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/admin/useRecords.ts:  const addArtist = async (artistData: Omit<Artist, 'id' | 'createdAt'>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/admin/useRecords.ts:  const updateArtist = async (id: string, updates: Partial<Artist>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/admin/useRecords.ts:  const deleteArtist = async (id: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/admin/useRecords.ts:  const addAlbum = async (albumData: Omit<Album, 'id' | 'createdAt'>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/admin/useRecords.ts:  const updateAlbum = async (id: string, updates: Partial<Album>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/admin/useRecords.ts:  const deleteAlbum = async (id: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/admin/useStudios.ts:const usePagination = (itemsPerPage: number = 10): UsePaginationResult => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/admin/useStudios.ts:  const handlePageChange = (page: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/admin/useStudios.ts:  const paginateItems = <T,>(items: T[]): T[] => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/admin/useStudios.ts:export const useStudios = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/admin/useStudios.ts:  const fetchStudios = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/admin/useStudios.ts:  const updateStudioStatus = async (studioId: string, status: 'active' | 'pending' | 'suspended' | 'inactive') => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/admin/useStudios.ts:  const filterStudiosByStatus = (status: 'active' | 'pending' | 'suspended' | 'inactive') => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/admin/useStudios.ts:  const deleteStudio = async (studioId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/admin/useAdminPagination.ts:export const useAdminPagination = (itemsPerPage: number = 10) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/admin/useAdminPagination.ts:  const handlePageChange = (page: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/admin/useAdminPagination.ts:  const paginateItems = <T>(items: T[]): T[] => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/admin/useReportedEvents.ts:export const useReportedEvents = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/admin/useReportedEvents.ts:  const fetchReports = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/admin/useReportedEvents.ts:      const transformedReports: ReportedEvent[] = (data || []).map(report => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/admin/useReportedEvents.ts:  const updateReportStatus = async (reportId: string, newStatus: ReportStatus) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/admin/useReportedEvents.ts:  const deleteReport = async (reportId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/admin/useReportedEvents.ts:  const filterReportsByStatus = (status?: ReportStatus) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/admin/useReportedEvents.ts:    const filteredReports = reports.filter(report => report.status === status);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useMediaQuery.ts:export function useMediaQuery(query: string): boolean {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useMediaQuery.ts:    const updateMatches = (event: MediaQueryListEvent) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useFileUpload.ts:export const useFileUpload = ({ onFileSelect, maxFiles = 1, maxSizeMB = 5 }: UseFileUploadProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useFileUpload.ts:  const handleDragOver = (e: DragEvent<HTMLDivElement>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useFileUpload.ts:  const handleDragLeave = (e: DragEvent<HTMLDivElement>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useFileUpload.ts:  const handleDrop = (e: DragEvent<HTMLDivElement>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useFileUpload.ts:  const handleFiles = (files: File[]) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useFileUpload.ts:    const validFiles = files.filter(file => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useFileUpload.ts:  const handleFileInputChange = (e: ChangeEvent<HTMLInputElement>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useFileUpload.ts:  const triggerFileInput = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useFileUpload.ts:  const removeFile = (index: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useStripeAccountStatus.ts:import { getConnectAccountStatus } from '@/services/supabase/edge-functions';
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useStripeAccountStatus.ts:export const useStripeAccountStatus = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useStripeAccountStatus.ts:  const fetchStatus = async (): Promise<StripeAccountStatus> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useCaterers.tsx:export const useCaterers = (initialFilters: CatererFilters = {}) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useCaterers.tsx:  const loadCaterers = useCallback(async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useCaterers.tsx:      const timer = setTimeout(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useCaterers.tsx:  const updateFilters = (newFilters: Partial<CatererFilters>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/use-toast.ts:function genId() {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/use-toast.ts:const addToRemoveQueue = (toastId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/use-toast.ts:  const timeout = setTimeout(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/use-toast.ts:export const reducer = (state: State, action: Action): State => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/use-toast.ts:function dispatch(action: Action) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/use-toast.ts:function toast({ ...props }: Toast) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/use-toast.ts:  const update = (props: ToasterToast) =>
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/use-toast.ts:  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/use-toast.ts:function useToast() {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useEventForm.ts:export const useEventForm = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useEventForm.ts:  const onSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useNotificationSettings.ts:export const useNotificationSettings = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useNotificationSettings.ts:  const handleEmailNotificationChange = async (setting: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useNotificationSettings.ts:  const handlePushNotificationChange = async (setting: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useNotificationSettings.ts:    const loadSettings = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useNotificationSettings.ts:  const updateSettings = async (newSettings: NotificationSettings) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useSupabaseQuery.ts:export function useSupabaseQuery<T = any>(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useSupabaseQuery.ts:  const fetchData = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useSupabaseQuery.ts:export function useSupabaseMutation(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useSupabaseQuery.ts:  const add = async (data: unknown): Promise<string | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useSupabaseQuery.ts:  const update = async (id: string, data: unknown): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useSupabaseQuery.ts:  const remove = async (id: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/profile/useProfileState.ts:export function useProfileState({ userId }: UseProfileStateProps = {}): ProfileStateReturn {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/profile/useFollowCounts.ts:export const useFollowCounts = (userId?: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/profile/useFollowCounts.ts:    const fetchFollowCounts = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/profile/useProfileData.ts:export const useProfileData = (usernameOrId: string | undefined): UseProfileDataReturn => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/profile/useProfileData.ts:  const retry = useCallback(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/profile/useProfileData.ts:  const fetchUserPosts = useCallback(async (userId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/profile/useProfileData.ts:  const fetchFollowCounts = useCallback(async (userId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/profile/useProfileData.ts:    const handleOnlineStatus = () => setIsOffline(!navigator.onLine);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/profile/useProfileData.ts:    const fetchUserData = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/profile/useProfileData.ts:    const timer = setTimeout(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/profile/useProfileForm.ts:export function useProfileForm(userId?: string) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/profile/useProfileForm.ts:  const handleProfileChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/profile/useProfileForm.ts:  const updateProfileData = async (data?: ProfileData) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/profile/useProfileActions.ts:export function useProfileActions(userId?: string) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/profile/useProfileActions.ts:    const loadPrivacySettings = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/profile/useProfileActions.ts:  const handleMessageClick = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/profile/useProfileActions.ts:  const handleSubscribeClick = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/profile/useProfileActions.ts:    toast.info("Subscription functionality will be implemented here");
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/profile/useProfileActions.ts:  const handlePrivacyToggle = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/profile/useFollowActions.ts:export function useFollowActions(userId?: string) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/profile/useFollowActions.ts:    const checkFollowStatus = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/profile/useFollowActions.ts:  const handleFollowToggle = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useNotifications.ts:export const useNotifications = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useNotifications.ts:  const fetchNotifications = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useNotifications.ts:      const typedNotifications = (data || []).map((item: unknown) => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useNotifications.ts:  const markAsRead = async (notificationId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useNotifications.ts:  const markAllAsRead = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useNotifications.ts:  const deleteNotification = async (notificationId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useNotifications.ts:      const wasUnread = notifications.find(n => n.id === notificationId)?.read === false;
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useNotifications.ts:    const subscriptionTimeout = setTimeout(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/usePlatformCredits.ts:const fetchPlatformCredits = async (userId?: string): Promise<CreditData | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/usePlatformCredits.ts:    const mappedTransactions = (transactions || []).map(tx => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/usePlatformCredits.ts:export const usePlatformCredits = (userId?: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/usePlatformCredits.ts:  const spendCredits = async (amount: number, description: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useLocationsManagement.ts:export const useLocationsManagement = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useLocationsManagement.ts:  const fetchLocations = useCallback(async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useLocationsManagement.ts:  const createLocation = useCallback(async (locationData: LocationFormData) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useLocationsManagement.ts:  const updateLocation = useCallback(async (id: string, locationData: Partial<LocationFormData>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useLocationsManagement.ts:  const deleteLocation = useCallback(async (id: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/usePromotionalCredits.ts:export const usePromotionalCredits = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/usePromotionalCredits.ts:  const fetchCredits = async (): Promise<PromotionCredit[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/wallet/useReferrals.tsx:export const useReferrals = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/wallet/useReferrals.tsx:  const getUserReferralCode = async (userId: string): Promise<string> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/wallet/useReferrals.tsx:  const getReferralStats = async (userId: string): Promise<ReferralStats> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/wallet/useReferrals.tsx:      const activeReferrals = referrals?.filter(r => r.status === 'completed')?.length || 0;
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/wallet/useReferrals.tsx:      const pendingReferrals = referrals?.filter(r => r.status === 'pending')?.length || 0;
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/wallet/useReferrals.tsx:      const earnings = transactions?.reduce((sum, tx) => sum + (tx.amount || 0), 0) || 0;
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/wallet/useReferrals.tsx:  const loadReferralData = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/wallet/useWalletOperations.tsx: * Real database-powered wallet functionality with Stripe integration.
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/wallet/useWalletOperations.tsx:export const useWalletOperations = (userId?: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/wallet/useWalletOperations.tsx:      const { data: paymentIntent, error: piError } = await supabase.functions.invoke('create-payment-intent', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/wallet/useWalletBalance.tsx:export const useWalletBalance = (userId: string | undefined) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/wallet/useWalletBalance.tsx:  const loadBalance = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/wallet/usePaymentMethods.tsx:export const usePaymentMethods = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/wallet/usePaymentMethods.tsx:  const fetchPaymentMethods = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/wallet/usePaymentMethods.tsx:  const addCard = async (cardNumber: string, expiryMonth: string, expiryYear: string, cvc: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/wallet/usePaymentMethods.tsx:  const redirectToStripeConnect = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/wallet/usePaymentMethods.tsx:  const removePaymentMethod = async (methodId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/wallet/usePaymentMethods.tsx:      const updatedMethods = paymentMethods.filter(method => method.id !== methodId);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/wallet/usePaymentMethods.tsx:  const setDefaultMethod = async (methodId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/wallet/usePaymentMethods.tsx:      const updatedMethods = paymentMethods.map(method => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/wallet/usePaymentMethods.tsx:  // Helper function to determine card brand from number
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/wallet/usePaymentMethods.tsx:  const getCardBrand = (cardNumber: string): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/wallet/useWalletTransactions.tsx:export const useWalletTransactions = (pageSize: number = 20): UseWalletTransactionsResult => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/wallet/useWalletTransactions.tsx:    const fetchTransactions = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/wallet/useWalletTransactions.tsx:        const transformedData: Transaction[] = (data || []).map(item => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useRecords.ts:export const useRecords = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useRecords.ts:    const fetchRecords = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useRecords.ts:        const recordsData = (artistsData || []).map(artist => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useRecords.ts:  const addArtist = async (artistData: Omit<Artist, 'id' | 'createdAt'>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useRecords.ts:  const updateArtist = async (id: string, updates: Partial<Artist>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useRecords.ts:  const deleteArtist = async (id: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useRecords.ts:  const addAlbum = async (albumData: Omit<Album, 'id' | 'createdAt'>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useRecords.ts:  const updateAlbum = async (id: string, updates: Partial<Album>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useRecords.ts:  const deleteAlbum = async (id: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useRecords.ts:    refetch: () => {} // Mock refetch function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useProjects.ts:const fetchProjects = async (): Promise<Project[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useProjects.ts:export const useProjects = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useStoreManagement.ts:export const useStoreManagement = (userId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useStoreManagement.ts:  const handleStoreCreation = async (value: boolean): Promise<void> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/podcast/useRecorderManager.ts:export const useRecorderManager = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/podcast/useRecorderManager.ts:  const createTracks = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/podcast/useRecorderManager.ts:  const destroyTracks = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/podcast/usePodcastRecorder.ts:export const usePodcastRecorder = (options?: unknown): PodcastRecorderHookReturn => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/podcast/usePodcastRecorder.ts:  const startRecording = async (): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/podcast/usePodcastRecorder.ts:  const pauseRecording = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/podcast/usePodcastRecorder.ts:  const resumeRecording = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/podcast/usePodcastRecorder.ts:  const stopRecording = async (): Promise<Blob | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/podcast/usePodcastRecorder.ts:  const leaveRoom = async (): Promise<void> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/podcast/usePodcastRecorder.ts:  const handleSaveRecording = async (): Promise<void> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/podcast/usePodcastRecorder.ts:  const toggleAudio = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/podcast/usePodcastRecorder.ts:  const toggleVideo = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/podcast/useRecordingControls.ts:export const useRecordingControls = (localTracks: ILocalTrack[]) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/podcast/useRecordingControls.ts:  const toggleAudio = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/podcast/useRecordingControls.ts:  const toggleVideo = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/podcast/useLivekitPodcastRecorder.tsx:export function useLivekitPodcastRecorder(options: PodcastRecorderOptions) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/podcast/useLivekitPodcastRecorder.tsx:  // Clean up function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/podcast/useLivekitPodcastRecorder.tsx:  const cleanup = useCallback(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/podcast/useLivekitPodcastRecorder.tsx:  const setupRoomListeners = useCallback((room: Room) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/podcast/useLivekitPodcastRecorder.tsx:  const startRecording = useCallback(async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/podcast/useLivekitPodcastRecorder.tsx:  const stopRecording = useCallback(async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/podcast/useLivekitPodcastRecorder.tsx:  const toggleAudio = useCallback(async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/podcast/useRecordingState.ts:export const useRecordingState = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/podcast/useRecordingState.ts:  const startRecording = useCallback(async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/podcast/useRecordingState.ts:  const stopRecording = useCallback(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/podcast/useRecordingState.ts:  const pauseRecording = useCallback(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/podcast/useRecordingState.ts:  const resumeRecording = useCallback(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/podcast/useRecordingState.ts:  const uploadRecording = useCallback(async (fileName: string): Promise<string> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/podcast/useRecordingState.ts:  const deleteRecording = useCallback(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/podcast/useRecordingState.ts:  const getRecordingDuration = useCallback(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/podcast/useRecordingState.ts:  const getRecordingSize = useCallback(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/podcast/utils.ts:export const formatDuration = (seconds: number): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/podcast/utils.ts:export const createMediaRecorderOptions = (): MediaRecorderOptions => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/podcast/usePodcastCache.ts:export const usePodcastCache = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/podcast/usePodcastCache.ts:  const prefetchPodcast = useCallback(async (podcastId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/podcast/usePodcastCache.ts:  const invalidatePodcast = useCallback((podcastId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/podcast/usePodcastCache.ts:  const invalidatePodcastsList = useCallback(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/podcast/usePodcastForm.ts:export const usePodcastForm = (user: User | null) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/podcast/usePodcastForm.ts:  const onSubmit = async (values: PodcastFormValues) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/podcast/useRecorderPreview.ts:export const useRecorderPreview = (localTracks: ILocalTrack[]) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/podcast/useRecorderPreview.ts:  const startPreview = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/podcast/useRecorderPreview.ts:  const stopPreview = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/podcast/usePermissions.ts:export const usePermissions = (requiresVideo: boolean) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/podcast/usePermissions.ts:  const checkPermissions = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/podcast/usePermissions.ts:  const requestPermissions = async (): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/podcast/usePermissions.ts:  const openPermissionSettings = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useEvent.ts:export const useEvent = (eventId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useEvent.ts:  const fetchEvent = async (): Promise<Event | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useKeyboardShortcuts.ts:  const handleKeyDown = useCallback((event: KeyboardEvent) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useKeyboardShortcuts.ts:    const matchingShortcut = shortcutsRef.current.find(shortcut => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useKeyboardShortcuts.ts:  const getShortcutsList = useCallback(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useKeyboardShortcuts.ts:// Common shortcuts factory functions
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useKeyboardShortcuts.ts:export const createSaveShortcut = (callback: () => void): KeyboardShortcut => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useKeyboardShortcuts.ts:export const createSubmitShortcut = (callback: () => void): KeyboardShortcut => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useKeyboardShortcuts.ts:export const createCancelShortcut = (callback: () => void): KeyboardShortcut => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useKeyboardShortcuts.ts:export const createSearchShortcut = (callback: () => void): KeyboardShortcut => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useSubscriptionPayment.ts:  const handleCheckout = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useCreatorSubscription.ts:export const useCreatorSubscription = (userId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useCreatorSubscription.ts:    const fetchEligibility = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useCreatorSubscription.ts:  const updateSubscriptionEligibility = async (isEligible: boolean): Promise<void> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useCaterer.ts:export const useCaterers = (params: CatererService.CatererSearchParams = {}) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useCaterer.ts:export const useCatererDetails = (id: string | undefined) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useCaterer.ts:export const useFeaturedCaterers = (limit = 6) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useCaterer.ts:export const useCatererMenus = (catererId: string | undefined) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useCaterer.ts:export const useCatererReviews = (catererId: string | undefined, page = 1, pageSize = 10) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useCaterer.ts:export const useCatererSearchSuggestions = (query: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useCaterer.ts:export const useCreateCaterer = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useCaterer.ts:export const useUpdateCaterer = (catererId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useCaterer.ts:export const useDeleteCaterer = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useCaterer.ts:export const useCreateCatererMenu = (catererId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useCaterer.ts:export const useCreateCatererReview = (catererId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useConnect.ts:export const useConnect = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useConnect.ts:  const checkStripeConnectAccount = async (userId?: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useStripeConnect.ts:import { getConnectAccountStatus } from '@/services/supabase/edge-functions';
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useStripeConnect.ts:export const useStripeConnect = (): UseStripeConnectReturn => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useStripeConnect.ts:  const fetchStripeStatus = async (): Promise<StripeConnectData> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useStripeConnect.ts:        // Fallback to database-only check if edge function fails
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useEventDetails.ts:export const useEventDetails = (eventId: string, userId?: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useEventDetails.ts:export const useUserRegisteredEvents = (userId?: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useEventDetails.ts:export const useUserFavoriteEvents = (userId?: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useExploreParams.tsx:export const useExploreParams = (defaultLocation: string = "All locations") => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useExploreParams.tsx:  const updateParams = useCallback((updates: Partial<ExploreParams>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useNotificationsCount.ts:export const useNotificationsCount = (userId: string | undefined) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useNotificationsCount.ts:    const fetchCount = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useNotificationsCount.ts:      return () => {}; // Return empty function as fallback
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useDataFetch.ts: * @param fetchFn - The async function that fetches the data
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useDataFetch.ts:export function useDataFetch<T>(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useDataFetch.ts:  const fetchData = useCallback(async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useDataFetch.ts:  // Retry function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useDataFetch.ts:  const retry = useCallback(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useDataFetch.ts:  // Refetch function (alias for fetchData)
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useDataFetch.ts:  const refetch = useCallback(async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useDataFetch.ts:// For Supabase queries, users can create their own fetch functions like:
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useDataFetch.ts:// const fetchUsers = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useLocations.ts:export const useUserLocationEvents = (userId: string | undefined) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useLocations.ts:  const changeLocation = (lat: number, lng: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/usePromotionData.ts:const fetchPromotions = async (): Promise<Promotion[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/usePromotionData.ts:export const usePromotionData = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useIdentityVerification.tsx:export const useIdentityVerification = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useIdentityVerification.tsx:    const checkStatus = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useIdentityVerification.tsx:  const startVerification = async (returnUrl: string): Promise<string | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useIdentityVerification.tsx:  const refreshStatus = async (): Promise<void> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/event/useEventSubmission.ts:export const useEventSubmission = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/event/useEventSubmission.ts:  const handleSubmit = async (values: EventFormValues) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/event/useEventSubmission.ts:      const processedTiers = (values.sponsorshipTiers || []).map(tier => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/event/useEventSubmission.ts:      const collaborators: EventCollaborator[] = (values.collaborators || []).map(collaborator => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/event/useEventFormValidation.ts:export const useEventFormValidation = (communityId?: string, communityName?: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/event/useEventFormValidation.ts:    const subscription = form.watch((value, { name }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useAdminUsers.ts:const mapDbUserToAdminUser = (user: unknown, profile?: unknown): AdminUser => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useAdminUsers.ts:export const useAdminUsers = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useAdminUsers.ts:  const fetchUsers = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useAdminUsers.ts:      // Fetch all users using Supabase admin functions
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useAdminUsers.ts:      const { data: usersData, error: usersError } = await supabase.functions.invoke('getUsers', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useAdminUsers.ts:      const profilesMap = (profilesData || []).reduce((acc: Record<string, unknown>, profile: unknown) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useAdminUsers.ts:      const mappedUsers = (usersData?.users || []).map((user: unknown) => 
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useAdminUsers.ts:  const suspendUser = async (userId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useAdminUsers.ts:      const { data, error } = await supabase.functions.invoke('banUser', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useAdminUsers.ts:  const reactivateUser = async (userId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useAdminUsers.ts:      const { data, error } = await supabase.functions.invoke('banUser', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/usePurchaseVerification.tsx:    const verifyPurchase = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useReportedEvents.ts:const fetchReportedEvents = async (): Promise<ReportedEvent[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useReportedEvents.ts:export const useReportedEvents = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useVenues.tsx:export const useVenues = (initialFilters: VenueFilters = {}) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useVenues.tsx:  const updateFilters = (newFilters: Partial<VenueFilters>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useVenues.tsx:  const handleUpdateVenueStatus = async (venueId: string, status: 'pending' | 'active' | 'suspended') => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useVenues.tsx:  const handleToggleFeatured = async (venueId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useVenues.tsx:    // Add the new functions
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useRobustFormDraft.ts:   * Enable or disable draft functionality
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useRobustFormDraft.ts:export function useRobustFormDraft<T extends object>({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useRobustFormDraft.ts:  const processFormData = (data: unknown, isLoading = false): T => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useRobustFormDraft.ts:    const subscription = form.watch((values) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useRobustFormDraft.ts:      const timeoutId = window.setTimeout(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useRobustFormDraft.ts:  const clearDraft = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useCatererPrice.ts:      const menu = caterer.menus.find(menu => menu.id === selectedMenuId);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useAnalytics.ts:export const useAnalytics = (page: string, title?: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useAnalytics.ts:  const trackEvent = (event: string, properties?: Record<string, unknown>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/useAnalytics.ts:  const track = (event: string, properties?: Record<string, unknown>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/hooks/usePageTracking.ts:export const usePageTracking = (pathname: string, pageTitle?: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/config/environment.ts:// Validation function to check if required environment variables are set
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/config/environment.ts:export const validateConfig = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/admin/albums.ts:export const fetchAlbums = async (): Promise<Album[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/admin/albums.ts:export const createAlbum = async (albumData: Partial<Album>): Promise<Album | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/admin/albums.ts:export const updateAlbum = async (albumId: string, albumData: Partial<Album>): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/admin/albums.ts:export const deleteAlbum = async (albumId: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/admin/artists.ts:export const fetchArtists = async (): Promise<Artist[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/admin/artists.ts:export const createArtist = async (artistData: Partial<Artist>): Promise<Artist | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/admin/artists.ts:export const updateArtist = async (artistId: string, artistData: Partial<Artist>): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/admin/artists.ts:export const deleteArtist = async (artistId: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/admin/signedArtists.ts:export const fetchSignedArtists = async (): Promise<SignedArtist[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/admin/signedArtists.ts:export const addSignedArtist = async (artist: Omit<SignedArtist, 'id' | 'signedDate'>): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/admin/signedArtists.ts:export const updateSignedArtist = async (id: string, updates: Partial<SignedArtist>): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/admin/signedArtists.ts:export const removeSignedArtist = async (id: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/admin/settings.ts:export const fetchAdminSettings = async (): Promise<AdminSettings | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/admin/settings.ts:export const updateAdminSettings = async (settings: Partial<AdminSettings>): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/admin/categories.ts:export const fetchCategories = async (): Promise<Category[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/admin/categories.ts:export const createCategory = async (categoryData: Partial<Category>): Promise<Category | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/admin/categories.ts:export const updateCategory = async (categoryId: string, categoryData: Partial<Category>): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/admin/categories.ts:export const deleteCategory = async (categoryId: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/utils.ts:export function cn(...inputs: ClassValue[]) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/utils.ts:export function formatDate(date: Date): string {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/utils.ts:export function formatDateTime(date: Date): string {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/utils.ts:export function formatNumber(num: number): string {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/utils.ts:export function formatCurrency(amount: number): string {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/utils.ts:export function classNames(...classes: (string | boolean | undefined | null)[]): string {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/utils.ts:export function truncate(str: string, length: number): string {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/utils.ts:export function calculateTimeAgo(date: Date): string {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/utils.ts:export function generateInitials(name: string): string {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/utils.ts:  const names = name.split(' ').filter(n => n.length > 0);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/utils.ts:export function parseDate(dateString: string): Date {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/utils.ts:export function dateToString(date: Date | string): string {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/utils.ts:export function stringToDate(dateStr: string | Date): Date {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/validations/postValidation.ts:// Helper functions
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/validations/postValidation.ts:export const extractMentions = (content: string): string[] => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/validations/postValidation.ts:export const extractHashtags = (content: string): string[] => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/validations/postValidation.ts:export const validateMediaFile = (file: File, type: 'image' | 'video' | 'audio') => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/validations/eventValidation.ts:    const dates = data.tourDates.map(td => new Date(td.date));
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/validations/subscriptionValidation.ts:// Helper functions
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/validations/subscriptionValidation.ts:export const formatCardNumber = (value: string): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/validations/subscriptionValidation.ts:export const validateCardNumber = (cardNumber: string): boolean => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/validations/subscriptionValidation.ts:export const getCardType = (cardNumber: string): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/validations/subscriptionValidation.ts:  const addonTotal = addons.reduce((sum, addon) => sum + (addon.price * addon.quantity), 0);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/validations/commentValidation.ts:// Helper functions
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/validations/commentValidation.ts:export const extractMentionsFromComment = (content: string): string[] => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/validations/commentValidation.ts:export const formatCommentTime = (date: Date): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/validations/commentValidation.ts:export const calculateCommentDepth = (comment: unknown, comments: unknown[]): number => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/validations/reportValidation.ts:// Helper functions for report forms
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/validations/reportValidation.ts:export const getReportReasonLabel = (reason: string): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/validations/checkoutValidation.ts:// Helper functions
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/validations/checkoutValidation.ts:export const formatCardNumber = (value: string): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/validations/checkoutValidation.ts:export const getCardType = (number: string): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/validations/supportValidation.ts:// Helper functions
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/validations/supportValidation.ts:export const getCategoryIcon = (category: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/validations/supportValidation.ts:export const getPriorityColor = (priority: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/validations/supportValidation.ts:export const getStatusColor = (status: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/validations/shared.ts:// Helper function to create enum validation
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/validations/settingsValidation.ts:    cookiePreferences: z.enum(['essential', 'functional', 'all']),
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/validations/settingsValidation.ts:    cookiePreferences: 'functional' as const,
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/validations/transferValidation.ts:  const calculatedTotal = data.recipients.reduce((sum, r) => sum + r.amount, 0);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/validations/transferValidation.ts:// Helper functions
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/validations/transferValidation.ts:export const calculateTransferFee = (amount: number, type: 'instant' | 'standard' | 'scheduled'): number => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/validations/analyticsValidation.ts:// Helper functions
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/validations/analyticsValidation.ts:export const getDateRangeFromPreset = (preset: string): { start: Date; end: Date } => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/validations/analyticsValidation.ts:export const getMetricIcon = (metric: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/react-query-config.ts:export function createOptimizedQueryClient(): QueryClient {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/react-query-config.ts: * Utility function to invalidate related queries
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/react-query-config.ts:export function invalidateRelatedQueries(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/lib/react-query-config.ts:export function prefetchData(queryClient: QueryClient, userId?: string) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Settings.tsx:const Settings = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Settings.tsx:    const loadSettings = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Settings.tsx:  const handleSaveSettings = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Settings.tsx:  const handlePasswordChange = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Settings.tsx:  const handleDeleteAccount = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Settings.tsx:  const handleExportData = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Settings.tsx:  const handlePaymentPreferencesChange = (preferences: typeof paymentPreferences) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Settings.tsx:  const handleSavePaymentPreferences = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Projects.tsx:const useProjects = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Projects.tsx:  const fetchProjects = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Projects.tsx:      const processedProjects = await Promise.all((data || []).map(async (project) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Projects.tsx:  const retry = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Projects.tsx:const ProjectCard: React.FC<ProjectCardProps> = ({ project, onJoinToggle }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Projects.tsx:  const getStatusColor = (status: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Projects.tsx:  const handleJoinToggle = async (e: React.MouseEvent) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Projects.tsx:  const handleViewDetails = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Projects.tsx:const Projects: React.FC = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Projects.tsx:  const handleJoinToggle = async (projectId: string, shouldJoin: boolean) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/EditEvent.tsx:const EditEvent = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/EditEvent.tsx:  const loadEventData = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/EditEvent.tsx:  const loadVenues = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/EditEvent.tsx:  const validateForm = (): boolean => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/EditEvent.tsx:  const handleSave = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/EditEvent.tsx:  const handleDelete = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/EditEvent.tsx:  const handleInputChange = (field: keyof EventFormData, value: unknown) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/VenueVerificationComplete.tsx:const VenueVerificationComplete = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/VenueVerificationComplete.tsx:    const checkStatus = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/VenueVerificationComplete.tsx:  const handleContinue = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/VenueVerificationComplete.tsx:  const handleTryAgain = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Index.tsx:const Index = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Index.tsx:    const handleScroll = debounce(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Index.tsx:  const handleLocationSelect = (location: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Index.tsx:  const handleRefreshLocation = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Index.tsx:  const handleCancelLocationPrompt = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Index.tsx:  const handleCategorySelect = (category: string | null) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Index.tsx:  const handleCreateEventClick = (e?: React.MouseEvent) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/StripeConnectComplete.tsx:const StripeConnectComplete = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/StripeConnectComplete.tsx:    const handleConnectResult = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/StripeConnectComplete.tsx:  const handleContinue = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/StripeConnectComplete.tsx:  const handleRetry = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Records.tsx:const Records = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/EventDetails.tsx:const EventDetailsSection = lazy(() => import('@/components/events/EventDetailsSection'));
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/EventDetails.tsx:const SponsorshipSection = lazy(() => import('@/components/events/SponsorshipSection'));
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/EventDetails.tsx:const TourDatesDisplay = lazy(() => import('@/components/events/TourDatesDisplay'));
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/EventDetails.tsx:const EventDetailsSkeleton = () => (
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/EventDetails.tsx:const EventDetails: React.FC = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/EventDetails.tsx:  const generateSEOData = (event: unknown) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CreateProduct.tsx:const CreateProduct = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CreateProduct.tsx:  // Undo/Redo functionality
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CreateProduct.tsx:  const handleSubmit = async (values: ProductFormValues) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CreateProduct.tsx:  const handleSaveDraft = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CreateProduct.tsx:  const nextStep = () => setCurrentStep(Math.min(steps.length - 1, currentStep + 1));
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CreateProduct.tsx:  const prevStep = () => setCurrentStep(Math.max(0, currentStep - 1));
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CreateProduct.tsx:  const addTag = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CreateProduct.tsx:  const removeTag = (tagToRemove: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CreateProduct.tsx:  const addImage = (url: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CreateProduct.tsx:  const removeImage = (imageId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CreateProduct.tsx:    const updatedImages = currentImages.filter(img => img.id !== imageId);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CreateProduct.tsx:  const setPrimaryImage = (imageId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CreateProduct.tsx:  const categoryOptions: SearchSelectOption[] = Object.entries(ProductCategory).map(([key, value]) => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CreateProduct.tsx:  const statusOptions = Object.entries(ProductStatus).map(([key, value]) => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CreateProduct.tsx:  const shippingTypeOptions = Object.entries(ShippingType).map(([key, value]) => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Podcasts.tsx:const Podcasts = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Podcasts.tsx:  const fetchPodcasts = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Podcasts.tsx:      const creatorIds = [...new Set(podcastsData?.map(p => p.creator_id).filter(Boolean))];
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Podcasts.tsx:      const transformedPodcasts: Podcast[] = (podcastsData || []).map(podcast => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Podcasts.tsx:        const creator = usersData.find(u => u.id === podcast.creator_id);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Podcasts.tsx:  const filteredPodcasts = allPodcasts.filter(podcast => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Podcasts.tsx:  const sortedPodcasts = [...filteredPodcasts].sort((a, b) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Podcasts.tsx:  const formatDuration = (seconds: number): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Podcasts.tsx:  const handleCategorySelect = (category: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Store.tsx:const Store = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Store.tsx:    const loadStoreData = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Store.tsx:        const transformedProducts: Product[] = (productsData || []).map(product => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Store.tsx:  const filterProducts = (allProducts: Product[], query: string, tab: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Store.tsx:  const handleSearch = (term: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Store.tsx:  const handleTabChange = (tab: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Store.tsx:  const handleSortChange = (order: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/HelpCenter.tsx:const HelpCenter = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/EmailConfirm.tsx:const EmailConfirm = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/EmailConfirm.tsx:    const confirmEmail = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/EmailConfirm.tsx:  const handleRetry = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CatererBookingManagement.tsx:const CatererBookingManagement: React.FC = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/VenueBookingManagement.tsx:const VenueBookingManagement: React.FC = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CreatePromotion.tsx:const CreatePromotion = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CreatePromotion.tsx:  const fetchAvailableCredits = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CreatePromotion.tsx:      const total = data?.reduce((sum, credit) => sum + credit.remaining_amount, 0) || 0;
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CreatePromotion.tsx:  const fetchPromotableItems = async (type: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CreatePromotion.tsx:  const calculateEstimates = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CreatePromotion.tsx:  const onSubmit = async (data: PromotionFormData) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CreatePromotion.tsx:      const { data: paymentResult, error: paymentError } = await supabase.functions.invoke(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Login.tsx:const Login = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Login.tsx:  const handleLogin = async (values: LoginFormValues) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Login.tsx:  const handleRegister = async (values: RegisterFormValues) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/PrivacyPolicy.tsx:const PrivacyPolicy = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/PrivacyPolicy.tsx:                  <li><strong>Essential Cookies:</strong> Required for basic functionality</li>
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Wallet.tsx:const WalletPage = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Wallet.tsx:  const [selectedTab, setSelectedTab] = useState(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Wallet.tsx:  const loadTransactions = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Wallet.tsx:      const transformedTransactions: Transaction[] = (transactionData || []).map(transaction => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Wallet.tsx:  // Helper function to get user-friendly transaction descriptions
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Wallet.tsx:  const getTransactionDescription = (type: string): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Wallet.tsx:  // Helper function to map database status to component status
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Wallet.tsx:  const mapTransactionStatus = (dbStatus: string): 'completed' | 'pending' | 'failed' => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Wallet.tsx:  const handleRefresh = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Wallet.tsx:  const handleWithdraw = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Wallet.tsx:  const handleTransferToUser = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Wallet.tsx:  const handleAddFunds = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Wallet.tsx:  const handleManageBankAccount = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Wallet.tsx:  const exportTransactions = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Wallet.tsx:  const handleTabChange = (newTab: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Dashboard.tsx:const Dashboard = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Dashboard.tsx:  const loadDashboardData = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Dashboard.tsx:      const userOrders = orders?.filter(order => 
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Dashboard.tsx:      const totalRevenue = userOrders.reduce((sum, order) => 
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Dashboard.tsx:      const prevUserOrders = prevOrders?.filter(order => 
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Dashboard.tsx:      const prevRevenue = prevUserOrders.reduce((sum, order) => 
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Dashboard.tsx:      const totalViews = events?.reduce((sum, event) => sum + (event.attendees_count || 0), 0) || 0;
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Dashboard.tsx:      const prevTotalViews = prevEvents?.reduce((sum, event) => sum + (event.attendees_count || 0), 0) || 0;
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Dashboard.tsx:  const handleRefresh = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Dashboard.tsx:  const handleExportData = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Dashboard.tsx:      const csvContent = csvData.map(row => row.join(',')).join('\n');
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Dashboard.tsx:  const formatCurrency = (amount: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Dashboard.tsx:  const formatPercentage = (value: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Dashboard.tsx:  const getTrendIcon = (change: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Dashboard.tsx:  const getTrendColor = (change: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Dashboard.tsx:  const getActivityIcon = (type: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Dashboard.tsx:  const formatTimeAgo = (date: Date) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CreateEvent.tsx:const CreateEvent = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CreatePodcast.tsx:const CreatePodcast = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CreatePodcast.tsx:  const handlePodcastCreated = (podcastId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CreatePodcast.tsx:  const handleUpgrade = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/PaymentCancelled.tsx:const PaymentCancelled = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CreateCommunity.tsx:const CreateCommunity = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CreateCommunity.tsx:  const handleSuccess = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Studios.tsx:const Studios = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/ForSponsors.tsx:const ForSponsors = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/StripeConnectTest.tsx:const StripeConnectTest: React.FC = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/StripeConnectTest.tsx:              Debug and test Stripe Connect functionality
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/StripeConnectTest.tsx:                Use the debug component in the bottom-left corner to test Stripe Connect functionality.
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/StripeConnectTest.tsx:                    <li>Edge function connectivity test</li>
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/StripeConnectTest.tsx:                    <li>Check edge function test results</li>
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Home.tsx:const Home = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/PublicVenues.tsx:const PublicVenues = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/PublicVenues.tsx:    const fetchVenues = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/PublicVenues.tsx:        const transformedVenues: Venue[] = (data || []).map(venue => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/PublicVenues.tsx:  const filteredVenues = venues.filter(venue => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/PublicVenues.tsx:  const sortedVenues = [...filteredVenues].sort((a, b) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/PublicVenues.tsx:  const transformToDisplayVenues = (venues: Venue[]): DisplayVenue[] => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/PublicVenues.tsx:  const featuredVenues = venues.filter(v => v.featured);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/PublicVenues.tsx:  const availableVenues = venues.filter(v => v.availability === 'available');
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/PublicVenues.tsx:  const clearFilters = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Contact.tsx:const Contact = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Contact.tsx:  const onSubmit = async (data: ContactFormData) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Management.tsx:const Management = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/ForCreators.tsx:const ForCreators = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/ForCreators.tsx:  const handleCreateEventClick = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Create.tsx:const Create = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Create.tsx:  const handleOptionClick = (option: CreateOption) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Create.tsx:  const getAvailableOptions = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Create.tsx:  const canCreateOption = (option: CreateOption) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CommunityDetail.tsx:const CommunityDetail = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CommunityDetail.tsx:  const handleJoin = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CommunityDetail.tsx:  const handleLeave = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CommunityDetail.tsx:  const handleCreatePost = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CommunityDetail.tsx:  const handleDeletePost = async (postId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CommunityDetail.tsx:  const handleTogglePin = async (postId: string, isPinned: boolean) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CommunityDetail.tsx:  const getInitials = (name: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/ProjectDetail.tsx:const ProjectDetail: React.FC = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/ProjectDetail.tsx:  const fetchProject = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/ProjectDetail.tsx:        const membership = membersData.find(m => m.user_id === user.id);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/ProjectDetail.tsx:  const handleJoinProject = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/ProjectDetail.tsx:  const handleLeaveProject = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/ProjectDetail.tsx:  const formatDate = (dateString: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/ProjectDetail.tsx:  const formatCurrency = (amount: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Community.tsx:const Community = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Community.tsx:  const handleSearch = (value: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Community.tsx:  const handleCategoryChange = (category: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Community.tsx:  const handleJoinCommunity = (communityId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Community.tsx:  const CommunityGrid = ({ communities, isLoading }: { communities: any[], isLoading: boolean }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminCaterers.tsx:const AdminCaterers = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminCaterers.tsx:  const getStatusVariant = (status?: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminCaterers.tsx:  const handleApprove = (id: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminCaterers.tsx:  const handleReject = (id: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminCaterers.tsx:  const handleSuspend = (id: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminLogin.tsx:export default function AdminLogin() {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminLogin.tsx:  const onSubmit = async (values: LoginFormValues) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminReportedEvents.tsx:const AdminReportedEvents = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminReportedEvents.tsx:  const handleStatusFilter = (status: 'pending' | 'approved' | 'rejected' | 'reviewed' | 'resolved' | 'dismissed' | 'all') => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminReportedEvents.tsx:  const handleUpdateStatus = async (reportId: string, status: 'pending' | 'approved' | 'rejected' | 'reviewed' | 'resolved' | 'dismissed') => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminReportedEvents.tsx:  const handleDeleteReport = async (reportId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminCredits.tsx:const AdminCredits = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminCredits.tsx:  const handleSubmit = (e: React.FormEvent) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminCredits.tsx:  const getStatusColor = (status: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminCredits.tsx:  const totalCreditsValue = credits.reduce((sum, credit) => sum + credit.remainingAmount, 0);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminCredits.tsx:  const activeCredits = credits.filter(c => c.status === 'active').length;
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminReferrals.tsx:const AdminReferrals = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminReferrals.tsx:  const getStatusColor = (status: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminReferrals.tsx:  const formatCurrency = (amount: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminReferrals.tsx:  const getUserDisplayName = (user?: { name?: string; display_name?: string; email?: string }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminEvents.tsx:const AdminEvents = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminEvents.tsx:  const getStatusVariant = (status?: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminReports.tsx:const AdminReports = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminReports.tsx:      const totalRevenue = payments?.reduce((sum, payment) => sum + (payment.amount_in_cents || 0), 0) || 0;
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminReports.tsx:      const recentPayments = payments?.slice(-10).map(payment => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminReports.tsx:  const formatCurrency = (amount: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminPromotions.tsx:const AdminPromotions = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminPromotions.tsx:  const refreshData = useCallback(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminPromotions.tsx:  const fetchPromotions = async (): Promise<AdminPromotionSettings[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminPromotions.tsx:  const pendingPromotions = promotions.filter(p => p.status === "pending");
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminPromotions.tsx:  const activePromotions = promotions.filter(p => p.status === "active");
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminPromotions.tsx:  const handleApprove = async (id: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminPromotions.tsx:  const handleReject = async (id: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminPromotions.tsx:  const getTotalItems = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminPageContent.tsx:const usePageContent = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminPageContent.tsx:    const loadPages = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminPageContent.tsx:  const updatePage = async (pageId: string, pageData: PageData) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminPageContent.tsx:const AdminPageContent = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminPageContent.tsx:  const handleSave = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminPageContent.tsx:  const handleTabChange = (value: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminPageContent.tsx:  const confirmTabChange = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminPageContent.tsx:  const handleTitleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminPageContent.tsx:  const handleSubtitleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminPageContent.tsx:  const handleUpdateDateChange = (e: React.ChangeEvent<HTMLInputElement>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminPageContent.tsx:  const handleSectionTitleChange = (index: number, value: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminPageContent.tsx:  const handleSectionContentChange = (index: number, value: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminPageContent.tsx:  const handleAddSection = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminPageContent.tsx:  const handleRemoveSection = (index: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminUsers.tsx:const AdminUsers = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminUsers.tsx:  const handleAdminToggle = (user: User, action: 'grant' | 'revoke') => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminUsers.tsx:  const confirmAdminToggle = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminSettings.tsx:const AdminSettings = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminPlatformCredits.tsx:const AdminPlatformCredits = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminPlatformCredits.tsx:  const totalCredits = users.reduce((sum, user) => sum + user.wallet_balance_cents, 0) / 100;
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminPlatformCredits.tsx:  const usersWithCredits = users.filter(user => user.wallet_balance_cents > 0).length;
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminPlatformCredits.tsx:  const handleManageCredits = (user: User) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminPlatformCredits.tsx:  const handleUpdateCredits = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminPlatformCredits.tsx:  const handleQuickAdjustment = (amount: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminPlatformCredits.tsx:  const getUserDisplayName = (user: User) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminPlatformCredits.tsx:  const filteredUsers = users.filter(user => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminLocations.tsx:export default function AdminLocations() {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminLocations.tsx:  const resetForm = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminLocations.tsx:  const handleEdit = (location: Location) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminLocations.tsx:  const handleSubmit = (e: React.FormEvent) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminLocations.tsx:  const handleDelete = (id: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminVenues.tsx:const AdminVenues = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminVenues.tsx:  const fetchVenues = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminVenues.tsx:      const transformedData: VenueWithLocation[] = (data || []).map((item: unknown) => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminVenues.tsx:      const filtered = venues.filter(venue => 
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminVenues.tsx:  const updateVenueStatus = async (venueId: string, status: 'active' | 'suspended' | 'rejected') => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminVenues.tsx:  const toggleFeatured = async (venueId: string, featured: boolean) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminVenues.tsx:  const deleteVenue = async (venueId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminVenues.tsx:  const handleAction = (venueId: string, type: 'approve' | 'suspend' | 'delete') => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminVenues.tsx:  const executeAction = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminVenues.tsx:  const closeConfirmDialog = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminVenues.tsx:  const getStatusBadge = (status: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminVenues.tsx:  const getVenuesByStatus = (status: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminVenues.tsx:  const VenueRow = ({ venue }: { venue: VenueWithLocation }) => (
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminRegister.tsx:const AdminRegister = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminRegister.tsx:  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminRegister.tsx:  const handleSubmit = async (e: React.FormEvent) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminCategories.tsx:// Real database functions
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminCategories.tsx:const getCategories = async (): Promise<Category[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminCategories.tsx:const createCategory = async (category: Omit<Category, 'id' | 'createdAt' | 'updatedAt' | 'venueCount'>): Promise<Category> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminCategories.tsx:const updateCategory = async (id: string, updates: Partial<Category>): Promise<Category> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminCategories.tsx:const deleteCategory = async (id: string): Promise<void> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminCategories.tsx:const AdminCategories = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminCategories.tsx:  const fetchCategories = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminCategories.tsx:  const handleAddCategory = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminCategories.tsx:  const handleEditCategory = (category: Category) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminCategories.tsx:  const handleSaveCategory = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminCategories.tsx:  const handleDeleteCategory = async (categoryId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminDashboard.tsx:const AdminDashboard = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminDashboard.tsx:      const totalRevenue = payments?.reduce((sum, payment) => sum + (payment.amount_in_cents || 0), 0) || 0;
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminDashboard.tsx:  const formatCurrency = (amount: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/admin/AdminDashboard.tsx:  const formatTimeAgo = (date: Date) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Artists.tsx:const Artists = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Artists.tsx:    const fetchArtists = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Artists.tsx:  const filteredArtists = artists.filter(artist => 
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Artists.tsx:  const formatFollowers = (count?: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/AddPaymentMethod.tsx:const AddPaymentMethod = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/AddPaymentMethod.tsx:  const handleInputChange = (field: string, value: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/AddPaymentMethod.tsx:  const formatCardNumber = (value: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/AddPaymentMethod.tsx:  const handleCardNumberChange = (e: React.ChangeEvent<HTMLInputElement>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/AddPaymentMethod.tsx:  const handleExpiryChange = (e: React.ChangeEvent<HTMLInputElement>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/AddPaymentMethod.tsx:  const handleSubmit = async (e: React.FormEvent) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/AddPaymentMethod.tsx:      // Call the payment-methods edge function to create a setup intent
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/AddPaymentMethod.tsx:      const { data, error } = await supabase.functions.invoke('payment-methods', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/AddPaymentMethod.tsx:  const generateYears = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CookiePolicy.tsx:const CookiePolicy = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CookiePolicy.tsx:                      <p>These are temporary cookies that are deleted when you close your browser. They help us maintain your session and provide basic functionality.</p>
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CookiePolicy.tsx:                    <CardDescription>Required for basic website functionality</CardDescription>
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CookiePolicy.tsx:                    <p>These cookies are necessary for the website to function and cannot be switched off. They are usually only set in response to actions made by you which amount to a request for services.</p>
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CookiePolicy.tsx:                    <CardDescription>Enable enhanced functionality and personalization</CardDescription>
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CookiePolicy.tsx:                          <li><strong>Social Media:</strong> Social login and sharing functionality</li>
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CookiePolicy.tsx:                        <p className="text-xs text-muted-foreground">Note: Disabling certain cookies may affect the functionality of our website.</p>
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/StripeConnectRefresh.tsx:const StripeConnectRefresh = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/StripeConnectRefresh.tsx:  const handleRefresh = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/StripeConnectRefresh.tsx:  const handleReturnToDashboard = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/ArtistDetail.tsx:const ArtistDetail = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/ArtistDetail.tsx:    const fetchArtist = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Guidelines.tsx:const Guidelines = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/TermsOfService.tsx:const TermsOfService = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/ResetPassword.tsx:const ResetPassword = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/ResetPassword.tsx:  const handleRequestReset = async (e: React.FormEvent) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/ResetPassword.tsx:  const handlePasswordReset = async (e: React.FormEvent) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/ListVenue.tsx:const ListVenue = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/ListVenue.tsx:  const handleInputChange = (field: keyof VenueFormData, value: string | number | string[]) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/ListVenue.tsx:  const handleAmenityToggle = (amenity: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/ListVenue.tsx:  const handleSubmit = async (e: React.FormEvent) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Blog.tsx:const Blog = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Blog.tsx:  const fetchBlogPosts = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Blog.tsx:      const uniqueCategories = ["All Posts", ...new Set((postsData || []).map(post => post.category))];
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Blog.tsx:  const featuredPost = blogPosts.find(post => post.featured);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Notifications.tsx:const Notifications = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Notifications.tsx:    const handleOnline = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Notifications.tsx:    const handleOffline = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/AllReleases.tsx:const AllReleases = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/AllReleases.tsx:    const loadData = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CreatorProgram.tsx:const CreatorProgram = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CreatorProgram.tsx:  const loadCreatorData = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CreatorProgram.tsx:      const successfulEvents = events.filter(event => 
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CreatorProgram.tsx:      const totalAttendees = events.reduce((sum, event) => 
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CreatorProgram.tsx:  const handleApplyNow = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CreatorProgram.tsx:  const handleLocationSelect = (location: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CreatorProgram.tsx:  const handleRefreshLocation = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CatererListingForm.tsx:const CatererListingForm: React.FC = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CatererListingForm.tsx:  const validateStep = (step: number): boolean => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CatererListingForm.tsx:  const handleNext = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CatererListingForm.tsx:  const handlePrevious = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CatererListingForm.tsx:  const handleSubmit = async (e: React.FormEvent) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CatererListingForm.tsx:  const renderStep1 = () => (
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CatererListingForm.tsx:  const renderStep2 = () => (
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CatererListingForm.tsx:  const renderStep3 = () => (
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CatererListingForm.tsx:  const renderStep4 = () => (
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Profile.tsx:const Profile: React.FC = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Profile.tsx:  // Improved fetch function with better error handling and auth state awareness
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Profile.tsx:  const fetchUserProfile = async (forceRefresh = false): Promise<void> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Profile.tsx:      const timer = setTimeout(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Profile.tsx:  const loadFollowCounts = async (userId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Profile.tsx:  const checkFollowingStatus = async (currentUserId: string, targetUserId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Profile.tsx:  const fetchUserEvents = useCallback(async (userId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Profile.tsx:  const fetchUserReservedEvents = useCallback(async (userId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Profile.tsx:      const eventIds = reservations.map((r: any) => r.event_id).filter(Boolean);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Profile.tsx:      const reservedEventsData = reservations.map((reservation: any) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Profile.tsx:        const event = events?.find(e => e.id === reservation.event_id);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Profile.tsx:  const fetchUserTicketedEvents = useCallback(async (userId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Profile.tsx:      const eventIds = attendees.map((a: any) => a.event_id).filter(Boolean);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Profile.tsx:      const ticketedEventsData = attendees.map((attendee: any) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Profile.tsx:        const event = events?.find(e => e.id === attendee.event_id);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Profile.tsx:  const fetchUserCommunities = useCallback(async (userId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Profile.tsx:      const memberCommunities = membershipData.data?.map(m => m.communities).filter(Boolean) || [];
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Profile.tsx:  const fetchUserPodcasts = useCallback(async (userId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Profile.tsx:        const transformedPodcasts: Podcast[] = (data || []).map((podcast: any) => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Profile.tsx:  const fetchPostsCount = useCallback(async (userId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Profile.tsx:  }, [activeTab, user?.id]); // Remove function dependencies to prevent infinite loops
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Profile.tsx:  const handleEditProfile = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Profile.tsx:  const handleFollowToggle = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Profile.tsx:  const handleMessageClick = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Profile.tsx:  const handleRetry = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Profile.tsx:  const handlePhotoUpload = async (file: File, type: 'avatar' | 'cover') => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Profile.tsx:  const updateUserProfileImage = async (imageUrl: string, type: 'avatar' | 'cover') => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Profile.tsx:  // Add missing profile update function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Profile.tsx:  const handleProfileUpdate = async (data: Partial<AppUser>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Profile.tsx:  const formatJoinedDate = (dateString: string | null | undefined): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Profile.tsx:  // Helper function to get the correct avatar URL
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Profile.tsx:  const getAvatarUrl = (user: ExtendedUser): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Profile.tsx:  // Helper function to get the correct cover image URL
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Profile.tsx:  const getCoverImageUrl = (user: ExtendedUser): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Profile.tsx:    profilePicture: getAvatarUrl(user), // Use helper function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CreateProject.tsx:const CreateProject: React.FC = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CreateProject.tsx:  const handleInputChange = (field: keyof ProjectFormData, value: any) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CreateProject.tsx:  const addSkill = (skill: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CreateProject.tsx:  const removeSkill = (skillToRemove: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CreateProject.tsx:  const addTag = (tag: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CreateProject.tsx:  const removeTag = (tagToRemove: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CreateProject.tsx:  const validateForm = (): boolean => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CreateProject.tsx:  const handleSubmit = async (e: React.FormEvent) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/VenueListingForm.tsx:const VenueListingForm = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/VenueListingForm.tsx:  const handleInputChange = (field: keyof VenueFormData, value: unknown) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/VenueListingForm.tsx:  const handleAmenityToggle = (amenity: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/VenueListingForm.tsx:  const validateStep = (step: number): boolean => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/VenueListingForm.tsx:  const nextStep = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/VenueListingForm.tsx:  const prevStep = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/VenueListingForm.tsx:  const handleSubmit = async (e: React.FormEvent) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/VenueListingForm.tsx:  const renderStep = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/VenueListingForm.tsx:  const getStepTitle = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Releases.tsx:const Releases = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Releases.tsx:    const fetchReleases = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Releases.tsx:  const filteredReleases = releases.filter(release => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Releases.tsx:  const formatDuration = (seconds: number): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Releases.tsx:  const formatReleaseDate = (dateString: string): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Help.tsx:const Help = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Help.tsx:  const filteredFaqs = faqs.filter(faq => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Help.tsx:  const handleContactSubmit = async (e: React.FormEvent) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Help.tsx:  const handleInputChange = (field: string, value: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Caterers.tsx:const Caterers: React.FC = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Caterers.tsx:  const searchParams: CatererService.CatererSearchParams = useMemo(() => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Caterers.tsx:  const clearAllFilters = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Caterers.tsx:  const renderStars = (rating: number | null) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Caterers.tsx:  const CatererCard: React.FC<{ caterer: CatererService.Caterer }> = ({ caterer }) => (
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Caterers.tsx:  const FilterSection: React.FC = () => (
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/VenueDetails.tsx:const VenueDetails = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/VenueDetails.tsx:    const fetchVenue = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/VenueDetails.tsx:  const handleBookingComplete = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/VenueDetails.tsx:  const handleFavorite = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/VenueDetails.tsx:  const handleShare = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/VenueDetails.tsx:  const calculateTotal = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/VenueDetails.tsx:  const nextImage = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/VenueDetails.tsx:  const prevImage = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/VenueDetails.tsx:  const renderStars = (rating: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/ProductDetail.tsx:const calculateAverageRating = (reviews: ProductReview[]): number => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/ProductDetail.tsx:  const sum = reviews.reduce((acc, review) => acc + (review.rating || 0), 0);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/ProductDetail.tsx:const ProductDetail = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/ProductDetail.tsx:    const fetchProduct = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/ProductDetail.tsx:  const handleAddToCart = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/ProductDetail.tsx:  const handleWishlistToggle = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/ProductDetail.tsx:  const handleShare = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/ProductDetail.tsx:  const renderStars = (rating: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/ProductDetail.tsx:  const generateProductSEO = (product: Product) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Messages.tsx:const Messages = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Messages.tsx:  const loadConversations = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Messages.tsx:          const otherMemberIds = (conv.members as string[]).filter(id => id !== user.id);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Messages.tsx:  const loadMessages = async (conversationId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Messages.tsx:      const transformedMessages: Message[] = (messagesData || []).map(msg => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Messages.tsx:  const sendMessage = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Messages.tsx:  const handleKeyPress = (e: React.KeyboardEvent) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Messages.tsx:  const scrollToBottom = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Messages.tsx:  const formatTime = (date: Date) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Messages.tsx:  const formatDate = (date: Date) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Messages.tsx:  const filteredConversations = conversations.filter(conv =>
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/PodcastDetail.tsx:const PodcastDetail = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/PodcastDetail.tsx:    const fetchPodcast = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/PodcastDetail.tsx:  const formatDuration = (seconds: number): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/PodcastDetail.tsx:  const formatDate = (dateString: string): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/PodcastDetail.tsx:  const handlePlayPause = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/PodcastDetail.tsx:  const handleDownload = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/PodcastDetail.tsx:  const handleShare = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/PodcastDetail.tsx:  const handleLike = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/PodcastDetail.tsx:  const generatePodcastSEO = (episode: PodcastEpisode) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/PaymentSuccess.tsx:const PaymentSuccess = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/PaymentSuccess.tsx:  const handleViewEvent = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/PaymentSuccess.tsx:  const handleViewProduct = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/PaymentSuccess.tsx:  const handleGoHome = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/PaymentSuccess.tsx:  const handleDownloadReceipt = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/UserStore.tsx:const LoadingState = () => (
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/UserStore.tsx:const useStoreProducts = (store: Store | null) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/UserStore.tsx:  const fetchProducts = useCallback(async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/UserStore.tsx:  const filteredProducts = useMemo(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/UserStore.tsx:const UserStore = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/UserStore.tsx:  const fetchStoreData = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/UserTickets.tsx:const UserTickets = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/UserTickets.tsx:  const validTickets = tickets.filter(ticket => ticket.status === 'valid');
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/UserTickets.tsx:  const usedTickets = tickets.filter(ticket => ticket.status === 'used');
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/UserTickets.tsx:  const cancelledTickets = tickets.filter(ticket => ticket.status === 'cancelled');
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/UserTickets.tsx:  const toggleTicketQR = (ticketId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Explore.tsx:const Explore: React.FC = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Explore.tsx:  const searchFilters = useMemo((): SearchFilters => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Explore.tsx:  const searchOptions = useMemo((): SearchOptions => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Explore.tsx:  // Enhanced fetch function with advanced search
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Explore.tsx:  const fetchEvents = useCallback(async (forceRefresh = false) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Explore.tsx:        const transformedEvents: Event[] = searchResult.items.map(event => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Explore.tsx:  const fetchTrendingAndFeatured = useCallback(async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Explore.tsx:        const transformedTrending: Event[] = trending.map(event => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Explore.tsx:        const transformedFeatured: Event[] = featured.map(event => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Explore.tsx:    const timer = setTimeout(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Explore.tsx:    const timer = setTimeout(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Explore.tsx:  const handleSearch = (value: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Explore.tsx:  const handleSortChange = (value: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Explore.tsx:  const handlePriceFilterChange = (value: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Explore.tsx:  const handleDateFilterChange = (value: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Explore.tsx:  const handleCategoryFilterChange = (value: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Explore.tsx:  const handleViewModeChange = (mode: 'grid' | 'list') => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Explore.tsx:  const handleLoadMore = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Explore.tsx:  const handleLocationSelect = (location: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Explore.tsx:  const handleRefreshLocation = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Explore.tsx:  const handleRetry = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Explore.tsx:  const handleCreateEventClick = (e?: React.MouseEvent) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Explore.tsx:  const formatEventDate = (dateString: string | null) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Explore.tsx:  const renderEventCard = (event: Event) => (
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Explore.tsx:  const renderTrendingSection = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Explore.tsx:  const renderFeaturedSection = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Explore.tsx:  const renderFilters = () => (
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Pro.tsx:const Pro = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Pro.tsx:  const handleSubscribe = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/PurchaseSuccess.tsx:const PurchaseSuccess = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/NotFound.tsx:const NotFound = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Products.tsx:const Products = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Products.tsx:    const fetchProducts = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Products.tsx:        const transformedProducts: Product[] = (productsData || []).map(product => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Products.tsx:        const productCategories = [...new Set(transformedProducts.map(p => p.category))];
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Products.tsx:        const dbCategories = categoriesData?.map(c => c.name) || [];
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Products.tsx:  const toggleWishlist = (productId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Products.tsx:  const addToCart = (product: Product) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Products.tsx:  const renderStars = (rating: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CatererDetails.tsx:const CatererDetails: React.FC = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CatererDetails.tsx:  const handleReviewSubmit = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CatererDetails.tsx:  const renderStars = (rating: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/CatererDetails.tsx:                const menu = menus.find(m => m.id === selectedMenu);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Venues.tsx:const Venues: React.FC = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Venues.tsx:  const fetchVenues = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Venues.tsx:  const handleLocationSelect = (location: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Venues.tsx:  const handleRefreshLocation = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Venues.tsx:  const getLocationString = (venue: VenueWithLocation) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Venues.tsx:  const getAmenities = (venue: VenueWithLocation) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Venues.tsx:  const renderVenueCard = (venue: VenueWithLocation) => (
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Careers.tsx:const Careers = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Careers.tsx:  const fetchJobs = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/pages/Careers.tsx:  const getTimeAgo = (dateString: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/routes/publicRoutes.tsx:const CatererListingForm = lazy(() => import("@/pages/CatererListingForm"));
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/routes/publicRoutes.tsx:const ProfileRedirect = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/initServices.ts:export async function initializeServices(): Promise<boolean> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/initServices.ts:      const checkInterval = setInterval(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/initServices.ts:    const timeoutPromise = new Promise<ComprehensiveCheckResult>((_, reject) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/initServices.ts:        toast.error("Some services failed to respond in time. The app will try to function with limited features.");
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/initServices.ts:      // Critical failures that prevent the app from functioning properly
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/initServices.ts:          toast.error("Critical service failures detected. Application may not function correctly.");
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/initServices.ts:      // Non-critical failures - application can still run with reduced functionality
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/initServices.ts:    toast.error("Failed to initialize services. The app may not function correctly.");
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/initServices.ts:function setupPeriodicHealthChecks() {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/initServices.ts: * A health check function that can be called at any time to verify service status
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/initServices.ts:export async function performHealthCheck(showToasts: boolean = true): Promise<boolean> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/initServices.ts:export function getServiceStatus() {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/order/validation.ts:// Create a simple product service function for validation
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/order/validation.ts:const getProductById = async (productId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/order/queries.ts:export const getAllOrders = async (): Promise<Order[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/order/queries.ts:export const getOrdersByUserId = async (userId: string): Promise<Order[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/order/management.ts:export const fulfillOrder = async (orderId: string): Promise<Order | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/order/management.ts:export const cancelOrder = async (orderId: string): Promise<Order | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/order/management.ts:export const returnProduct = async (orderId: string): Promise<Order | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/order/checkout.ts:export const generateCheckoutUrl = (productId: string, quantity: number): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/order/purchase.ts:const getProductById = async (productId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/order/purchase.ts:export const purchaseProduct = async (params: PurchaseProductParams): Promise<PurchaseResult> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/compatibility/databaseService.ts: * This file provides backward compatibility with legacy database service functions.
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/compatibility/databaseService.ts: * All functions here are marked as deprecated and will eventually be removed.
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/compatibility/databaseService.ts:export async function executeQuery(query: string, params: unknown[] = []) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/compatibility/databaseService.ts:export async function fetchTable(table: string, options: Record<string, unknown> = {}) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/compatibility/databaseService.ts:export async function getRecordById(table: string, id: string | number) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/compatibility/databaseService.ts:export async function insertRecord(table: string, data: unknown) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/compatibility/databaseService.ts:export async function updateRecord(table: string, id: string | number, data: unknown) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/compatibility/databaseService.ts:export async function deleteRecord(table: string, id: string | number) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/compatibility/databaseService.ts:export async function runTransaction(callback: Function) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/compatibility/databaseService.ts:export async function checkRecordExists(table: string, column: string, value: unknown) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/compatibility/databaseService.ts:export async function checkTableExists(table: string, schema = 'public') {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/compatibility/databaseService.ts:export async function countRecords(table: string, filters = {}) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/compatibility/databaseService.ts:export async function upsertRecord(table: string, data: unknown, conflictFields: string | string[]) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/compatibility/databaseService.ts:export async function getCachedQuery(query: string, params: unknown[] = [], ttlMs = 60000) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/compatibility/databaseService.ts:export function invalidateCache(pattern?: string) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/compatibility/databaseService.ts:export function queryBuilder(table: string) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/tests/databaseUtils.test.ts:  describe('Cache functions', () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/tests/databaseUtils.test.ts:      const result = await databaseUtils.withTransaction(async (tx) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/utils/databaseUtils.ts: * This file provides utility functions for common database operations.
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/utils/databaseUtils.ts:export function generateCacheKey(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/utils/databaseUtils.ts:export function cacheResult<T>(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/utils/databaseUtils.ts:export function getCachedResult<T>(key: string): T | null {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/utils/databaseUtils.ts:export function clearCache(keyPattern?: string): void {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/utils/databaseUtils.ts:export async function cachedQuery<T = any>(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/utils/databaseUtils.ts:export async function tableExists(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/utils/databaseUtils.ts:export async function getRecordCount(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/utils/databaseUtils.ts:export async function recordExists(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/utils/databaseUtils.ts:export async function upsertRecord<T = any>(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/utils/databaseUtils.ts:    const placeholders = fields.map((_, i) => `$${i + 1}`);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/utils/databaseUtils.ts:    const fieldsToUpdate = updateFields || fields.filter(f => !conflictFieldsArr.includes(f));
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/utils/databaseUtils.ts:export async function batchInsert<T = any>(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/utils/databaseUtils.ts:export async function withTransaction<T = any>(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/utils/databaseUtils.ts:export async function getSchemaInfo(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/utils/databaseUtils.ts:export function formatSqlValue(value: unknown): string {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/utils/databaseUtils.ts:export function formatWhereClause(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/hooks/useDatabase.tsx:export function useTableQuery<T = any>(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/hooks/useDatabase.tsx:export function useRecordById<T = any>(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/hooks/useDatabase.tsx:export function useRecordsByField<T = any>(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/hooks/useDatabase.tsx:export function useCreateRecord<T = any>(tableName: string, options: {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/hooks/useDatabase.tsx:export function useUpdateRecord<T = any>(tableName: string, options: {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/hooks/useDatabase.tsx:export function useDeleteRecord<T = any>(tableName: string, options: {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/hooks/useDatabase.tsx:export function useRawQuery<T = any>(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/hooks/useDatabase.tsx:export function usePaginatedQuery<T = any>(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/hooks/useDatabase.tsx:  // Navigation functions
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/hooks/useDatabase.tsx:  const goToPage = useCallback((newPage: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/hooks/useDatabase.tsx:  const nextPage = useCallback(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/hooks/useDatabase.tsx:  const previousPage = useCallback(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/hooks/useDatabase.tsx:  const changePageSize = useCallback((newSize: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/hooks/useDatabase.tsx:export function useTable<T = any>(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/hooks/useDatabase.tsx:  const getById = useCallback(async (id: string | number): Promise<T | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/hooks/useDatabase.tsx:  const updateQuery = useCallback((newOptions: QueryOptions) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/api/transactionManager.ts:export function createTransaction(options: { debug?: boolean } = {}): TransactionManager {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/api/databaseClient.ts: * This file provides the core database client functionality for interacting with the database.
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/api/queryBuilders.ts: * This file provides utility functions for building complex database queries.
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/api/queryBuilders.ts:export function applyFilters<T>(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/api/queryBuilders.ts:export function applyOrder<T>(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/api/queryBuilders.ts:export function applyPagination<T>(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/api/queryBuilders.ts:export function buildQuery<T>(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/api/queryBuilders.ts:export function paginationToRange(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/api/queryBuilders.ts:export function buildFullTextSearch(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/api/queryBuilders.ts:export function prepareSearchTerm(searchTerm: string): string {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/api/queryBuilders.ts:export function filtersToWhere(filters: QueryFilters): { clause: string; params: unknown[] } {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/api/queryBuilders.ts:export function orderToSql(order: QueryOrder[]): string {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/api/queryBuilders.ts:  const orderTerms = order.map(orderItem => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/api/queryBuilders.ts:export function paginationToSql(pagination?: PaginationOptions): string {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/api/queryBuilders.ts:// Export all query builder functions
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/api/tableOperations.ts:export function createTableOperations<T = any>(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/api/rlsPolicies.ts:      const formattedColumns = columns.map(col => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/api/rlsPolicies.ts:      const primaryKey = pkData.map(pk => pk.column_name);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/index.ts: * - Utility functions for common database operations
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/database/index.ts: * const UserList = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/guidelinesService.ts:export const getGuidelines = async (): Promise<GuidelineSection[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/messageService.ts:export const getConversations = async (userId: string): Promise<Conversation[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/messageService.ts:export const getMessages = async (conversationId: string): Promise<Message[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/messageService.ts:export const createConversation = async (participants: string[]): Promise<Conversation | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/messageService.ts:export const markMessagesAsRead = async (conversationId: string, userId: string): Promise<void> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/messageService.ts:export const retryFailedMessages = async (userId: string): Promise<void> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/releasesService.ts:export const getLatestReleases = async (limit: number = 10): Promise<Release[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/releasesService.ts:export const fetchReleases = async (filter: string = "all"): Promise<Release[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/releasesService.ts:export const fetchGenres = async (): Promise<string[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/releasesService.ts:export const createRelease = async (releaseData: Omit<Release, 'id'>): Promise<string | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/eventCreationService.ts:export const createEvent = async (eventData: Omit<Partial<Event>, 'id' | 'createdAt' | 'updatedAt'>): Promise<string | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/eventCreationService.ts:    const pendingCollaborators = collaborators.filter(c => c.status === "pending");
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/eventCreationService.ts:      const existingUsers = pendingCollaborators.filter(c => c.isExistingUser);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/eventCreationService.ts:      const newUsers = pendingCollaborators.filter(c => !c.isExistingUser);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/stripe.ts:import { createConnectOnboardingLink, createConnectDashboardLink } from '@/services/supabase/edge-functions';
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/stripe.ts:      const { data, error } = await supabase.functions.invoke('payment-methods', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/stripe.ts:      const { data, error } = await supabase.functions.invoke('payment-methods', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/stripe.ts:      const { error } = await supabase.functions.invoke('payment-methods', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/stripe.ts:      const { data, error } = await supabase.functions.invoke('connect-account', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/stripe.ts:      const { data, error } = await supabase.functions.invoke('create-checkout-session', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/stripe.ts:      const { data, error } = await supabase.functions.invoke('check-subscription', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/stripe.ts:      const { data, error } = await supabase.functions.invoke('cancel-subscription', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/stripe.ts:      const { data, error } = await supabase.functions.invoke('customer-portal', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/venueService.ts:// Re-export all venue service functionality from the modular structure
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/reservationService.ts:      const { data: paymentIntent, error: paymentError } = await supabase.functions.invoke('create-payment-intent', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/reservationService.ts:          await supabase.functions.invoke('cancel-payment-intent', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/fees/feeCalculator.ts:export const calculateFees = (options: FeeCalculationOptions): FeeBreakdown => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/fees/feeCalculator.ts:export const calculateStripePlatformFee = (amount: number, isCreatorProgram = false): number => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/fees/feeCalculator.ts:export const calculateTotalWithFees = (baseAmount: number, isPlatformFee = false, isCreatorProgram = false): number => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/fees/feeCalculator.ts:export const calculateCreatorEarnings = (grossAmount: number, isCreatorProgram = false): number => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/fees/feeCalculator.ts:export const formatFeeBreakdown = (breakdown: FeeBreakdown) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/fees/feeCalculator.ts:export const validateFeeCalculation = (breakdown: FeeBreakdown): boolean => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/fees/feeCalculator.ts:export const getCreatorProgramBenefit = (amount: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/sponsorContentService.ts:export const getSponsorContent = async (): Promise<SponsorContent | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/communitySubscriptionService.ts:export const createCommunitySubscription = async (options: CreateCommunitySubscriptionOptions): Promise<string | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/communitySubscriptionService.ts:    // Create Stripe subscription through edge function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/communitySubscriptionService.ts:      const { data: stripeResult, error: stripeError } = await supabase.functions.invoke(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/communitySubscriptionService.ts:export const getCommunitySubscriptionSettings = async (communityId: string): Promise<CommunitySubscriptionSettings | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/communitySubscriptionService.ts:export const updateCommunitySubscriptionSettings = async (options: UpdateSubscriptionSettingsOptions): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/communitySubscriptionService.ts:export const getUserCommunitySubscription = async (userId: string, communityId: string): Promise<CommunitySubscriber | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/communitySubscriptionService.ts:export const cancelCommunitySubscription = async (subscriptionId: string, userId: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/communitySubscriptionService.ts:    const { error: stripeError } = await supabase.functions.invoke('cancel-community-subscription', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/communitySubscriptionService.ts:export const cancelSubscription = async (subscriptionId: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/communitySubscriptionService.ts:    const { data: cancelResult, error: cancelError } = await supabase.functions.invoke(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/communitySubscriptionService.ts:export const getCommunitySubscribers = async (communityId: string): Promise<CommunitySubscriber[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/communitySubscriptionService.ts:const scheduleNextRecurringEvent = async (communityId: string, settings: CommunitySubscriptionSettings): Promise<void> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/postService.ts:export const getUserPosts = async (userId: string): Promise<Post[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/postService.ts:    const processedPosts = posts.map(post => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/getStripeConnect.ts:export const getStripeConnectAccountId = async (userId: string): Promise<string | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/auth/compatibility/authService.ts: * the legacy auth service functions. It maps legacy function calls to the
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/auth/hooks/useAuth.tsx:export const AuthProvider = ({ children }: { children: ReactNode }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/auth/hooks/useAuth.tsx:    const initializeAuth = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/auth/hooks/useAuth.tsx:  const login = async (credentials: EmailCredentials) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/auth/hooks/useAuth.tsx:  const loginWithProvider = async (provider: string, redirectTo?: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/auth/hooks/useAuth.tsx:  const logout = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/auth/hooks/useAuth.tsx:  const signup = async (data: RegistrationData) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/auth/hooks/useAuth.tsx:  const refreshUser = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/auth/hooks/useAuth.tsx:  const updateUserProfile = async (data: Partial<UserProfile>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/auth/hooks/useAuth.tsx:  const updateUserEmail = async (email: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/auth/hooks/useAuth.tsx:  const updateUserPassword = async (password: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/auth/hooks/useAuth.tsx:  const resetUserPassword = async (data: PasswordResetData) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/auth/hooks/useAuth.tsx:export const useAuth = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/auth/api/authAPI.ts: * This file implements the core authentication API functions.
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/auth/api/authAPI.ts:// Utility function to create client-side Supabase client
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/auth/api/authAPI.ts:const createSupabaseClient = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/auth/api/authAPI.ts: * Helper function to handle auth errors consistently
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/auth/api/authAPI.ts:export const handleAuthError = (error: any): AuthError => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/auth/api/authAPI.ts:export const signInWithEmail = async (credentials: EmailCredentials): Promise<User | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/auth/api/authAPI.ts:export const signInWithProvider = async (provider: string, redirectTo?: string): Promise<void> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/auth/api/authAPI.ts:export const signUp = async (data: RegistrationData): Promise<User | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/auth/api/authAPI.ts:export const signOut = async (): Promise<void> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/auth/api/authAPI.ts:export const getSession = async (): Promise<{ user: User | null; session: any }> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/auth/api/authAPI.ts:export const getCurrentUser = async (): Promise<User | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/auth/api/authAPI.ts:export const updateProfile = async (userId: string, data: Partial<UserProfile>): Promise<UserProfile | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/auth/api/authAPI.ts:export const updateEmail = async (email: string): Promise<void> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/auth/api/authAPI.ts:export const updatePassword = async (password: string): Promise<void> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/auth/api/authAPI.ts:export const resetPassword = async (data: PasswordResetData): Promise<void> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/auth/api/authAPI.ts:export const setupTwoFactor = async (data: TwoFactorSetupData): Promise<{ qrCode: string; secret: string; backupCodes: string[] }> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/auth/api/authAPI.ts:    const { data: twoFactorData, error } = await supabase.functions.invoke('setup-2fa', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/auth/api/authAPI.ts:export const verifyTwoFactorSetup = async (data: TwoFactorVerifyData): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/auth/api/authAPI.ts:    const { data: result, error } = await supabase.functions.invoke('verify-2fa-setup', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/auth/api/authAPI.ts:export const verifyTwoFactor = async (code: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/auth/api/authAPI.ts:    const { data: result, error } = await supabase.functions.invoke('verify-2fa', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/auth/api/authAPI.ts:export const disableTwoFactor = async (): Promise<void> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/auth/api/authAPI.ts:    const { error } = await supabase.functions.invoke('disable-2fa');
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/auth/api/authAPI.ts:export const sendEmailVerification = async (): Promise<void> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/auth/api/authAPI.ts:    const { error } = await supabase.functions.invoke('send-email-2fa');
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/auth/api/authAPI.ts:export const getServerSession = async (request: Request): Promise<{ user: User | null; session: any }> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/auth/api/authAPI.ts:// Export all functions as authAPI object
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/blogService.ts:export const getBlogPosts = async (limit = 10): Promise<BlogPost[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/blogService.ts:export const getBlogPost = async (postId: string): Promise<BlogPost | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/blogService.ts:export const getBlogPostsByCategory = async (category: string, limit = 10): Promise<BlogPost[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notificationService.ts:export const markNotificationAsRead = async (notificationId: string): Promise<void> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notificationService.ts:export const markAllNotificationsAsRead = async (userId: string): Promise<void> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/catererService.ts:// Core caterer functions
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/catererService.ts:export const getCaterers = async (params: CatererSearchParams = {}): Promise<CatererSearchResult> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/catererService.ts:export const getCatererById = async (id: string): Promise<Caterer | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/catererService.ts:export const createCaterer = async (catererData: CreateCatererData): Promise<Caterer> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/catererService.ts:export const updateCaterer = async (id: string, updates: Partial<CreateCatererData>): Promise<Caterer> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/catererService.ts:export const deleteCaterer = async (id: string): Promise<void> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/catererService.ts:// Menu functions
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/catererService.ts:export const getCatererMenus = async (catererId: string): Promise<CatererMenu[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/catererService.ts:export const createCatererMenu = async (menuData: CreateMenuData): Promise<CatererMenu> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/catererService.ts:    throw new Error('Menu functionality not yet available - database table required');
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/catererService.ts:// Review functions
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/catererService.ts:export const getCatererReviews = async (catererId: string, page = 1, pageSize = 10): Promise<{ reviews: CatererReview[], total: number }> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/catererService.ts:    const reviews = (data || []).map(review => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/catererService.ts:export const createCatererReview = async (reviewData: CreateReviewData): Promise<CatererReview> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/catererService.ts:    throw new Error('Review functionality not yet available - database table required');
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/catererService.ts:export const getFeaturedCaterers = async (limit = 6): Promise<Caterer[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/catererService.ts:export const getCatererSearchSuggestions = async (query: string): Promise<string[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/compatibility/toastService.ts:    // Use direct sonner functionality which is re-exported by notification service
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/compatibility/toastService.ts: * Legacy alert functions for backward compatibility
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/tests/notificationAPI.test.ts:      const readNotification = notifications.find(n => n.id === notificationId);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/tests/useNotification.test.tsx:    const mutate = (arg) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/tests/useNotification.test.tsx:const wrapper = ({ children }: { children: ReactNode }) => (
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/tests/useNotification.test.tsx:    const { result } = renderHook(() => useNotification());
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/tests/useNotification.test.tsx:    const { result } = renderHook(() => useNotification());
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/tests/useNotification.test.tsx:    const { result } = renderHook(() => useNotification());
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/tests/useNotification.test.tsx:    const { result } = renderHook(() => useNotification());
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/tests/useNotification.test.tsx:    const { result } = renderHook(() => useNotification());
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/tests/useNotification.test.tsx:    const { result } = renderHook(() => useNotification());
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/tests/useNotification.test.tsx:    const { result } = renderHook(() => useNotification());
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/tests/useNotification.test.tsx:    const { result } = renderHook(() => useBadgeNotification('feature-tour'));
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/tests/useNotification.test.tsx:    const { result } = renderHook(() => useBadgeNotification('feature-tour'));
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/tests/useNotification.test.tsx:    const { result } = renderHook(() => useBadgeNotification('feature-tour'));
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/tests/useNotification.test.tsx:    const { result } = renderHook(() => useBadgeNotification('feature-tour'));
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/tests/useNotification.test.tsx:    const { result } = renderHook(() => useNotification(), { wrapper });
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/utils/notificationUtils.ts: * This module provides utility functions for working with notifications.
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/utils/notificationUtils.ts:export const generateNotificationId = (type: string): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/utils/notificationUtils.ts:export const formatRelativeTime = (timestamp: number): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/utils/notificationUtils.ts:export const isExpired = (notification: BaseNotification): boolean => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/utils/notificationUtils.ts:export const getStatusLabel = (status: NotificationStatus): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/utils/notificationUtils.ts:export const truncateMessage = (message: string, maxLength: number = 100): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/hooks/useNotification.tsx:export const useNotification = (options: UseNotificationOptions = {}) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/hooks/useNotification.tsx:  const unreadCount = useMemo(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/hooks/useNotification.tsx:  const markAsRead = useCallback((notificationId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/hooks/useNotification.tsx:  const deleteNotification = useCallback((notificationId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/hooks/useNotification.tsx:  const clearAllNotifications = useCallback(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/hooks/useNotification.tsx:export const useBadgeNotification = (badgeId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/hooks/useNotification.tsx:  const [isDismissed, setIsDismissed] = useState(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/hooks/useNotification.tsx:  const dismissBadge = useCallback(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/hooks/useNotification.tsx:  const resetBadge = useCallback(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/hooks/useNotification.tsx:export const useNotificationContext = (): NotificationContextType => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/api/notificationAPI.ts: * This file implements the core notification API functions.
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/api/notificationAPI.ts:export const initialize = async (customConfig?: Partial<NotificationConfig>): Promise<void> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/api/notificationAPI.ts:export const registerProvider = (provider: NotificationProvider): void => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/api/notificationAPI.ts:const registerToastProvider = (): void => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/api/notificationAPI.ts: * Get the appropriate toast function based on variant
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/api/notificationAPI.ts:const getToastFunction = (variant: NotificationVariant): Function => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/api/notificationAPI.ts:const shouldThrottle = (): boolean => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/api/notificationAPI.ts:export const send = async (notification: Notification): Promise<NotificationEvent> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/api/notificationAPI.ts:    const eligibleProviders = Array.from(providers.values()).filter(provider => 
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/api/notificationAPI.ts:    const sendPromises = eligibleProviders.map(provider => 
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/api/notificationAPI.ts:export const showSuccessToast = (title: string, message: string, options: Partial<ToastNotification> = {}): Promise<NotificationEvent> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/api/notificationAPI.ts:export const showInfoToast = (title: string, message: string, options: Partial<ToastNotification> = {}): Promise<NotificationEvent> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/api/notificationAPI.ts:export const showWarningToast = (title: string, message: string, options: Partial<ToastNotification> = {}): Promise<NotificationEvent> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/api/notificationAPI.ts:export const showErrorToast = (title: string, message: string, options: Partial<ToastNotification> = {}): Promise<NotificationEvent> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/api/notificationAPI.ts:export const getInAppNotifications = (userId: string, includeRead = false): InAppNotification[] => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/api/notificationAPI.ts:export const markAsRead = (notificationId: string): InAppNotification | null => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/api/notificationAPI.ts:  const notificationIndex = notificationQueue.findIndex(n => n.id === notificationId);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/api/notificationAPI.ts:export const deleteNotification = (notificationId: string): boolean => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/api/notificationAPI.ts:export const clearUserNotifications = (userId: string): number => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/api/notificationAPI.ts:export const getConfig = (): NotificationConfig => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/api/notificationAPI.ts:export const setEnabled = (enabled: boolean): void => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/notification/api/notificationAPI.ts:// Export all functions as notificationAPI object
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/compatibility/wallet.ts:export async function getWalletBalance(userId: string): Promise<number> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/compatibility/wallet.ts:export async function createWalletIfNotExists(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/compatibility/wallet.ts:export async function getFormattedWalletBalance(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/compatibility/wallet.ts:export async function updateWalletBalance(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/compatibility/wallet.ts:export async function getWalletTransactions(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/compatibility/wallet.ts:export async function createWalletTransaction(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/compatibility/platformCredit.ts:export async function addPlatformCredit(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/enhancedPaymentService.ts:        // Call Stripe Connect payment function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/enhancedPaymentService.ts:        const { data: stripeResult, error: stripeError } = await supabase.functions.invoke('stripe-connect-payment', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/enhancedPaymentService.ts:      const { data: checkoutResult, error: checkoutError } = await supabase.functions.invoke('create-checkout-session', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/core/errors.ts:export function mapToPaymentError(error: unknown, context = 'Payment operation failed'): PaymentError {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/core/errors.ts:export function handlePaymentError(error: unknown, userMessage?: string, silent = false): PaymentError {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/core/errors.ts:export function isPaymentErrorType(error: unknown, type: PaymentErrorType): boolean {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/core/errors.ts:export function createPaymentError(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/webhookEndpoint.ts:export async function handleWebhook(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/webhookEndpoint.ts:export const logWebhookEvent = async (event: WebhookEvent): Promise<void> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/paymentPreferences.ts:export const getPaymentPreferences = async (userId: string): Promise<PaymentPreferences | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/paymentPreferences.ts:export const updatePaymentPreferences = async (userId: string, preferences: PaymentPreferences): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/paymentPreferences.ts:export const getPaymentHistory = async (userId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/stripeCheckout.ts:export const initiateCheckout = async (options: PaymentOptions): Promise<PaymentResult> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/stripeCheckout.ts:export const redirectToCheckout = (checkoutUrl: string): void => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/stripeCheckout.ts:export const checkout = async (options: PaymentOptions): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/tests/hooks.test.tsx:const createWrapper = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/utils/errorHandling.ts:export const isPaymentError = (error: unknown): error is PaymentError => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/utils/errorHandling.ts:export const formatPaymentErrorMessage = (error: PaymentError): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/utils/errorHandling.ts:export const handleApiError = <T>(message: string, error: unknown, defaultValue?: T): T => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/utils/paymentRecord.ts: * Provides functions for creating and managing payment records in the database.
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/utils/paymentRecord.ts:export const createPaymentRecord = async (paymentData: PaymentRecordData): Promise<any> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/utils/paymentRecord.ts:export const updatePaymentRecord = async (id: string, status: string, metadata?: unknown): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/utils/paymentRecord.ts:export const getPaymentRecord = async (id: string): Promise<any> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/utils/paymentRecord.ts:export const getUserPaymentRecords = async (userId: string, limit = 10): Promise<any[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/utils/paymentRecord.ts:export const paymentsCollection = () => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/utils/paymentRecord.ts:export const getPaymentDoc = (id: string) => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/utils/paymentUtils.ts: * Payment utility functions
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/utils/paymentUtils.ts:export const handlePaymentError = (error: unknown, options: { silent?: boolean } = {}): PaymentResult => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/utils/paymentUtils.ts:    // Use the updatePaymentRecord function to update status
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/utils/paymentUtils.ts: * Helper function to generate timestamp
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/utils/paymentUtils.ts:export const getCurrentTimestamp = () => new Date().toISOString();
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/utils/paymentUtils.ts:export const validatePaymentAmount = (amount: number): boolean => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/utils/paymentUtils.ts:export const formatPaymentAmount = (amountInCents: number): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/utils/paymentUtils.ts:export const createPaymentRecord = async (paymentData: unknown) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/utils/cache.ts:export const clearCaches = (): void => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/utils/cache.ts:export const generateCacheKey = (prefix: string, ...parts: (string | number | undefined)[]): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/utils/cache.ts:  const validParts = parts.filter(part => part !== undefined && part !== null);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/utils/validators.ts:export function validateCreditAmount(amount: number): {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/utils/validators.ts:export function validatePaymentAmount(amount: number): {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/utils/validators.ts:export function validateCreditTransaction(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/utils/validators.ts:export function isValidCurrencyCode(currencyCode: string): boolean {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/utils/validators.ts:export function isValidCardNumber(cardNumber: string): boolean {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/utils/validators.ts:export function detectCardType(cardNumber: string): string | null {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/utils/validators.ts:export function isValidCardExpiry(month: number, year: number): boolean {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/utils/validators.ts:export function isValidCvv(cvv: string, cardType?: string): boolean {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/utils/transformers.ts:export const transformPaymentMethodData = (data: any): PaymentMethod => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/utils/transformers.ts:export const transformSetupIntentData = (data: any): SetupIntent => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/utils/transformers.ts:export const transformPaymentIntentData = (data: any): PaymentIntent => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/utils/transformers.ts:export const transformCustomerData = (data: any): Customer => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/utils/transformers.ts:export const transformTransactionData = (data: any): Transaction => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/utils/transformers.ts:export const transformRefundData = (data: any): Refund => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/utils/transformers.ts:const mapPaymentMethodType = (type: string): PaymentMethodType => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/utils/transformers.ts:const mapCardBrand = (brand: string): CardBrand => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/utils/transformers.ts:const mapPaymentIntentStatus = (status: string): PaymentIntentStatus => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/utils/formatters.ts:export function formatCurrency(amount: number, currency = 'USD'): string {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/utils/formatters.ts:export function formatCredits(amount: number): string {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/utils/formatters.ts:export function centsToAmount(cents: number): number {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/utils/formatters.ts:export function amountToCents(amount: number): number {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/utils/formatters.ts:export function formatTransactionType(type: string): string {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/utils/formatters.ts:export function formatDate(date: Date | string): string {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/utils/formatters.ts:export function formatDateTime(date: Date | string): string {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/utils/formatters.ts:export function formatCardNumber(cardNumber: string): string {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/utils/formatters.ts:export function formatCardExpiry(month: number, year: number): string {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/consolidated.ts:export async function processPayment(options: PaymentOptions): Promise<PaymentResult> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/consolidated.ts: * Interface for navigation function from React Router
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/consolidated.ts: * @param navigate Optional React Router navigate function to use instead of window.location
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/consolidated.ts:export async function checkout(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/consolidated.ts:export async function verifyPayment(sessionId?: string, paymentId?: string): Promise<boolean> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/consolidated.ts:export async function createCustomer(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/consolidated.ts:export async function getCustomerPaymentMethods(customerId: string): Promise<any[]> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/consolidated.ts:export async function createSetupIntent(customerId: string): Promise<string | null> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/platformCredit.ts:export async function processPlatformCredit(options: CreditProcessingOptions): Promise<boolean> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/subscriptionService.ts:export const getUserSubscription = async (userId: string): Promise<SubscriptionData | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/subscriptionService.ts:export const updateUserSubscription = async (userId: string, subscriptionData: SubscriptionData): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/subscriptionService.ts:export const cancelUserSubscription = async (userId: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/edge/helpers.ts: * @file Helper functions for Edge Function implementations
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/edge/helpers.ts:export function createSupabaseAdmin(): SupabaseClient<Database> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/edge/helpers.ts:export function createStripeClient(): Stripe {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/edge/helpers.ts:export async function getOrCreateStripeCustomer(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/edge/helpers.ts:export function handleEdgeError(error: unknown, message: string = 'Edge function error'): {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/edge/helpers.ts:export async function processWebhookEvent(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/edge/helpers.ts:async function handlePaymentIntentSucceeded(paymentIntent: Stripe.PaymentIntent) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/edge/helpers.ts:async function handlePaymentIntentFailed(paymentIntent: Stripe.PaymentIntent) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/edge/helpers.ts:async function handleCheckoutSessionCompleted(session: Stripe.Checkout.Session) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/edge/helpers.ts:async function updateWalletBalance(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/edge/helpers.ts:  const balanceField = balanceFields.find(field => 
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/edge/index.ts: * @file Edge function interfaces for secure payment processing
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/standardCheckout.ts:export const initiateStandardCheckout = async (options: PaymentOptions): Promise<PaymentResult> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/paymentMethodEdge.ts:export const addCardToStripe = async (cardToken: string, userId: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/paymentMethodEdge.ts:export const removeCardFromStripe = async (cardId: string, userId: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/paymentVerification.ts:export const verifyPayment = async (sessionId: string, paymentId?: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/paymentVerification.ts:export const processEventAuthorizedPayments = async (eventId: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/paymentVerification.ts:    const processing = payments.map(async (payment) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/paymentVerification.ts:export const getEventAuthorizedPayments = async (eventId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/paymentVerification.ts:export const captureEventAuthorizedPayments = async (eventId: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/paymentVerification.ts:export const cancelEventAuthorizedPayments = async (eventId: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/hooks/usePayment.tsx:export const usePayment = (options: UsePaymentOptions = { initialFetch: true }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/hooks/usePayment.tsx:  const createCheckoutSession = useCallback(async (options: Omit<CheckoutSessionOptions, 'userId'>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/hooks/usePayment.tsx:  const hasSufficientCredits = useCallback((amount: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/hooks/usePayment.tsx:export const useWalletBalance = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/hooks/usePayment.tsx:export const useCheckout = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/hooks/usePayment.tsx:  const createCheckoutSession = useCallback(async (options: Omit<CheckoutSessionOptions, 'userId'>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/hooks/usePayment.tsx:  const clearCheckout = useCallback(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/hooks/usePayment.tsx:export const useTransactionHistory = (options: { limit?: number, offset?: number } = {}) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/hooks/usePayment.tsx:    // Helper functions
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/wallet.ts: * @file Consolidated wallet API functions
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/wallet.ts:export async function ensureWalletExists(userId: string): Promise<WalletRecord | null> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/wallet.ts:export async function getWallet(userId: string): Promise<Wallet | null> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/wallet.ts:export async function updateWallet(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/wallet.ts:export async function getFormattedBalance(userId: string): Promise<{
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/wallet.ts:export function formatCurrency(amount: number, currency = 'USD'): string {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/wallet.ts:function normalizeWalletRecord(record: WalletRecord): Wallet {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/credit.ts: * @file Consolidated platform credit API functions
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/credit.ts:export async function getBalance(userId: string): Promise<number> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/credit.ts:    const balanceField = WALLET_BALANCE_FIELDS.find(field => 
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/credit.ts:export async function addCredit(options: {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/credit.ts:export async function deductCredit(options: {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/credit.ts:    const balanceField = WALLET_BALANCE_FIELDS.find(field => 
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/credit.ts:export async function getTransactions(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/credit.ts:export async function hasEnoughCredit(userId: string, amount: number): Promise<boolean> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/credit.ts:export async function processPlatformCredit(options: CreditProcessingOptions): Promise<boolean> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/stripe.ts:export async function createCheckoutSession(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/stripe.ts:    // This function should call the edge function for security
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/stripe.ts:export async function createConnectedCheckoutSession(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/stripe.ts:    // This function should call the edge function for security
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/stripe.ts:export async function getCustomerPortalUrl(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/stripe.ts:export async function listPaymentMethods(userId: string): Promise<PaymentMethodType[]> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/stripe.ts:export async function deletePaymentMethod(paymentMethodId: string): Promise<boolean> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/stripe.ts:export async function setDefaultPaymentMethod(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/stripe.ts:export async function verifyPaymentIntent(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/core.ts: * This file contains the core API functions for the Payment Service.
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/core.ts:export const createSetupIntent = async (params: CreateSetupIntentParams): Promise<SetupIntent> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/core.ts:    const { data, error } = await supabase.functions.invoke('create-setup-intent', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/core.ts:export const getPaymentMethods = async (userId: string): Promise<PaymentMethod[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/core.ts:    const { data, error } = await supabase.functions.invoke('get-payment-methods', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/core.ts:    const { data, error } = await supabase.functions.invoke('detach-payment-method', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/core.ts:    const { data, error } = await supabase.functions.invoke('set-default-payment-method', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/core.ts:    const { data, error } = await supabase.functions.invoke('update-payment-method', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/core.ts:    const { data, error } = await supabase.functions.invoke('create-payment-intent', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/core.ts:    const { data, error } = await supabase.functions.invoke('confirm-payment-intent', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/core.ts:export const getPaymentIntent = async (paymentIntentId: string): Promise<PaymentIntent> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/core.ts:    const { data, error } = await supabase.functions.invoke('get-payment-intent', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/core.ts:export const cancelPaymentIntent = async (paymentIntentId: string): Promise<PaymentIntent> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/core.ts:    const { data, error } = await supabase.functions.invoke('cancel-payment-intent', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/core.ts:export const getOrCreateCustomer = async (params: CustomerParams): Promise<Customer> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/core.ts:    const { data, error } = await supabase.functions.invoke('get-or-create-customer', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/core.ts:export const updateCustomer = async (params: CustomerParams): Promise<Customer> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/core.ts:    const { data, error } = await supabase.functions.invoke('update-customer', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/core.ts:export const getCustomer = async (userId: string): Promise<Customer | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/core.ts:    const { data, error } = await supabase.functions.invoke('get-customer', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/core.ts:    const { data, error } = await supabase.functions.invoke('list-transactions', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/core.ts:export const getTransaction = async (transactionId: string): Promise<Transaction | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/core.ts:    const { data, error } = await supabase.functions.invoke('get-transaction', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/core.ts:export const createRefund = async (params: CreateRefundParams): Promise<Refund> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/core.ts:    const { data, error } = await supabase.functions.invoke('create-refund', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/core.ts:export const getRefund = async (refundId: string): Promise<Refund | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/core.ts:    const { data, error } = await supabase.functions.invoke('get-refund', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/core.ts:export const clearPaymentCaches = (): void => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/paymentMethods.ts:export async function getPaymentMethods(userId: string): Promise<PaymentMethod[]> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/paymentMethods.ts:export async function attachPaymentMethod(userId: string, paymentMethodId: string): Promise<boolean> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/paymentMethods.ts:export async function detachPaymentMethod(userId: string, paymentMethodId: string): Promise<boolean> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/paymentMethods.ts:export async function updateDefaultPaymentMethod(userId: string, paymentMethodId: string): Promise<boolean> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/transactions.ts: * @file Consolidated transaction API functions
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/transactions.ts:export async function createTransaction(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/transactions.ts:export async function getTransactionHistory(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/transactions.ts:export async function getTransactionsByPeriod(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/transactions.ts:export async function updateTransactionStatus(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/transactions.ts:export async function getTransactionStats(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/transactions.ts:export async function getTransactionById(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/api/transactions.ts:function normalizeTransactionRecord(record: TransactionRecord): Transaction {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/connectedCheckout.ts:export const completeConnectedCheckout = async (_paymentId: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/connectedCheckout.ts:export async function createConnectedCheckoutSession(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/connectedCheckout.ts:  // Implementation of createConnectedCheckoutSession function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/connectedCheckout.ts:  // This function is not provided in the original file or the code block
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/connectedCheckout.ts:  // It's assumed to exist as it's called in the completeConnectedCheckout function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/connectedCheckout.ts:  // This function should return a string representing the checkout session ID or null if it fails
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/index.ts: * This module exports the consolidated payment service functionality.
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/index.ts:// For backward compatibility, re-export the original functions
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/checkoutService.ts:// Navigation function type from React Router
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/checkoutService.ts:export const verifyCheckoutPayment = async (sessionId?: string, paymentId?: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/checkoutService.ts:// Export the initiateCheckout function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/verification.ts:export const getPaymentDoc = async (paymentId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/verification.ts:export const verifyPaymentStatus = async (paymentId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/verification.ts:export const updatePaymentStatus = async (paymentId: string, status: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/verification.ts:export const processPaymentVerification = async (paymentId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/webhookHandlers.ts:export async function handlePaymentIntentSucceeded(event: {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/webhookHandlers.ts:export async function handlePaymentIntentFailed(event: {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/webhookHandlers.ts:export async function handleCheckoutSessionCompleted(event: {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/webhookHandlers.ts:// Helper functions
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/webhookHandlers.ts:async function handlePaymentSuccess(paymentId: string) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/webhookHandlers.ts:async function handlePaymentFailure(paymentId: string) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/webhookHandlers.ts:async function fulfillOrder(orderId: string) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/handlers/platformCreditHandler.ts:export const handlePlatformCredit = async (options: ConnectedPaymentOptions): Promise<PaymentResult | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/handlers/stripe-session-handler.ts:    const { data, error } = await supabase.functions.invoke('create-stripe-checkout', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/handlers/stripe-session-handler.ts:export const retrieveSession = async (sessionId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/handlers/stripe-session-handler.ts:    const { data, error } = await supabase.functions.invoke('get-stripe-session', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/handlers/stripe-session-handler.ts:    const { data, error } = await supabase.functions.invoke('create-billing-portal', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/allOrNothingProcessor.ts:export const processAllOrNothingEvents = async (): Promise<void> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/allOrNothingProcessor.ts:export const checkEventFundingStatus = async (eventId: string): Promise<void> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/allOrNothingProcessor.ts:export const updateEventFundingProgress = async (eventId: string, pledgeAmount: number): Promise<void> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/allOrNothingProcessor.ts:async function processSuccessfulCrowdfunding(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/allOrNothingProcessor.ts:  // Implementation of processSuccessfulCrowdfunding function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/allOrNothingProcessor.ts:async function refundFailedCrowdfunding(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/allOrNothingProcessor.ts:  // Implementation of refundFailedCrowdfunding function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/allOrNothingProcessor.ts:async function sendNotification(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/allOrNothingProcessor.ts:  // Implementation of sendNotification function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/stripe/client.ts: * Handles all interactions with the Stripe API through secure server-side functions
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/stripe/client.ts:    this.apiEndpoint = `${config.supabaseUrl}/functions/v1/stripe`;
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/stripe/client.ts:   * Private method to call Stripe edge functions
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/stripe/client.ts:      const { data: responseData, error } = await client.functions.invoke(`stripe/${endpoint}`, {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/stripe/index.ts: * Provides complete Stripe payment processing functionality following the standard
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/stripe/index.ts:export async function createStripeCheckout(options: PaymentOptions): Promise<PaymentResult> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/stripe/index.ts:export async function createStripeCustomer(options: StripeCustomerOptions): Promise<string | null> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/stripe/index.ts:export async function createStripePaymentIntent(options: StripePaymentIntentOptions): Promise<string | null> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/stripe/index.ts:export async function verifyStripePayment(sessionId: string): Promise<StripeVerificationResult> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/stripe/index.ts:export async function processStripeCheckout(options: PaymentOptions): Promise<boolean> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/stripe/index.ts:async function updatePaymentStatus(sessionId: string, status: PaymentStatus, paymentId?: string): Promise<void> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/stripe/index.ts:    const { data } = await supabaseService.executeRawQuery<any[]>(async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/payment/stripe/index.ts:function calculateApplicationFee(amount: number, paymentType: string): number {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/mock/index.ts: * This file completely disables all mock functionality for production launch.
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/mock/index.ts:// All mock functions return null/empty for production
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/mock/index.ts:export const simulateDelay = async (delay: number = 0) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/mock/index.ts:export const shouldUseMock = (feature?: string): boolean => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/mock/index.ts:export const useRealData = () => true;
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/communityService.ts:    const communities: Community[] = (data || []).map((item) => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/communityService.ts:export const getCommunity = async (communityId: string): Promise<Community | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/communityService.ts:export const getUserCommunities = async (userId: string): Promise<Community[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/communityService.ts:    const communityIds = memberships.map(m => m.community_id).filter((id): id is string => id !== null);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/communityService.ts:    const uniqueCommunities = Array.from(new Map(allCommunities.map(community => 
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/communityService.ts:export const getCommunityCounts = async (userId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/communityService.ts:export const createCommunity = async (communityData: Partial<Community>, userId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/communityService.ts:export const updateCommunity = async (id: string, updates: Partial<Community>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/communityService.ts:export const deleteCommunity = async (id: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/communityService.ts:export const joinCommunity = async (communityId: string, userId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/communityService.ts:export const leaveCommunity = async (communityId: string, userId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/communityService.ts:export const requestToJoin = async (communityId: string, userId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/communityService.ts:export const handleJoinRequest = async (communityId: string, requestUserId: string, status: 'approved' | 'rejected') => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/creatorContentService.ts:export const getCreatorContent = async (): Promise<CreatorContent | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/helpCenterService.ts:export const searchHelpArticles = async (query: string): Promise<HelpArticle[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/helpCenterService.ts:export const getHelpArticles = async (): Promise<HelpArticle[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/helpCenterService.ts:export const getHelpArticleBySlug = async (slug: string): Promise<HelpArticle | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/helpCenterService.ts:    const article = data.find(item => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/helpCenterService.ts:export const incrementArticleViewCount = async (articleId: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/content/validation.ts:export const validateContent = (content: unknown, options: ContentValidationOptions = {}): ValidationResult => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/content/validation.ts:export const validateUniqueSlug = async (slug: string, type: string, excludeId?: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/content/queries.ts:export const getContentById = async (id: string): Promise<ContentItem | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/content/queries.ts:export const getContentBySlug = async (slug: string, type: ContentType): Promise<ContentItem | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/content/mutations/create.ts:export const createContent = async (content: Omit<ContentItem, 'id' | 'createdAt' | 'updatedAt'>): Promise<string | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/content/mutations/update.ts:export const updateContent = async (id: string, content: Partial<ContentItem>): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/content/mutations/delete.ts:export const deleteContent = async (id: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/message/conversation.ts: * Provides functions for managing conversations between users
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/message/conversation.ts:export const getConversations = async (userId: string): Promise<Conversation[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/message/conversation.ts:    const { data, error, status } = await supabaseService.executeRawQuery<any[]>(async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/message/conversation.ts:    const conversations: Conversation[] = data.map((conv: unknown) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/message/conversation.ts:export const createConversation = async (participants: string[]): Promise<Conversation> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/message/conversation.ts:    const { data: existingConv, error: searchError } = await supabaseService.executeRawQuery<any>(async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/message/conversation.ts:export const getConversationById = async (conversationId: string): Promise<Conversation | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/message/conversation.ts:export const deleteConversation = async (conversationId: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/message/index.ts: * Provides functions for messaging functionality throughout the application
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/message/index.ts:    const messages: Message[] = data.map((msg: unknown) => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/message/index.ts:export const markMessageAsRead = async (messageId: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/message/index.ts:    const { error, status } = await supabaseService.executeRawQuery(async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/message/index.ts:export const deleteMessage = async (messageId: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/message/index.ts: * @returns Unsubscribe function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/message/index.ts:export const subscribeToConversation = (conversationId: string, callback: (message: Message) => void) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/message/index.ts:  // Get the raw client to access the real-time functionality
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/message/index.ts:  // Return a function to unsubscribe
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/message/index.ts: * @returns Unsubscribe function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/message/index.ts:export const subscribeToUserConversations = (userId: string, callback: (conversation: Conversation) => void) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/message/index.ts: * @returns Unsubscribe function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/message/index.ts:export const subscribeToReadStatus = (conversationId: string, callback: (messageId: string) => void) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/message/index.ts:// Import conversation functions directly to avoid name conflicts
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/orderVerification.ts:export const checkOrderStatus = async (orderId: string): Promise<Order | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/orderVerification.ts:export const getOrderBySessionId = async (sessionId: string): Promise<Order | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/orderVerification.ts:export const verifyOrder = async (sessionId: string): Promise<{ success: boolean; error?: string }> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/core/errors.ts:export function createUserError(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/core/errors.ts:export function handleUserError(error: unknown, defaultMessage = 'An error occurred'): UserError {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/core/errors.ts:export function logUserError(error: unknown, context?: string): void {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/core/errors.ts:export function isUserErrorType(error: unknown, type: UserErrorType): boolean {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/core/client.ts:export async function getUserProfileFromDB(userId: string): Promise<UserProfile | null> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/core/client.ts:export function clearUserCache(userId: string): void {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/core/client.ts:export function clearAllUserCache(): void {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/tests/hooks.test.tsx:const createWrapper = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/tests/hooks.test.tsx:      const { result } = renderHook(() => useCurrentUser(), {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/tests/hooks.test.tsx:      const { result } = renderHook(() => useCurrentUser(), {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/tests/hooks.test.tsx:      const { result } = renderHook(() => useUser(userId), {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/tests/hooks.test.tsx:      const { result } = renderHook(() => useUser(undefined), {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/tests/hooks.test.tsx:      const { result } = renderHook(() => useUserByUsername(username), {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/tests/hooks.test.tsx:      const { result } = renderHook(() => useUpdateProfile(), {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/tests/hooks.test.tsx:      const { result } = renderHook(() => useUpdateProfile(), {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/tests/hooks.test.tsx:      const { result } = renderHook(() => useUploadProfileImage(), {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/tests/hooks.test.tsx:      const { result } = renderHook(() => useUserSettings(userId), {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/tests/hooks.test.tsx:      const { result } = renderHook(() => useUpdateUserSettings(), {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/tests/hooks.test.tsx:      const { result } = renderHook(() => useUserPreferences(userId), {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/tests/hooks.test.tsx:      const { result } = renderHook(() => useUpdateUserPreferences(), {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/tests/hooks.test.tsx:      const { result } = renderHook(() => useSignOut(), {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/tests/hooks.test.tsx:      const { result } = renderHook(() => useSignOut(), {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/tests/setup.ts:const localStorageMock = (() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/tests/api.test.ts: * @file Unit tests for User Service API functions
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/userState.ts:export const getCurrentUser = async (): Promise<User | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/userState.ts:export const updateUserData = async (userId: string, updates: UserUpdateData): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/userState.ts:export const getUserById = async (userId: string): Promise<User | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/userState.ts:export const createUserProfile = async (user: User): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/userState.ts:export const deleteUserProfile = async (userId: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/userState.ts:export const updateUserAvatar = async (userId: string, avatarUrl: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/userState.ts:export const getUserPreferences = async (userId: string): Promise<Record<string, unknown> | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/userState.ts:export const updateUserPreferences = async (userId: string, preferences: Record<string, unknown>): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/hooks/useUser.tsx:export function useCurrentUser() {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/hooks/useUser.tsx:export function useUser(userId?: string) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/hooks/useUser.tsx:export function useUserByUsername(username?: string) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/hooks/useUser.tsx:export function useUpdateProfile() {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/hooks/useUser.tsx:export function useUploadProfileImage() {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/hooks/useUser.tsx:export function useUserSettings(userId?: string) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/hooks/useUser.tsx:export function useUpdateUserSettings() {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/hooks/useUser.tsx:export function useUserPreferences(userId?: string) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/hooks/useUser.tsx:export function useUpdateUserPreferences() {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/hooks/useUser.tsx:export function useUploadUserFile() {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/hooks/useUser.tsx:export function useUserFiles(userId?: string, path?: string) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/hooks/useUser.tsx:export function useAddPlatformCredit() {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/hooks/useUser.tsx:export function useSignOut() {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/api/settings.ts:export async function getUserSettings(userId: string): Promise<UserSettings | null> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/api/settings.ts:export async function updateUserSettings(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/api/settings.ts:export async function initializeUserSettings(userId: string): Promise<UserSettings | null> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/api/settings.ts:export async function addPlatformCredit(userId: string, amount: number): Promise<boolean> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/api/settings.ts:export async function deductPlatformCredit(userId: string, amount: number): Promise<boolean> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/api/storage.ts:export async function uploadProfileImage(userId: string, file: File): Promise<string | null> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/api/storage.ts:export async function uploadUserFile(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/api/storage.ts:export async function deleteUserFile(userId: string, filePath: string): Promise<boolean> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/api/storage.ts:export async function listUserFiles(userId: string, path = 'general'): Promise<any[]> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/api/storage.ts:export async function getSignedUrl(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/api/preferences.ts:export async function getUserPreferences(userId: string): Promise<UserPreferences> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/api/preferences.ts:export async function updateUserPreferences(userId: string, preferences: Partial<UserPreferences>): Promise<boolean> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/api/preferences.ts:export async function updateThemePreference(userId: string, theme: 'light' | 'dark' | 'system'): Promise<boolean> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/api/preferences.ts:export async function updateLanguagePreference(userId: string, language: string): Promise<boolean> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/api/preferences.ts:export async function updateNotificationPreferences(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/api/preferences.ts:export async function updatePrivacyPreferences(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/api/preferences.ts:export async function resetUserPreferences(userId: string): Promise<boolean> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/api/profile.ts:export async function updateUserProfile(userId: string, updates: UserUpdateData): Promise<boolean> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/api/profile.ts:export async function createUserProfile(userId: string, profileData: UserUpdateData): Promise<boolean> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/api/profile.ts:export async function deleteUserProfile(userId: string): Promise<boolean> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/api/profile.ts:export async function updateUserAvatar(userId: string, avatarUrl: string): Promise<boolean> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/api/profile.ts:export async function searchUsers(query: string, limit = 10): Promise<any[]> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/api/auth.ts:export async function getCurrentUser(): Promise<User | null> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/api/auth.ts:export async function getUserById(userId: string): Promise<User | null> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/api/auth.ts:export async function getUserByUsername(username: string): Promise<User | null> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/api/auth.ts:export async function signOut(): Promise<boolean> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/api/auth.ts:export async function updateUserMetadata(metadata: Record<string, unknown>): Promise<boolean> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/index.ts:export const checkUsernameAvailability = async (username: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/index.ts:export const uploadProfileImage = async (userId: string, imageFile: File): Promise<string> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/index.ts:// Export current user functions from auth module
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/index.ts:// Export profile functions
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/index.ts:// Export settings functions
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user/index.ts:// Export preferences functions
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/storageService.ts:export const deleteFile = async (url: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/storageService.ts:export const getFileUrl = (bucket: string, path: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/subscriptionService.ts:export const subscribeToPro = async (userId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/product/analytics.ts:export const incrementProductViews = async (productId: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/product/analytics.ts:export const trackAddToCart = async (productId: string, userId?: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/product/queries.ts:export const getProducts = async (options: ProductQueryOptions = {}): Promise<Product[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/product/queries.ts:export const getProductById = async (productId: string): Promise<Product | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/product/queries.ts:export const getProductCategories = async (): Promise<string[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/product/utils.ts:export const castToProduct = (data: unknown): Product => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/product/categories.ts:export const getProductCategories = async (): Promise<string[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/product/categories.ts:export const getPopularCategories = async (limit: number = 5): Promise<{name: string, count: number}[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/product/mutations.ts:export const incrementProductViews = async (productId: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/product/mutations.ts:export const updateProductStock = async (productId: string, quantity: number): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/analyticsService.ts:// Basic tracking functions
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/analyticsService.ts:export const initializeAnalytics = (trackingId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/analyticsService.ts:export const trackPageView = (pathname: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/analyticsService.ts:export const trackProfileView = (userId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/analyticsService.ts:export const trackEvent = (category: string, action: string, label?: string, value?: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/analyticsService.ts:export const trackUserAction = (action: string, properties?: Record<string, unknown>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/analyticsService.ts:export const trackConversion = (eventName: string, value?: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/analyticsService.ts:// Real analytics data functions
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/analyticsService.ts:export const getEventAnalytics = async (dateRange?: { start: Date; end: Date }): Promise<EventAnalytics> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/analyticsService.ts:    const revenue = revenueData?.reduce((sum, tx) => sum + tx.amount_cents, 0) / 100 || 0;
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/analyticsService.ts:    const categoryCounts = categoryData?.reduce((acc, event) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/analyticsService.ts:export const getUserAnalytics = async (dateRange?: { start: Date; end: Date }): Promise<UserAnalytics> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/analyticsService.ts:    const activeUserIds = new Set(activeUserData?.map(e => e.creator_id) || []);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/analyticsService.ts:export const getRevenueAnalytics = async (dateRange?: { start: Date; end: Date }): Promise<RevenueAnalytics> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/analyticsService.ts:    const totalRevenue = revenueData?.reduce((sum, tx) => sum + tx.amount_cents, 0) / 100 || 0;
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/analyticsService.ts:    const monthlyRevenue = monthlyData?.reduce((sum, tx) => sum + tx.amount_cents, 0) / 100 || 0;
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/analyticsService.ts:export const getDashboardAnalytics = async (dateRange?: { start: Date; end: Date }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/storage/compatibility/storageService.ts:export const deleteFile = async (url: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/storage/compatibility/storageService.ts:export const getFileUrl = (bucket: string, path: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/storage/supabaseStorage.ts:      const existingBucketNames = existingBuckets?.map(b => b.name) || [];
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/storage/tests/storageClient.test.ts: * Unit tests for the storage client functionality.
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/storage/tests/useStorage.test.tsx: * Unit tests for the storage React hooks functionality.
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/storage/tests/useStorage.test.tsx:const createWrapper = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/storage/tests/useStorage.test.tsx:const createMockFile = (name = 'test.jpg', type = 'image/jpeg'): File => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/storage/tests/useStorage.test.tsx:      const { result } = renderHook(() => useUpload(), {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/storage/tests/useStorage.test.tsx:      const { result } = renderHook(() => useUpload(), {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/storage/tests/useStorage.test.tsx:      const { result } = renderHook(() => useUpload({ onSuccess }), {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/storage/tests/useStorage.test.tsx:      const { result } = renderHook(() => useUpload({ onError }), {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/storage/tests/useStorage.test.tsx:      const { result } = renderHook(() => useAvatarUpload({ onSuccess }), {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/storage/tests/useStorage.test.tsx:      const { result } = renderHook(() => useEventImageUpload(eventId, { onSuccess }), {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/storage/tests/useStorage.test.tsx:      const { result } = renderHook(() => usePodcastUpload(podcastId, { onSuccess }), {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/storage/tests/useStorage.test.tsx:      const { result, waitFor } = renderHook(() => useListFiles(StorageBucket.GENERAL), {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/storage/tests/useStorage.test.tsx:      const { result, waitFor } = renderHook(() => useListFiles(StorageBucket.GENERAL, options), {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/storage/tests/useStorage.test.tsx:      const { result } = renderHook(() => useDeleteFile({ onSuccess }), {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/storage/tests/useStorage.test.tsx:      const { result } = renderHook(() => useDeleteFile({ onError }), {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/storage/tests/storageOperations.test.ts: * Unit tests for the storage operations functionality.
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/storage/tests/storageOperations.test.ts:const createMockFile = (name: string, type: string): File => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/storage/hooks/useStorage.tsx:export const useUpload = (options: UseUploadOptions = {}) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/storage/hooks/useStorage.tsx:  const handleProgress = useCallback((progressData: UploadProgress) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/storage/hooks/useStorage.tsx:  const upload = useCallback(async (uploadOptions: UploadOptions) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/storage/hooks/useStorage.tsx:  const handleFileChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/storage/hooks/useStorage.tsx:  const reset = useCallback(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/storage/hooks/useStorage.tsx:export const useAvatarUpload = (options: UseUploadOptions = {}) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/storage/hooks/useStorage.tsx:  const upload = useCallback(async (uploadFile: File) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/storage/hooks/useStorage.tsx:export const useEventImageUpload = (eventId: string, options: UseUploadOptions = {}) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/storage/hooks/useStorage.tsx:  const upload = useCallback(async (uploadFile: File, type: 'banner' | 'thumbnail' = 'banner') => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/storage/hooks/useStorage.tsx:export const usePodcastUpload = (podcastId: string, options: UseUploadOptions = {}) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/storage/hooks/useStorage.tsx:  const uploadAudio = useCallback(async (uploadFile: File) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/storage/hooks/useStorage.tsx:  const uploadImage = useCallback(async (uploadFile: File, type: 'cover' | 'thumbnail' = 'cover') => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/storage/hooks/useStorage.tsx:export const useListFiles = (bucket: string, options: ListFilesOptions = {}) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/supabase/edge-functions.ts:// Base function to call Supabase Edge Functions with improved auth handling
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/supabase/edge-functions.ts:const callEdgeFunction = async (functionName: string, data?: unknown, options?: { method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/supabase/edge-functions.ts:    const { data: result, error } = await supabase.functions.invoke(functionName, {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/supabase/edge-functions.ts:      console.error(`Edge function ${functionName} error:`, error);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/supabase/edge-functions.ts:        const errorMessage = `${functionName} function error: ${error.message}`;
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/supabase/edge-functions.ts:    console.error(`Error calling edge function ${functionName}:`, error);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/supabase/edge-functions.ts:      toast.error(`Failed to execute ${functionName}. Please try again.`);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/supabase/edge-functions.ts:export const manageSecrets = async (action: 'GET' | 'PUT', data?: { name: string; value: string }) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/supabase/edge-functions.ts:export const createCheckoutSession = async (checkoutData: unknown) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/supabase/edge-functions.ts:export const getPaymentMethods = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/supabase/edge-functions.ts:export const createSetupIntent = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/supabase/edge-functions.ts:export const deletePaymentMethod = async (paymentMethodId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/supabase/edge-functions.ts:export const checkCustomerPaymentMethods = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/supabase/edge-functions.ts:export const checkSubscription = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/supabase/edge-functions.ts:export const cancelSubscription = async (subscriptionId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/supabase/edge-functions.ts:export const createCustomerPortalSession = async (returnUrl?: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/supabase/edge-functions.ts:export const getConnectAccountStatus = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/supabase/edge-functions.ts:export const createConnectOnboardingLink = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/supabase/edge-functions.ts:export const createConnectDashboardLink = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/supabase/client.ts:   * @param operation - Async function performing the Supabase operation
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/search/entity/transaction.ts:      const walletTransactions: Transaction[] = walletResult.data.map(wt => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/search/entity/transaction.ts:      const generalTransactions: Transaction[] = generalResult.data.map(gt => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/search/entity/venue.ts:    const venues: VenueSearchResult[] = (data || []).map(venue => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/search/entity/event.ts: * Real database-powered event search and discovery functionality.
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/search/entity/event.ts:      // Use the existing database function for geolocation-based search
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/search/entity/event.ts:      const transformedEvents: Event[] = paginatedEvents.map((event: any) => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/search/entity/event.ts:    const transformedEvents: Event[] = (data || []).map((event: any) => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/search/entity/event.ts:export const getTrendingEvents = async (limit: number = 10): Promise<Event[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/search/entity/event.ts:    const events: Event[] = (data || []).map(event => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/search/entity/event.ts:export const getFeaturedEvents = async (limit: number = 6): Promise<Event[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/search/entity/event.ts:    const events: Event[] = (data || []).map(event => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/search/entity/user.ts:    const users: User[] = (data || []).map(profile => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/search/utils.ts:export const buildSearchQuery = (query: string, filters?: SearchFilters): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/search/utils.ts:export const normalizeSearchTerm = (term: string): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/search/index.ts:    const items = (data || []).map(event => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/search/index.ts:    const items = (data || []).map(venue => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/studioService.ts:export const fetchFeaturedProjects = async (): Promise<Project[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/studioService.ts:export const fetchTeamMembers = async (): Promise<TeamMember[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/studioService.ts:    const teamMembers: TeamMember[] = (data || []).map(item => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/transactions/transactionService.ts:  const fetchWithRetry = async (): Promise<Transaction[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/compatibility/profileService.ts: * This file provides backward compatibility with legacy profile service functions.
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/compatibility/profileService.ts:export async function getUserProfile(userId: string): Promise<UserProfile | null> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/compatibility/profileService.ts:export async function getUserProfileByUsername(username: string): Promise<UserProfile | null> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/compatibility/profileService.ts:export async function createUserProfile(userId: string, data: unknown): Promise<UserProfile> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/compatibility/profileService.ts:export async function updateUserProfile(profileId: string, data: unknown): Promise<UserProfile> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/compatibility/profileService.ts:export async function updateProfileAvatar(profileId: string, file: File): Promise<UserProfile> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/compatibility/profileService.ts:export async function deleteUserProfile(profileId: string): Promise<void> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/compatibility/profileService.ts:export async function searchUserProfiles(query: string, page: number = 1): Promise<any> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/compatibility/profileService.ts:export async function checkUsernameAvailability(username: string): Promise<boolean> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/compatibility/profileService.ts:export function checkIfAdmin(profile: UserProfile | null): boolean {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/compatibility/profileService.ts:export function checkIfCreator(profile: UserProfile | null): boolean {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/compatibility/profileService.ts:export function formatUserDisplayName(profile: UserProfile | null): string {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/compatibility/profileService.ts:export function getUserAvatar(profile: UserProfile | null): string {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/tests/profileAPI.test.ts: * This file contains tests for the profile API functionality.
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/utils/profileUtils.ts: * This file provides utility functions for working with user profiles.
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/utils/profileUtils.ts:export function formatDisplayName(profile: UserProfile | null): string {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/utils/profileUtils.ts:export function getProfileAvatarUrl(profile: UserProfile | null): string {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/utils/profileUtils.ts:export function getProfileInitials(profile: UserProfile | null): string {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/utils/profileUtils.ts:export function isAdmin(profile: UserProfile | null): boolean {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/utils/profileUtils.ts:export function isCreator(profile: UserProfile | null): boolean {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/utils/profileUtils.ts:export function isOrganizer(profile: UserProfile | null): boolean {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/utils/profileUtils.ts:export function isBusiness(profile: UserProfile | null): boolean {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/utils/profileUtils.ts:export function isProfileActive(profile: UserProfile | null): boolean {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/utils/profileUtils.ts:export function isProfileDeleted(profile: UserProfile | null): boolean {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/utils/profileUtils.ts:export function isProfileSuspended(profile: UserProfile | null): boolean {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/utils/profileUtils.ts:export function isProfilePendingVerification(profile: UserProfile | null): boolean {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/utils/profileUtils.ts:export function isProfileFieldVisible(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/utils/profileUtils.ts:export function getAccountTypeLabel(accountType?: AccountType): string {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/utils/profileUtils.ts:export function getProfileStatusLabel(status?: ProfileStatus): string {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/utils/profileUtils.ts:export function formatContactInfo(profile: UserProfile | null): string {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/utils/profileUtils.ts:export function validateUsername(username: string): { isValid: boolean; message?: string } {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/utils/profileUtils.ts: * Group of profile utility functions
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/hooks/useProfile.tsx: * This file provides React hooks for using profile functionality in components.
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/hooks/useProfile.tsx:export function useProfileById(userId: string, options = { skip: false }) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/hooks/useProfile.tsx:    const fetchProfile = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/hooks/useProfile.tsx:  const refreshProfile = useCallback(async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/hooks/useProfile.tsx:export function useProfileByUsername(username: string, options = { skip: false }) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/hooks/useProfile.tsx:    const fetchProfile = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/hooks/useProfile.tsx:export function useProfileUpdate() {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/hooks/useProfile.tsx:  const updateProfile = useCallback(async (profileId: string, data: ProfileUpdateData) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/hooks/useProfile.tsx:  const updateProfileAvatar = useCallback(async (profileId: string, file: File) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/hooks/useProfile.tsx:export function useProfileSearch(initialParams: ProfileSearchParams = {}) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/hooks/useProfile.tsx:  const search = useCallback(async (params?: ProfileSearchParams) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/hooks/useProfile.tsx:  const nextPage = useCallback(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/hooks/useProfile.tsx:  const previousPage = useCallback(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/hooks/useProfile.tsx:export function useUsernameCheck() {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/hooks/useProfile.tsx:  const checkUsername = useCallback(async (username: string, excludeProfileId?: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/hooks/useProfile.tsx:export function useSuggestedUsernames() {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/hooks/useProfile.tsx:  const getSuggestions = useCallback(async (baseName: string, count: number = 5) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/api/profileAPI.ts: * This file provides functions for managing user profiles.
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/api/profileAPI.ts: * Standard error handler for profile API functions
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/api/profileAPI.ts:function handleProfileError(error: unknown, message: string): never {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/api/profileAPI.ts:export async function getProfileById(userId: string): Promise<UserProfile | null> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/api/profileAPI.ts:export async function getProfileByUsername(username: string): Promise<UserProfile | null> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/api/profileAPI.ts:export async function createProfile(profileData: ProfileCreateData): Promise<UserProfile> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/api/profileAPI.ts:export async function updateProfile(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/api/profileAPI.ts:export async function updateProfileAvatar(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/api/profileAPI.ts:export async function deleteProfile(profileId: string): Promise<void> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/api/profileAPI.ts:export async function searchProfiles(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/api/profileAPI.ts:export async function isUsernameAvailable(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/api/profileAPI.ts:export async function getSuggestedUsernames(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/api/profileAPI.ts:    const availabilityPromises = candidates.map(username => 
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/api/profileAPI.ts:function mapProfileFromDb(dbProfile: Record<string, any>): UserProfile {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/profile/api/profileAPI.ts: * Group of profile-related API functions
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/ai/lightweightAI.ts: * Reduces bundle size by 95% while maintaining core functionality
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/earnings/earningsService.ts:export const getUserEarnings = async (userId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/earnings/earningsService.ts:    const totalEarnings = data?.reduce((sum, transaction) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/earnings/earningsService.ts:export const calculateEarnings = (amount: number, isCreatorProgram: boolean = false) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/earnings/earningsService.ts:export const getYearlyEarnings = async (userId: string, year?: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/earnings/earningsService.ts:    const totalEarnings = data?.reduce((sum, transaction) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/earnings/earningsService.ts:export const getEarningStats = async (userId: string): Promise<EarningStats> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/earnings/earningsService.ts:    const totalEarnings = data?.reduce((sum, transaction) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/earnings/earningsService.ts:    const monthlyEarnings = data?.filter(transaction => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/earnings/earningsService.ts:    const yearlyEarnings = data?.filter(transaction => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/earnings/earningsService.ts:    const attendees = attendeeData?.reduce((sum, event) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/earnings/earningsService.ts:    const referralEarnings = referralData?.reduce((sum, transaction) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/earnings/earningsService.ts:    const sponsorshipEarnings = sponsorshipData?.reduce((sum, transaction) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/earnings/earningsTracker.ts:export async function fetchCreatorEarnings(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/earnings/earningsTracker.ts:async function fetchEventEarnings(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/earnings/earningsTracker.ts:    const eventIds = events.map(e => e.id);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/earnings/earningsTracker.ts:      const registrationsByEvent = registrations.reduce((acc, reg) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/earnings/earningsTracker.ts:        const event = events.find(e => e.id === eventId);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/earnings/earningsTracker.ts:    const platformFees = sources.reduce((sum, source) => sum + source.platformFee, 0);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/earnings/earningsTracker.ts:async function fetchProductEarnings(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/earnings/earningsTracker.ts:    const platformFees = sources.reduce((sum, source) => sum + source.platformFee, 0);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/earnings/earningsTracker.ts:async function fetchCommunityEarnings(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/earnings/earningsTracker.ts:    const platformFees = sources.reduce((sum, source) => sum + source.platformFee, 0);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/earnings/earningsTracker.ts:async function fetchWalletTransactions(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/earnings/earningsTracker.ts:async function calculateEarningsForPeriod(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/earnings/earningsTracker.ts:async function calculateAvailableBalance(creatorId: string): Promise<number> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/earnings/earningsTracker.ts:async function calculatePendingPayouts(creatorId: string): Promise<number> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/earnings/earningsTracker.ts:export async function getPayoutSchedule(creatorId: string): Promise<PayoutSchedule> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/earnings/earningsTracker.ts:export async function generateEarningsReport(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/earnings/earningsTracker.ts:export async function checkCreatorProgramStatus(creatorId: string): Promise<{
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/creditService.ts:export const hasEnoughCredits = async (userId: string, amount: number): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/creditService.ts:export const getPlatformCreditBalance = async (userId: string): Promise<number> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/creditService.ts:export const getUserPromotionalCredits = async (userId: string): Promise<PromotionCredit[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/creditService.ts:export const getAvailablePromotionalCredit = async (userId: string): Promise<number> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/wallet/webhook/webhookController.ts:export const handleWebhook = async (event: unknown) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/wallet/webhook/handlers/referralHandler.ts:export const handleReferralBonus = async (userId: string, referrerId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/wallet/webhook/handlers/referralHandler.ts:export const handleReferral = async (data: unknown) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/wallet/webhook/handlers/withdrawalHandler.ts:export const handleWithdrawal = async (data: unknown): Promise<{success: boolean, error?: any}> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/wallet/webhook/handlers/withdrawalHandler.ts:export const handleWithdrawalRequest = async (data: unknown): Promise<{success: boolean, error?: any}> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/wallet/webhook/handlers/depositHandler.ts:export const handleDeposit = async (data: unknown): Promise<{success: boolean, error?: any}> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/wallet/webhook/handlers/depositHandler.ts:export const handleSuccessfulDeposit = async (data: unknown): Promise<{success: boolean, error?: any}> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/wallet/webhook/logging/activityLogger.ts:export const logActivity = async (activityData: ActivityLog) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/wallet/webhook/logging/fraudDetection.ts:export const logFraudDetection = async (data: FraudDetectionData): Promise<void> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/wallet/balance.ts:export const getWalletBalance = async (userId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/wallet/balance.ts:export const useFormattedWalletBalance = (balance: unknown) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/wallet/referral/referralService.ts:export const getUserReferralCode = async (userId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/wallet/referral/referralService.ts:const generateReferralCode = (): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/wallet/referral/referralService.ts:export const applyReferralCode = async (userId: string, code: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/wallet/referral/referralService.ts:export const getReferralStats = async (userId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/wallet/referral/referralService.ts:export const getReferralTransactions = async (userId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/wallet/referral/index.ts:// Simple code generator function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/wallet/referral/index.ts:export const generateReferralCode = (userId?: string): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/wallet/walletService.ts:export const getWalletBalance = async (userId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/wallet/walletService.ts:export const getWalletTransactions = async (userId: string, limit = 50) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/wallet/webhookLogger.ts:export const logWebhookProcessing = async (webhook: WebhookData) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/wallet/stripePaymentService.ts:export const addCardPaymentMethod = async (cardElement: unknown): Promise<string | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/wallet/stripePaymentService.ts:    // Attach payment method to customer via edge function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/wallet/stripePaymentService.ts:    const { data, error: attachError } = await supabase.functions.invoke('attach-payment-method', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/wallet/stripePaymentService.ts:export const validateBankAccount = (accountLast4: string): boolean => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/wallet/stripePaymentService.ts:export const createPaymentIntent = async (amount: number, currency: string = 'usd'): Promise<string | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/wallet/stripePaymentService.ts:    const { data, error } = await supabase.functions.invoke('create-payment-intent', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/wallet/stripePaymentService.ts:export const confirmPayment = async (clientSecret: string, paymentMethodId: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/wallet/paymentMethods.ts:export const createPaymentMethod = async (userId: string, cardDetails: unknown): Promise<any> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/wallet/paymentMethods.ts:    const { data, error } = await supabase.functions.invoke('createStripePaymentMethod', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/wallet/paymentMethods.ts:export const addCardPaymentMethod = async (cardElement: unknown): Promise<string | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/wallet/paymentMethods.ts:    // Then attach it to the customer via our edge function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/wallet/paymentMethods.ts:    const { data, error } = await supabase.functions.invoke('attachStripePaymentMethod', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/wallet/paymentMethods.ts:    // Use the edge function to create and attach the bank account payment method
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/wallet/paymentMethods.ts:    const { data, error } = await supabase.functions.invoke('createBankAccountPaymentMethod', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/wallet/paymentMethods.ts:export const setDefaultPaymentMethod = async (userId: string, paymentMethodId: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/wallet/paymentMethods.ts:    const { data, error } = await supabase.functions.invoke('setDefaultStripePaymentMethod', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/wallet/paymentMethods.ts:export const getDefaultPaymentMethod = async (userId: string): Promise<PaymentMethod | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/wallet/paymentMethods.ts:export const getPaymentMethods = async (userId: string): Promise<PaymentMethod[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/wallet/paymentMethods.ts:    const { data, error } = await supabase.functions.invoke('getStripePaymentMethods', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/wallet/paymentMethods.ts:export const removePaymentMethod = async (userId: string, paymentMethodId: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/wallet/paymentMethods.ts:    const { data, error } = await supabase.functions.invoke('deleteStripePaymentMethod', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/wallet/transactions.ts:export const getWalletTransactions = async (userId: string, limit: number = 10) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/wallet/index.ts:    // Call Supabase edge function for withdrawal
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/wallet/index.ts:    const { data, error } = await supabase.functions.invoke('initiateWithdrawal', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/wallet/index.ts:    // Call Supabase edge function for transfer
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/wallet/index.ts:    const { data, error } = await supabase.functions.invoke('transferFunds', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/wallet/index.ts:// Export functions from the correct files
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/livekit/hooks/useLiveEvent.tsx:export function useLiveEvent(options: UseLiveEventOptions): UseLiveEventResult {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/livekit/hooks/useLiveEvent.tsx:  const connect = useCallback(async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/livekit/hooks/useLiveEvent.tsx:  const disconnect = useCallback(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/livekit/hooks/useLiveEvent.tsx:  const toggleAudio = useCallback(async (enabled: boolean) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/livekit/hooks/useLiveEvent.tsx:  const toggleVideo = useCallback(async (enabled: boolean) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/livekit/hooks/useLiveEvent.tsx:    const handleParticipantConnected = (participant: Participant) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/livekit/hooks/useLiveEvent.tsx:    const handleParticipantDisconnected = (participant: Participant) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/livekit/hooks/useLiveEvent.tsx:    const handleDisconnected = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/livekit/hooks/useLiveEvent.tsx:    const handleError = (err: Error) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/livekit/index.ts: * Provides functionality for real-time video/audio communication for live events
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/livekit/index.ts:export async function getLiveEventToken(options: LiveEventOptions): Promise<LiveEventToken> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/livekit/index.ts:export async function joinLiveEvent(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/livekit/index.ts:export function leaveLiveEvent(room: Room): void {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/livekit/index.ts:export async function toggleAudio(room: Room, enabled: boolean): Promise<void> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/livekit/index.ts:export async function toggleVideo(room: Room, enabled: boolean): Promise<void> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/livekit/index.ts:export function getLiveEventStats(room: Room): LiveEventStats {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/compatibility/managementAPI.ts:// Export all functions as default for legacy imports
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/compatibility/locationAPI.ts:// Export all functions as default for legacy imports
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/compatibility/analyticsAPI.ts:// Export all functions as default for legacy imports
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/compatibility/apiService.ts: * This file provides backward compatibility with legacy API service functions
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/managementAPI.ts: * Provides functions to fetch management dashboard data from the backend.
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/managementAPI.ts:export async function getManagementData(): Promise<any> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/locationAPI.ts: * Provides functions to fetch and save user/location data.
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/locationAPI.ts: * Uses a Postgres RPC function 'get_events_near_location'.
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/locationAPI.ts:export async function fetchEventsNearLocation(lat: number, lng: number, radiusKm: number = 25): Promise<any[]> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/locationAPI.ts:export async function fetchPopularLocations(): Promise<string[]> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/locationAPI.ts:export async function saveUserLocation(userId: string, location: string): Promise<void> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/analyticsAPI.ts: * Provides functions to fetch analytics and service metrics data.
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/analyticsAPI.ts:export async function getPerformanceMetrics(): Promise<PerformanceMetric[]> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/analyticsAPI.ts:export async function getServiceMetrics(): Promise<ServiceMetric[]> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/core/types.ts: * Request interceptor function type
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/core/types.ts: * Response interceptor function type
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/location/index.ts: * Provides functions to fetch and save user/location data using the consolidated API client.
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/location/index.ts:export async function fetchEventsNearLocation(lat: number, lng: number, radiusKm: number = 25): Promise<Event[]> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/location/index.ts:export async function fetchPopularLocations(): Promise<string[]> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/location/index.ts:export async function saveUserLocation(userId: string, location: string): Promise<void> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/liveEvent/index.ts: * Provides functions to interact with the LiveKit server for live events.
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/liveEvent/index.ts:export async function getLiveEventToken(request: LiveEventTokenRequest): Promise<LiveEventTokenResponse> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/liveEvent/index.ts:export async function getLiveEventDetails(eventId: string): Promise<LiveEventDetails> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/liveEvent/index.ts:export async function getUpcomingLiveEvents(limit: number = 10): Promise<LiveEventDetails[]> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/liveEvent/index.ts:export async function createLiveEvent(eventDetails: Omit<LiveEventDetails, 'id' | 'participantCount' | 'status'>): Promise<LiveEventDetails> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/liveEvent/index.ts:export async function updateLiveEvent(eventId: string, updates: Partial<LiveEventDetails>): Promise<LiveEventDetails> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/liveEvent/index.ts:export async function cancelLiveEvent(eventId: string): Promise<void> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/tests/location.test.ts:      const defaultRadius = 25; // Default value in the function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/tests/compatibility.test.ts: * with legacy API functions while using the consolidated API modules.
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/tests/apiClient.test.ts:      const requestInterceptor: RequestInterceptorFn = vi.fn((request) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/tests/apiClient.test.ts:      const responseInterceptor: ResponseInterceptorFn = vi.fn((response: ApiResponse<any>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/tests/apiClient.test.ts:      const requestInterceptor1: RequestInterceptorFn = vi.fn((request) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/tests/apiClient.test.ts:      const requestInterceptor2: RequestInterceptorFn = vi.fn((request) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/management/index.ts: * Provides functions to fetch management dashboard data using the consolidated API client.
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/management/index.ts:export async function getManagementData(): Promise<ManagementData> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/utils/apiUtils.ts: * This file provides utility functions for common API operations.
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/utils/apiUtils.ts:export function addQueryParams(url: string, params?: Record<string, unknown>): string {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/utils/apiUtils.ts:export async function fetchPaginatedData<T>(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/utils/apiUtils.ts: * @param requests - Array of request functions that return promises
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/utils/apiUtils.ts:export async function batchRequests<T>(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/utils/apiUtils.ts:  const timeoutPromise = new Promise<never>((_, reject) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/utils/apiUtils.ts:  const processBatch = async (): Promise<void> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/utils/apiUtils.ts:      const requestPromise = (async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/utils/apiUtils.ts: * Creates a debounced API request function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/utils/apiUtils.ts: * @returns Debounced function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/utils/apiUtils.ts:export function debounceRequest<T, A extends any[]>(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/utils/apiUtils.ts:export function handleApiError(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/utils/apiUtils.ts:export function createFormData(data: Record<string, unknown>): FormData {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/utils/url.ts: * URL utility functions for API client service
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/utils/url.ts:export function addQueryParams(url: string, params?: Record<string, unknown>): string {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/utils/url.ts:export function joinUrl(...segments: string[]): string {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/utils/url.ts:export function isAbsoluteUrl(url: string): boolean {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/utils/index.ts: * This file exports all utility functions for the API client service.
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/hooks/useApi.tsx:function useApiBase<T = any, P = any>(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/hooks/useApi.tsx:export function useApiGet<T = any>(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/hooks/useApi.tsx:  const refetch = useCallback(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/hooks/useApi.tsx:export function useApiPost<T = any, B = any>(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/hooks/useApi.tsx:export function useApiRequest<T = any, B = any>(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/hooks/useApi.tsx:export function useApiPut<T = any, B = any>(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/hooks/useApi.tsx:export function useApiPatch<T = any, B = any>(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/hooks/useApi.tsx:export function useApiDelete<T = any, B = any>(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/client/supabaseClient.ts:export async function executeSupabaseQuery<T>(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/client/supabaseClient.ts:export function getSupabaseAuthStatus() {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/client/clients.ts:export function createApiClient(config = {}) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/analytics/index.ts: * Provides functions to fetch analytics and service metrics data using the consolidated API client.
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/analytics/index.ts:export async function getPerformanceMetrics(): Promise<PerformanceMetric[]> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/api/analytics/index.ts:export async function getServiceMetrics(): Promise<ServiceMetric[]> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/podcast/comments.ts:export const addPodcastComment = async (comment: Omit<PodcastComment, 'id' | 'createdAt'>): Promise<PodcastComment | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/podcast/comments.ts:export const getPodcastComments = async (podcastId: string): Promise<PodcastComment[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/podcast/comments.ts:export const deleteComment = async (commentId: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/podcast/queries.ts:export const getPodcast = async (id: string): Promise<Podcast | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/podcast/queries.ts:export const getFeaturedPodcasts = async (limit = 10): Promise<Podcast[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/podcast/queries.ts:      const podcasts = data.map(item => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/podcast/queries.ts:export const getRecommendedPodcasts = async (userId: string, limit = 5): Promise<Podcast[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/podcast/utils.ts:  const checkStalled = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/podcast/utils.ts:  const progressCallback = (progress: number) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/podcast/utils.ts:  // Cleanup function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/podcast/utils.ts:  const cleanup = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/podcast/utils.ts:export const formatPodcastDuration = (seconds: number): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/podcast/utils.ts:export const validatePodcastData = (data: Record<string, unknown>): { valid: boolean, errors: string[] } => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/podcast/mutations.ts:export const createPodcast = async (podcastData: CreatePodcastDTO) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/podcast/mutations.ts:export const updatePodcast = async (podcastId: string, data: unknown): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/podcast/mutations.ts:export const deletePodcast = async (podcastId: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/podcast/mutations.ts:export const incrementPodcastPlays = async (podcastId: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/podcast/index.ts:// Make sure these specific functions are properly exported
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/podcast/podcastService.ts:const getAppClient = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/podcast/podcastService.ts:const getStripePromise = async () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/podcast/podcastService.ts:      const { data, error } = await supabase.functions.invoke('create-podcast-subscription', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/podcast/podcastService.ts:      const { error } = await supabase.functions.invoke('cancel-subscription', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/podcast/podcastService.ts:      // Use type assertion to bypass TypeScript's function name checking
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/podcast/podcastService.ts:      // This allows us to call a custom RPC function that might not be in TypeScript's type definitions
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/ticketService.ts:export const getUserTickets = async (userId: string): Promise<Ticket[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/ticketService.ts:export const getEventTickets = async (eventId: string): Promise<Ticket[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/ticketService.ts:export const validateTicket = async (ticketId: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/ticketService.ts:export const scanTicket = async (ticketId: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/ticketService.ts:export const verifyTicketByCode = async (ticketCode: string, eventId: string): Promise<Ticket | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/venue/venueOperations.ts:export const getVenueById = async (id: string): Promise<Venue | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/venue/venueOperations.ts:export const createVenue = async (venue: Omit<Venue, 'id' | 'created_at' | 'updated_at'>): Promise<Venue | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/venue/venueOperations.ts:export const getFeaturedVenues = async (limit: number = 6): Promise<Venue[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/venue/index.ts:export const updateVenueStatus = async (venueId: string, status: 'pending' | 'active' | 'suspended'): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/venue/index.ts:export const toggleFeatured = async (venueId: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/venue/venueConverter.ts:export function toSupabase(venue: Venue): Record<string, unknown> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/venue/venueConverter.ts:export function fromSupabase(record: SupabaseVenue): Venue {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/venue/venueConverter.ts:export function processVenueList(venues: SupabaseVenue[]): Venue[] {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/stripe-connect/history.ts:export const getConnectedPaymentHistory = async (creatorId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/stripe-connect/history.ts:export const getTransferHistory = async (creatorId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/stripe-connect/types.ts: * Types for Stripe Connect functionality
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/stripe-connect/config.ts:export const getPlatformFeePercent = (isCreatorProgram: boolean = false): number => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/stripe-connect/config.ts:export const calculatePlatformFee = (amount: number, isCreatorProgram: boolean = false): number => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/stripe-connect/payments.ts:export const createConnectedPayment = async (options: ConnectedPaymentOptions): Promise<PaymentResult> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/index.ts: * ✅ Authentication Service - Core auth functionality with Supabase integration
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/index.ts: * ⏳ Search Service - Unified search functionality
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/podcastService.ts:export const createPodcast = async (podcastData: Partial<Podcast>, audioFile?: File, thumbnailFile?: File): Promise<string | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/podcastService.ts:export const getUserPodcasts = async (userId: string): Promise<Podcast[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/podcastService.ts:export const getPublicPodcasts = async (): Promise<Podcast[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/podcastService.ts:export const recordPodcastPlay = async (podcastId: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/podcast.ts:export const getPodcast = async (id: string): Promise<Podcast | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/podcast.ts:export const getFeaturedPodcasts = async (limit = 10): Promise<Podcast[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/podcast.ts:export const getPodcasts = async (type: 'featured' | 'new' | 'trending' = 'featured'): Promise<Podcast[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/platformCredit/index.ts:export const getPlatformCreditBalance = async (userId: string): Promise<number> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/platformCredit/index.ts:    const balance = data?.reduce((total, transaction) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/platformCredit/index.ts:export const getCreditTransactionHistory = async (userId: string): Promise<PlatformCreditTransaction[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/platformCredit/index.ts:// Additional functions for backward compatibility
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/platformCredit/index.ts:export const canUsePlatformCredit = (options: unknown): boolean => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/platformCredit/index.ts:export const processPlatformCredit = async (options: unknown): Promise<any> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/platformCredit/index.ts:export const hasEnoughCredit = async (userId: string, amount: number): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/platformCredit/index.ts:export const getPlatformCreditStats = async (userId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/promotionUtils.ts:export const calculatePromotionEstimate = (impressions: number, clicks: number): number => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/promotionUtils.ts:export const getPromotedContentForUser = async (userId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/promotionUtils.ts:export const trackPromotionImpression = async (promotionId: string, userId?: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/promotionUtils.ts:export const trackPromotionEngagement = async (promotionId: string, engagementType: 'click' | 'conversion' | 'share', userId?: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/promotionUtils.ts:export const getPromotableItems = async (userId: string, type?: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/promotionUtils.ts:        const formattedData = data.map(item => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/community/utils/cache.ts:export const generateCacheKey = (params: Record<string, any>): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/community/subscription/hooks.tsx:export const useCommunitySubscriptionSettings = (communityId: string | undefined) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/community/subscription/hooks.tsx:export const useUpdateCommunitySubscriptionSettings = (communityId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/community/subscription/hooks.tsx:export const useSubscribeToCommunity = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/community/subscription/hooks.tsx:export const useUnsubscribeFromCommunity = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/community/subscription/hooks.tsx:export const useCreateCommunityEvent = (communityId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/community/subscription/api.ts: * API functions for community subscription management
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/community/subscription/api.ts:    const subscribers: CommunitySubscriber[] = data.map(item => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/community/hooks/useCommunity.tsx:export const useCommunity = (id: string | undefined) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/community/hooks/useCommunity.tsx:export const useSearchCommunities = (params: CommunitySearchParams) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/community/hooks/useCommunity.tsx:export const useFeaturedCommunities = (limit: number = 5) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/community/hooks/useCommunity.tsx:export const useUserCommunities = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/community/hooks/useCommunity.tsx:export const useUserMemberships = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/community/hooks/useCommunity.tsx:export const useCreateCommunity = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/community/hooks/useCommunity.tsx:export const useUpdateCommunity = (id: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/community/hooks/useCommunity.tsx:export const useDeleteCommunity = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/community/hooks/useCommunity.tsx:export const useJoinCommunity = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/community/hooks/useCommunity.tsx:export const useLeaveCommunity = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/community/hooks/useCommunity.tsx:export const useUpdateMemberRole = (communityId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/community/hooks/useCommunityPosts.tsx:export const useCreateCommunityPost = (communityId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/community/hooks/useCommunityPosts.tsx:export const useUpdateCommunityPost = (communityId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/community/hooks/useCommunityPosts.tsx:export const useDeleteCommunityPost = (communityId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/community/hooks/useCommunityPosts.tsx:export const useTogglePostPin = (communityId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/community/hooks/useCommunityMedia.tsx:export const useUploadCommunityMedia = (communityId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/community/hooks/useCommunityMedia.tsx:export const useDeleteCommunityMedia = (communityId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/community/hooks/useCommunityMedia.tsx:export const useUpdateCommunityMediaDescription = (communityId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/community/api/core.ts: * Core API functions for community service
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/community/api/core.ts:export const getCommunity = async (id: string): Promise<CommunityWithMemberCount | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/community/api/core.ts:export const getUserCommunities = async (userId: string): Promise<CommunityWithMemberCount[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/community/api/core.ts:export const getUserMemberships = async (userId: string): Promise<CommunityWithMemberCount[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/community/api/core.ts:    const communityIds = data.map(item => item.community_id).filter((id): id is string => id !== null);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/community/api/core.ts:export const deleteCommunity = async (id: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/community/api/posts.ts: * API functions for community posts management
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/community/api/posts.ts:export const deleteCommunityPost = async (postId: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/community/api/posts.ts:export const togglePostPin = async (postId: string, isPinned: boolean): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/community/api/media.ts: * API functions for community media management
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/community/api/media.ts:export const deleteCommunityMedia = async (mediaId: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/community/index.ts:// Export API functions
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/promotionService/credits.ts:export async function getAvailablePromotionalCredit(userId: string): Promise<number> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/promotionService/credits.ts:export async function deductPromotionalCredit(userId: string, amount: number): Promise<boolean> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/promotionService/credits.ts:export const getUserPromotionalCredits = async (userId: string): Promise<PromotionCredit[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/promotionService/analytics.ts:export const getPromotionAnalytics = async (promotionId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/promotionService/api.ts:export const getActivePromotions = async (type?: 'venues' | 'caterers'): Promise<PromotionData[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/promotionService/api.ts:    const promotions = (data || []).map(item => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/promotionService/api.ts:export const getPromotionById = async (id: string): Promise<PromotionData | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/promotionService/api.ts:export const createPromotion = async (promotion: Omit<PromotionData, 'id'>): Promise<string | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/promotionService/api.ts:export const updatePromotion = async (id: string, data: Partial<PromotionData>): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/promotionService/api.ts:export const deletePromotion = async (id: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/promotionService/create.ts:export const createPromotion = async (promotion: Omit<PromotionSettings, "id" | "createdAt" | "updatedAt">): Promise<string | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/promotionService/create.ts:      const { data, error } = await supabase.functions.invoke('createPromotionPayment', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/compatibility/eventService.ts: * It maps old function signatures to the new modular API.
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/compatibility/eventService.ts:export async function getEventById(eventId: string): Promise<Event> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/compatibility/eventService.ts:export async function searchEventsByFilters(filters: any): Promise<Event[]> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/compatibility/eventService.ts:export async function createNewEvent(eventData: any, userId: string): Promise<Event> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/compatibility/eventService.ts:export async function updateExistingEvent(eventId: string, eventData: any): Promise<Event> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/compatibility/eventService.ts:export async function removeEvent(eventId: string): Promise<boolean> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/compatibility/eventService.ts:export async function publishEventById(eventId: string): Promise<Event> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/compatibility/eventService.ts:export async function cancelEventById(eventId: string, reason?: string): Promise<Event> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/compatibility/eventService.ts:export async function fetchUpcomingEvents(limit = 10): Promise<Event[]> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/compatibility/eventService.ts:export async function fetchFeaturedEvents(limit = 5): Promise<Event[]> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/compatibility/eventService.ts:export async function fetchUserEvents(userId: string, page = 0, limit = 20): Promise<Event[]> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/compatibility/eventService.ts:// Helper functions to map legacy values to new enums
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/compatibility/eventService.ts:function mapLegacyEventType(type?: string): EventType {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/compatibility/eventService.ts:function mapLegacyStatus(status?: string): EventStatus {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/compatibility/eventService.ts:function mapLegacyVisibility(visibility?: string): EventVisibility {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/search.ts:    const events = (data || []).map((event: unknown) => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/queries.ts:export const getEvents = async (limit: number = 10, filters?: Partial<EventSearchProps>): Promise<Event[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/queries.ts:export const getFeaturedEvents = async (): Promise<Event[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/tests/eventHooks.test.tsx: * These tests verify the functionality of the Event Service React hooks.
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/tests/eventHooks.test.tsx:const createWrapper = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/tests/eventHooks.test.tsx:      const { result } = renderHook(() => useEvent('123'), {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/tests/eventHooks.test.tsx:      const { result } = renderHook(() => useEventSearch(searchParams), {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/tests/eventHooks.test.tsx:      const { result } = renderHook(() => useUpcomingEvents(5), {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/tests/eventHooks.test.tsx:      const { result } = renderHook(() => useCreateEvent(), {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/tests/eventHooks.test.tsx:      const { result } = renderHook(() => useUpdateEvent(), {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/tests/eventHooks.test.tsx:      const { result } = renderHook(() => useDeleteEvent(), {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/tests/eventApi.test.ts: * These tests verify the functionality of the Event Service API functions.
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/tests/eventApi.test.ts:      // Call the function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/tests/eventApi.test.ts:      // Call the function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/tests/eventApi.test.ts:      // Call the function and expect it to throw
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/tests/eventApi.test.ts:      // Call the function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/tests/eventApi.test.ts:      // Call the function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/tests/eventApi.test.ts:      // Call the function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/tests/eventApi.test.ts:      // Call the function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/utils/errorHandling.ts:export function handleApiError<T>(message: string, error: unknown, defaultValue?: T): T {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/utils/errorHandling.ts:export function formatValidationErrors(errors: Record<string, string>): string {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/utils/errorHandling.ts:export function isErrorCode(error: unknown, code: string): boolean {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/utils/errorHandling.ts:export function isNotFoundError(error: unknown): boolean {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/utils/errorHandling.ts:export function isForeignKeyViolation(error: unknown): boolean {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/utils/errorHandling.ts:export function isUniqueConstraintViolation(error: unknown): boolean {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/utils/cache.ts:export function generateSearchCacheKey(params: Record<string, any>): string {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/utils/cache.ts:export function clearAllCaches(): void {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/utils/cache.ts:export function clearEventCache(eventId: string): void {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/utils/transformers.ts: * These functions transform data between the database format and the application format.
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/utils/transformers.ts:export function transformEventData(data: any): Event {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/utils/transformers.ts:export function mapEventType(type: string): EventType {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/utils/transformers.ts:export function mapEventStatus(status: string): EventStatus {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/utils/transformers.ts:export function mapEventVisibility(visibility: string): EventVisibility {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/utils/transformers.ts:export function mapTicketType(type: string): TicketType {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/streamService.ts:export const startStream = async (eventId: string): Promise<string | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/streamService.ts:export const cancelStream = async (eventId: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/streamService.ts:export const getUpcomingStreams = async (limit = 6): Promise<StreamEvent[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/streamService.ts:export const getStreamStatus = async (eventId: string): Promise<StreamStatus | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/hooks/useEvents.tsx:export function useEvent(eventId: string, options = {}) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/hooks/useEvents.tsx:export function useEventSearch(params: EventSearchParams, options = {}) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/hooks/useEvents.tsx:export function useUpcomingEvents(limit = 10, options = {}) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/hooks/useEvents.tsx:export function useFeaturedEvents(limit = 5, options = {}) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/hooks/useEvents.tsx:export function useUserEvents(userId: string, page = 0, limit = 20, options = {}) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/hooks/useEvents.tsx:export function useCreateEvent() {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/hooks/useEvents.tsx:export function useUpdateEvent() {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/hooks/useEvents.tsx:export function useDeleteEvent() {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/hooks/useEvents.tsx:export function usePublishEvent() {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/hooks/useEvents.tsx:export function useCancelEvent() {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/maintenance.ts:export const cleanupExpiredEvents = async (): Promise<void> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/maintenance.ts:    const expiredEventIds = expiredEvents.map(event => event.id);
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/maintenance.ts:export const updateEventStatuses = async (): Promise<void> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/api/core.ts: * This file contains the core API functions for the Event Service.
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/api/core.ts: * These functions handle CRUD operations for events.
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/api/core.ts:export async function createEvent(params: CreateEventParams, userId: string): Promise<Event> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/api/core.ts:      const ticketTiersData = params.ticketTiers.map(tier => ({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/api/core.ts:export async function getEvent(eventId: string): Promise<Event> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/api/core.ts:export async function updateEvent(params: UpdateEventParams): Promise<Event> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/api/core.ts:export async function deleteEvent(eventId: string): Promise<boolean> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/api/core.ts:export async function publishEvent(eventId: string): Promise<Event> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/api/core.ts:export async function cancelEvent(eventId: string, reason?: string): Promise<Event> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/api/core.ts:export async function searchEvents(params: EventSearchParams): Promise<EventSearchResult> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/api/core.ts:export async function getUserEvents(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/api/core.ts:export async function getUpcomingEvents(limit = 10): Promise<Event[]> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/api/core.ts:export async function getFeaturedEvents(limit = 5): Promise<Event[]> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/mutations.ts:export const createEvent = async (data: EventCreateData): Promise<string | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/mutations.ts:export const deleteEvent = async (eventId: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/mutations.ts:export const publishEvent = async (eventId: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/mutations.ts:export const cancelEvent = async (eventId: string, reason?: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/mutations.ts:export const duplicateEvent = async (eventId: string): Promise<string | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/mutations.ts:    const revenue = tickets.data?.reduce((sum, ticket) => sum + (ticket.price_in_cents || 0), 0) || 0;
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/mutations.ts:export const recordEventView = async (eventId: string, userId?: string): Promise<void> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/index.ts: * This service provides functionality for managing events, including creation,
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/event/index.ts: * The service follows a modular structure with separate modules for API functions,
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/db.ts:export const getPaymentDoc = async (paymentId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/db.ts:export const fetchPaymentDocument = async (paymentId: string): Promise<any> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user.ts:// Keep the uploadProfileImage function here as it's unique
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user.ts:export const uploadProfileImage = async (userId: string, file: File): Promise<string> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/user.ts:export const getUserByUsername = async (username: string): Promise<User | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/subscriptionCheckService.ts:export const checkUserSubscription = async (userId: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/userSettingsService.ts:export const getUserSettings = async (userId: string): Promise<UserSettings | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/userSettingsService.ts:export const initializeUserSettings = async (userId: string): Promise<UserSettings | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/userSettingsService.ts:export const getUserTransactions = async (userId: string) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/userSettingsService.ts:export const addPlatformCredit = async (userId: string, amount: number): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/validation/inputValidation.ts: * Utility functions for validating user inputs
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/validation/inputValidation.ts:export const sanitizeSearchString = (input: string): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/validation/inputValidation.ts:export const validateLocation = (location?: string): boolean => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/validation/inputValidation.ts:export const validatePriceRange = (priceRange?: string[]): boolean => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/validation/inputValidation.ts:export const validateCuisine = (cuisine?: string): boolean => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/validation/inputValidation.ts:export const validateDiet = (diet?: string): boolean => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/validation/inputValidation.ts:export const validateDate = (date?: string): boolean => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/validation/inputValidation.ts:export const sanitizeCatererFilters = (filters: unknown) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/analytics/secureAnalytics.ts: * Uses the secure database functions created in the security migration
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/analytics/secureAnalytics.ts:export const getDailyAnalytics = async (date: Date = new Date()): Promise<DailyAnalytics | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/analytics/secureAnalytics.ts:export const getUserAnalytics = async (userId: string): Promise<UserAnalytics | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/analytics/secureAnalytics.ts:export const getEventAnalytics = async (eventId: string): Promise<EventAnalytics | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/analytics/secureAnalytics.ts:export const getDashboardAnalytics = async (): Promise<DashboardAnalytics[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/analytics/secureAnalytics.ts:export const triggerDailyAnalyticsUpdate = async (): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/analytics/secureAnalytics.ts:export const cleanupOldAnalytics = async (daysToKeep: number = 90): Promise<number> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/analytics/utils/deviceInfo.ts:export const getDeviceInfo = (): DeviceInfo => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/analytics/utils/deviceInfo.ts:export const getDeviceType = (): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/analytics/utils/deviceInfo.ts:export const isMobileDevice = (): boolean => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/analytics/utils/deviceInfo.ts:export const isTabletDevice = (): boolean => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/analytics/utils/deviceInfo.ts:export const isDesktopDevice = (): boolean => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/analytics/logUserAction.ts:export const logUserAction = async (action: UserAction) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/analytics/hooks/useAnalytics.tsx:export const useAnalytics = (props?: UseAnalyticsProps) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/analytics/hooks/useAnalytics.tsx:    // Return cleanup function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/analytics/hooks/useAnalytics.tsx:  const trackEvent = useCallback((eventName: string, properties?: Record<string, unknown>, category: EventCategory = EventCategory.CUSTOM) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/analytics/hooks/useAnalytics.tsx:  const trackInteraction = useCallback((action: string, element: string, properties?: Record<string, unknown>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/analytics/hooks/useAnalytics.tsx:  const trackFormSubmission = useCallback((formName: string, success: boolean, properties?: Record<string, unknown>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/analytics/hooks/useAnalytics.tsx:  const trackConversion = useCallback((conversionType: string, value?: number, properties?: Record<string, unknown>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/analytics/hooks/useAnalytics.tsx:  const trackError = useCallback((errorMessage: string, errorCode?: string, properties?: Record<string, unknown>) => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/analytics/api/analyticsAPI.ts: * This file implements the core analytics API functions.
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/analytics/api/analyticsAPI.ts:function generateSessionId(): string {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/analytics/api/analyticsAPI.ts:export const initialize = async (customConfig?: Partial<AnalyticsConfig>): Promise<void> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/analytics/api/analyticsAPI.ts:function setupErrorTracking(): void {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/analytics/api/analyticsAPI.ts:function setupPerformanceTracking(): void {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/analytics/api/analyticsAPI.ts:export const registerProvider = (name: string, provider: AnalyticsProvider): void => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/analytics/api/analyticsAPI.ts:export const unregisterProvider = (name: string): void => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/analytics/api/analyticsAPI.ts:export const getCommonProperties = (): EventCommonProperties => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/analytics/api/analyticsAPI.ts:export const trackEvent = async (event: Partial<AnalyticsEvent>): Promise<void> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/analytics/api/analyticsAPI.ts:export const trackPageView = async (path: string, title?: string): Promise<void> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/analytics/api/analyticsAPI.ts:export const identifyUser = async (id: string, traits?: Record<string, unknown>): Promise<void> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/analytics/api/analyticsAPI.ts:export const resetUser = async (): Promise<void> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/analytics/api/analyticsAPI.ts:export const getConfig = (): AnalyticsConfig => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/analytics/api/analyticsAPI.ts:export const setEnabled = (enabled: boolean): void => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/analytics/api/analyticsAPI.ts:// Export all functions as analyticsAPI object
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/compatibility/index.ts: * It maps old function signatures to the new consolidated API to ensure a smooth transition.
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/compatibility/index.ts: * @deprecated Use the new StoreAPI.createStore function instead
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/compatibility/index.ts:export async function createStore(userId: string, input: any): Promise<Store | null> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/compatibility/index.ts: * @deprecated Use the new StoreAPI.getStore function instead
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/compatibility/index.ts:export async function getStoreById(storeId: string): Promise<Store | null> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/compatibility/index.ts: * @deprecated Use the new StoreAPI.getStoreByUserId function instead
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/compatibility/index.ts:export async function getStoreByUserId(userId: string): Promise<Store | null> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/compatibility/index.ts: * @deprecated Use the new StoreAPI.updateStore function instead
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/compatibility/index.ts:export async function updateStore(storeId: string, data: any): Promise<Store | null> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/compatibility/index.ts: * @deprecated Use the new StoreAPI.deleteStore function instead
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/compatibility/index.ts:export async function deleteStore(storeId: string): Promise<boolean> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/compatibility/index.ts: * @deprecated Use the new StoreAPI.getStoreProducts function instead
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/compatibility/index.ts:export async function fetchStoreProducts(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/compatibility/index.ts: * @deprecated Use the new StoreAPI.createProduct function instead
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/compatibility/index.ts:export async function createProduct(storeId: string, productData: any): Promise<Product | null> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/compatibility/index.ts: * @deprecated Use the new StoreAPI.getProduct function instead
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/compatibility/index.ts:export async function getProductById(productId: string): Promise<Product | null> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/compatibility/index.ts: * @deprecated Use the new StoreAPI.updateProduct function instead
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/compatibility/index.ts:export async function updateProduct(productId: string, data: any): Promise<Product | null> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/compatibility/index.ts: * @deprecated Use the new StoreAPI.deleteProduct function instead
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/compatibility/index.ts:export async function deleteProduct(productId: string): Promise<boolean> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/compatibility/index.ts: * @deprecated Use the new StoreAPI.getFeaturedProducts function instead
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/compatibility/index.ts:export async function getFeaturedProducts(limit: number = 10): Promise<Product[]> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/compatibility/index.ts: * @deprecated Use the new StoreAPI.getNewestProducts function instead
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/compatibility/index.ts:export async function getNewestProducts(limit: number = 10): Promise<Product[]> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/tests/hooks.test.tsx:// Mock the API functions
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/tests/hooks.test.tsx:// Import the mocked API functions
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/tests/hooks.test.tsx:const createWrapper = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/tests/hooks.test.tsx:      const { result } = renderHook(() => useStore('store-123'), {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/tests/hooks.test.tsx:      const { result } = renderHook(() => useUserStore('user-123'), {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/tests/hooks.test.tsx:      const { result } = renderHook(() => useStoreSearch({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/tests/hooks.test.tsx:      const { result } = renderHook(() => useCreateStore(), {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/tests/hooks.test.tsx:      const { result } = renderHook(() => useUpdateStore(), {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/tests/hooks.test.tsx:      const { result } = renderHook(() => useDeleteStore(), {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/tests/hooks.test.tsx:      const { result } = renderHook(() => useProduct('product-123'), {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/tests/hooks.test.tsx:      const { result } = renderHook(() => useProductSearch({
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/tests/hooks.test.tsx:      const { result } = renderHook(() => useStoreProducts('store-123', 0, 10), {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/tests/hooks.test.tsx:      const { result } = renderHook(() => useFeaturedProducts(10), {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/tests/hooks.test.tsx:      const { result } = renderHook(() => useNewestProducts(10), {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/tests/hooks.test.tsx:      const { result } = renderHook(() => useCreateProduct(), {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/tests/hooks.test.tsx:      const { result } = renderHook(() => useUpdateProduct(), {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/tests/hooks.test.tsx:      const { result } = renderHook(() => useDeleteProduct(), {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/tests/api.test.ts: * This file contains tests for the Store Service API functions.
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/tests/api.test.ts:      // Call the function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/tests/api.test.ts:      // Call the function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/tests/api.test.ts:      // Call the function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/tests/api.test.ts:      // Call the function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/tests/api.test.ts:      // Call the function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/tests/api.test.ts:      // Call the function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/tests/api.test.ts:      // Call the function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/tests/api.test.ts:      // Call the function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/tests/api.test.ts:      // Call the function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/tests/api.test.ts:      // Call the function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/tests/api.test.ts:      // Call the function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/tests/api.test.ts:      // Call the function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/tests/api.test.ts:      // Call the function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/tests/api.test.ts:      // Call the function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/tests/api.test.ts:      // Call the function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/utils/errorHandling.ts: * This file contains utility functions for handling errors in the Store Service.
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/utils/errorHandling.ts:export function handleApiError<T>(message: string, error: unknown, defaultValue?: T): T {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/utils/errorHandling.ts:export function formatValidationErrors(errors: Record<string, string>): string {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/utils/errorHandling.ts:export function isErrorCode(error: unknown, code: string): boolean {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/utils/errorHandling.ts:export function isNotFoundError(error: unknown): boolean {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/utils/errorHandling.ts:export function isForeignKeyViolation(error: unknown): boolean {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/utils/errorHandling.ts:export function isUniqueConstraintViolation(error: unknown): boolean {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/utils/errorHandling.ts:export function isCheckConstraintViolation(error: unknown): boolean {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/utils/errorHandling.ts:export function isPermissionError(error: unknown): boolean {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/utils/cache.ts:export function generateSearchCacheKey(params: Record<string, any>): string {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/utils/cache.ts:export function clearAllCaches(): void {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/utils/cache.ts:export function clearStoreCache(storeId: string | null): void {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/utils/cache.ts:export function clearProductCache(productId: string | null): void {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/utils/transformers.ts: * This file contains utility functions for transforming data between the database
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/utils/transformers.ts:export function transformStoreData(data: any): Store {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/utils/transformers.ts:export function transformProductData(data: any): Product {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/utils/transformers.ts:export function mapStoreStatus(status: string): StoreStatus {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/utils/transformers.ts:export function mapStoreVisibility(visibility: string): StoreVisibility {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/utils/transformers.ts:export function mapProductStatus(status: string): ProductStatus {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/utils/transformers.ts:export function mapProductCategory(category: string): ProductCategory {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/utils/transformers.ts:export function transformLegacyStoreData(legacyStore: any): Store {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/utils/transformers.ts:export function transformLegacyProductData(legacyProduct: any): Product {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/hooks/useStore.tsx:export function useStore(storeId: string, options?: UseQueryOptions<Store>) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/hooks/useStore.tsx:export function useUserStore(userId: string, options?: UseQueryOptions<Store | null>) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/hooks/useStore.tsx:export function useStoreSearch(params: StoreSearchParams, options?: UseQueryOptions<StoreSearchResult>) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/hooks/useStore.tsx:export function useCreateStore(options?: UseMutationOptions<Store, Error, { params: CreateStoreParams; userId: string }>) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/hooks/useStore.tsx:export function useUpdateStore(options?: UseMutationOptions<Store, Error, UpdateStoreParams>) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/hooks/useStore.tsx:export function useDeleteStore(options?: UseMutationOptions<boolean, Error, string>) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/hooks/useStore.tsx:export function useProduct(productId: string, options?: UseQueryOptions<Product>) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/hooks/useStore.tsx:export function useProductSearch(params: ProductSearchParams, options?: UseQueryOptions<ProductSearchResult>) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/hooks/useStore.tsx:export function useStoreProducts(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/hooks/useStore.tsx:export function useFeaturedProducts(limit = 10, options?: UseQueryOptions<Product[]>) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/hooks/useStore.tsx:export function useNewestProducts(limit = 10, options?: UseQueryOptions<Product[]>) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/hooks/useStore.tsx:export function useCreateProduct(options?: UseMutationOptions<Product, Error, CreateProductParams>) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/hooks/useStore.tsx:export function useUpdateProduct(options?: UseMutationOptions<Product, Error, UpdateProductParams>) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/hooks/useStore.tsx:export function useDeleteProduct(options?: UseMutationOptions<boolean, Error, string>) {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/storeService.ts:export async function createStore(userId: string, input: CreateStoreInput): Promise<Store | null> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/storeService.ts:export async function getStoreByUserId(userId: string): Promise<Store | null> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/storeService.ts:export async function getStore(storeId: string): Promise<Store | null> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/api/core.ts: * This file contains the core API functions for the Store Service.
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/api/core.ts:export async function createStore(params: CreateStoreParams, userId: string): Promise<Store> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/api/core.ts:export async function getStore(storeId: string): Promise<Store> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/api/core.ts:export async function getStoreByUserId(userId: string): Promise<Store | null> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/api/core.ts:export async function updateStore(params: UpdateStoreParams): Promise<Store> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/api/core.ts:export async function deleteStore(storeId: string): Promise<boolean> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/api/core.ts:export async function searchStores(params: StoreSearchParams): Promise<StoreSearchResult> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/api/core.ts:export async function createProduct(params: CreateProductParams): Promise<Product> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/api/core.ts:export async function getProduct(productId: string): Promise<Product> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/api/core.ts:export async function updateProduct(params: UpdateProductParams): Promise<Product> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/api/core.ts:export async function deleteProduct(productId: string): Promise<boolean> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/api/core.ts:export async function searchProducts(params: ProductSearchParams): Promise<ProductSearchResult> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/api/core.ts:export async function getStoreProducts(storeId: string, page = 0, limit = 10): Promise<ProductSearchResult> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/api/core.ts:export async function getFeaturedProducts(limit = 10): Promise<Product[]> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/api/core.ts:export async function getNewestProducts(limit = 10): Promise<Product[]> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/store/api/core.ts:async function updateStoreProductCount(storeId: string): Promise<void> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/stripe/identity-verification.ts:export const createIdentityVerificationSession = async (userId: string, returnUrl: string): Promise<string | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/stripe/identity-verification.ts:    // Call the Supabase edge function to create a Stripe Identity verification session
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/stripe/identity-verification.ts:    const { data, error } = await supabase.functions.invoke('createIdentityVerificationSession', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/stripe/identity-verification.ts:    // Call Supabase edge function to check the current status with Stripe
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/stripe/identity-verification.ts:    const { data, error: functionError } = await supabase.functions.invoke('checkIdentityVerificationStatus', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/stripe/identity-verification.ts:    if (functionError) throw functionError;
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/stripe/platformFees.ts:export function calculatePlatformFees(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/stripe/platformFees.ts:export function calculateCreatorProgramBenefits(amount: number): CreatorProgramBenefits {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/stripe/platformFees.ts:export function formatFeeBreakdown(breakdown: FeeBreakdown): string {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/stripe/platformFees.ts:export function calculateStripeApplicationFee(
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/stripe/platformFees.ts:export async function checkCreatorProgramEligibility(userId: string): Promise<boolean> {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/stripe/platformFees.ts:export function getFeeExplanation(isCreatorProgram: boolean): string {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/stripe/connect.ts:export const getStripeConnectAccountId = async (userId: string): Promise<string | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/stripe/connect.ts:    const { data, error } = await supabase.functions.invoke('get-stripe-connect-account-id', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/stripe/connect.ts:    const { data, error } = await supabase.functions.invoke('create-stripe-connect-account', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/stripe/connect.ts:    const { data, error } = await supabase.functions.invoke('create-stripe-connect-onboarding-link', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/stripe/connect.ts:    const { data, error } = await supabase.functions.invoke('check-stripe-connect-status', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/stripe/connect.ts:export const createAccountLink = async (accountId: string): Promise<string | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/stripe/connect.ts:    const { data, error } = await supabase.functions.invoke('create-account-link', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/stripe/connect.ts:export const checkConnectAccountStatus = async (accountId: string): Promise<any> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/stripe/connect.ts:    const { data, error } = await supabase.functions.invoke('check-connect-account-status', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/stripe/connect.ts:export const updateConnectAccountStatus = async (userId: string, status: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/stripe/connect.ts:    const { data, error } = await supabase.functions.invoke('update-connect-account-status', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/stripe/index.ts:const getStripe = () => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/stripe/index.ts:    const { data, error } = await supabase.functions.invoke('create-payment-intent', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/stripe/index.ts:    const { data, error } = await supabase.functions.invoke('create-checkout-session', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/stripe/index.ts:export const redirectToCheckout = async (sessionId: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/stripe/index.ts:    const { data, error } = await supabase.functions.invoke('create-customer', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/stripe/index.ts:    const { data, error } = await supabase.functions.invoke('get-payment-methods', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/stripe/index.ts:    const { data, error } = await supabase.functions.invoke('create-setup-intent', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/stripe/index.ts:    const { data, error } = await supabase.functions.invoke('create-refund', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/stripe/index.ts:    const { data, error } = await supabase.functions.invoke('get-payment-history', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/stripe/index.ts:    const { data, error } = await supabase.functions.invoke('create-subscription', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/stripe/index.ts:    const { data, error } = await supabase.functions.invoke('cancel-subscription', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/stripe/index.ts:    // For client-side validation, we'll use the Supabase function
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/stripe/index.ts:    const { data, error } = await supabase.functions.invoke('validate-webhook', {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/stripe/index.ts:export const getAccountBalance = async (): Promise<any | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/stripe/index.ts:    const { data, error } = await supabase.functions.invoke('get-account-balance');
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/media/cdnUtils.ts:export const generateCdnUrl = (url: string, width?: number, height?: number): string => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/media/fileManager.ts:export const deleteMedia = async (url: string): Promise<boolean> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/media/fileManager.ts:export const listMedia = async (path: string): Promise<{ name: string; url: string }[]> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/media/fileManager.ts:export const getMediaMetadata = async (url: string): Promise<Record<string, unknown> | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/media/imageOptimizer.ts:export const createThumbnail = async (file: File, options: ThumbnailOptions = { width: 300, quality: 80 }): Promise<Blob> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/media/imageOptimizer.ts:export const optimizeImage = async (file: File, options: MediaOptimizationOptions = { maxWidth: 1920, quality: 80 }): Promise<Blob> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/media/uploader.ts:    const progressInterval = setInterval(() => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/eventService.ts:// Re-export the main functions
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/eventService.ts:// Additional event service functions
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/eventService.ts:export const getEventById = async (id: string): Promise<Event | null> => {
/Users/emmanuelakangbou/CascadeProjects/commonlyapp/src/services/eventService.ts:export const deleteAnonymousEvents = async (): Promise<number> => {
